
407ve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800acec  0800acec  0001acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae7c  0800ae7c  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae7c  0800ae7c  0001ae7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae84  0800ae84  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae84  0800ae84  0001ae84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae88  0800ae88  0001ae88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800ae8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          0000230c  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00003400  20002470  20002470  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4f0  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004182  00000000  00000000  0003f684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f8  00000000  00000000  00043808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001878  00000000  00000000  00045200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000266f7  00000000  00000000  00046a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002095b  00000000  00000000  0006d16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e46eb  00000000  00000000  0008daca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001721b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007204  00000000  00000000  00172208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800acd4 	.word	0x0800acd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	0800acd4 	.word	0x0800acd4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <wireWriteRegister>:
 @brief  Sends a single command byte over I2C
 */
/**************************************************************************/
uint8_t adrs_219 = 0x40; // you can call this from main function when necessary especially when using multiple INA219 on board
void wireWriteRegister (uint8_t reg, uint16_t value)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af04      	add	r7, sp, #16
 80004d2:	4603      	mov	r3, r0
 80004d4:	460a      	mov	r2, r1
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	4613      	mov	r3, r2
 80004da:	80bb      	strh	r3, [r7, #4]
    uint8_t i2c_temp[2];
    i2c_temp[0] = value>>8;
 80004dc:	88bb      	ldrh	r3, [r7, #4]
 80004de:	0a1b      	lsrs	r3, r3, #8
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	733b      	strb	r3, [r7, #12]
    i2c_temp[1] = value;
 80004e6:	88bb      	ldrh	r3, [r7, #4]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Mem_Write(&hi2c1, adrs_219<<1, (uint16_t)reg, 1, i2c_temp, 2, 0xffffffff);
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <wireWriteRegister+0x54>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	b29b      	uxth	r3, r3
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	b299      	uxth	r1, r3
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	f04f 33ff 	mov.w	r3, #4294967295
 80004fe:	9302      	str	r3, [sp, #8]
 8000500:	2302      	movs	r3, #2
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2301      	movs	r3, #1
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <wireWriteRegister+0x58>)
 800050e:	f002 ff2b 	bl	8003368 <HAL_I2C_Mem_Write>
    HAL_Delay(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f001 f906 	bl	8001724 <HAL_Delay>
}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000000 	.word	0x20000000
 8000524:	20000238 	.word	0x20000238

08000528 <setCalibration_32V_2A>:
 occurs at 3.2A.

 @note   These calculations assume a 0.1 ohm resistor is present
 */
/**************************************************************************/
void setCalibration_32V_2A(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

    // 5. Compute the calibration register
    // Cal = trunc (0.04096 / (Current_LSB * RSHUNT))
    // Cal = 4096 (0x1000)

     ina219_calValue = 4096;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <setCalibration_32V_2A+0x40>)
 8000530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000534:	601a      	str	r2, [r3, #0]
    // MaximumPower = Max_Current_Before_Overflow * VBUS_MAX
    // MaximumPower = 3.2 * 32V
    // MaximumPower = 102.4W

     // Set multipliers to convert raw current/power values
     ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <setCalibration_32V_2A+0x44>)
 8000538:	220a      	movs	r2, #10
 800053a:	601a      	str	r2, [r3, #0]
     ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <setCalibration_32V_2A+0x48>)
 800053e:	2202      	movs	r2, #2
 8000540:	601a      	str	r2, [r3, #0]

    // Set Calibration register to 'Cal' calculated above
    wireWriteRegister(INA219_REG_CALIBRATION, ina219_calValue);
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <setCalibration_32V_2A+0x40>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	b29b      	uxth	r3, r3
 8000548:	4619      	mov	r1, r3
 800054a:	2005      	movs	r0, #5
 800054c:	f7ff ffbe 	bl	80004cc <wireWriteRegister>

    // Set Config register to take into account the settings above
    uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V
 8000550:	f643 139f 	movw	r3, #14751	; 0x399f
 8000554:	80fb      	strh	r3, [r7, #6]
            | INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT
            | INA219_CONFIG_SADCRES_12BIT_1S_532US
            | INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;
    wireWriteRegister(INA219_REG_CONFIG, config);
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	4619      	mov	r1, r3
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff ffb6 	bl	80004cc <wireWriteRegister>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000188 	.word	0x20000188
 800056c:	20000180 	.word	0x20000180
 8000570:	20000184 	.word	0x20000184

08000574 <ADC_GetValueFromChannel>:
 * Brief	: Switch ADC channel, poll, get value
 * @Param	: ADC Channel
 * @retval	: 16bit ADC Value
 */
static uint16_t ADC_GetValueFromChannel(uint32_t c)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
	HAL_ADC_Stop(&hadc1);
 800057c:	4815      	ldr	r0, [pc, #84]	; (80005d4 <ADC_GetValueFromChannel+0x60>)
 800057e:	f001 fa0b 	bl	8001998 <HAL_ADC_Stop>
//	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
//	  {
//	    Error_Handler();
//	  }

  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]

  sConfig.Channel = c;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8000594:	2301      	movs	r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000598:	2301      	movs	r3, #1
 800059a:	613b      	str	r3, [r7, #16]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	4619      	mov	r1, r3
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <ADC_GetValueFromChannel+0x60>)
 80005a4:	f001 fac4 	bl	8001b30 <HAL_ADC_ConfigChannel>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <ADC_GetValueFromChannel+0x3e>
  {
	Error_Handler();
 80005ae:	f000 fc9b 	bl	8000ee8 <Error_Handler>
  }


  HAL_ADC_Start(&hadc1);
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <ADC_GetValueFromChannel+0x60>)
 80005b4:	f001 f91e 	bl	80017f4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1000);
 80005b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <ADC_GetValueFromChannel+0x60>)
 80005be:	f001 fa1e 	bl	80019fe <HAL_ADC_PollForConversion>
  return HAL_ADC_GetValue(&hadc1);
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <ADC_GetValueFromChannel+0x60>)
 80005c4:	f001 faa6 	bl	8001b14 <HAL_ADC_GetValue>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29b      	uxth	r3, r3

}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000018c 	.word	0x2000018c

080005d8 <CANopenSendSDO>:
 * @param: len: data lenght, maximum 4 bytes
 * @param: rw: 0 to read (x40), 1 to write (x20)
 * @reval: HAL_Status
 */
HAL_StatusTypeDef CANopenSendSDO(uint8_t id, uint32_t index, uint32_t data, uint8_t len, uint8_t rw)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
 80005e2:	461a      	mov	r2, r3
 80005e4:	4603      	mov	r3, r0
 80005e6:	73fb      	strb	r3, [r7, #15]
 80005e8:	4613      	mov	r3, r2
 80005ea:	73bb      	strb	r3, [r7, #14]
	uint8_t txbuf[8];
	TxHeader.DLC = 8;
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <CANopenSendSDO+0xb8>)
 80005ee:	2208      	movs	r2, #8
 80005f0:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 80005f2:	4b27      	ldr	r3, [pc, #156]	; (8000690 <CANopenSendSDO+0xb8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]

	TxHeader.RTR = CAN_RTR_DATA;//sending data frame
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <CANopenSendSDO+0xb8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <CANopenSendSDO+0xb8>)
 8000600:	2200      	movs	r2, #0
 8000602:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = 0x600+id;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800060a:	461a      	mov	r2, r3
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <CANopenSendSDO+0xb8>)
 800060e:	601a      	str	r2, [r3, #0]
	txbuf[0] = 0x2F;
 8000610:	232f      	movs	r3, #47	; 0x2f
 8000612:	743b      	strb	r3, [r7, #16]
	if(!rw) txbuf[0] = 0x4F;
 8000614:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d101      	bne.n	8000620 <CANopenSendSDO+0x48>
 800061c:	234f      	movs	r3, #79	; 0x4f
 800061e:	743b      	strb	r3, [r7, #16]
	if(len == 2) txbuf[0] &= 0xFB;
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d105      	bne.n	8000632 <CANopenSendSDO+0x5a>
 8000626:	7c3b      	ldrb	r3, [r7, #16]
 8000628:	f023 0304 	bic.w	r3, r3, #4
 800062c:	b2db      	uxtb	r3, r3
 800062e:	743b      	strb	r3, [r7, #16]
 8000630:	e007      	b.n	8000642 <CANopenSendSDO+0x6a>
	else if(len == 4) txbuf[0] &= 0xF3;
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	2b04      	cmp	r3, #4
 8000636:	d104      	bne.n	8000642 <CANopenSendSDO+0x6a>
 8000638:	7c3b      	ldrb	r3, [r7, #16]
 800063a:	f023 030c 	bic.w	r3, r3, #12
 800063e:	b2db      	uxtb	r3, r3
 8000640:	743b      	strb	r3, [r7, #16]

	txbuf[1] = (index>>8)&0xff;
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	b2db      	uxtb	r3, r3
 8000648:	747b      	strb	r3, [r7, #17]
	txbuf[2] = (index>>16)&0xff;
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	0c1b      	lsrs	r3, r3, #16
 800064e:	b2db      	uxtb	r3, r3
 8000650:	74bb      	strb	r3, [r7, #18]
	txbuf[3] = index&0xff;
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	74fb      	strb	r3, [r7, #19]

	txbuf[4] = data & 0xff;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	753b      	strb	r3, [r7, #20]
	txbuf[5] = (data>>8)&0xff;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b2db      	uxtb	r3, r3
 8000664:	757b      	strb	r3, [r7, #21]
	txbuf[6] = (data>>16)&0xff;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	0c1b      	lsrs	r3, r3, #16
 800066a:	b2db      	uxtb	r3, r3
 800066c:	75bb      	strb	r3, [r7, #22]
	txbuf[7] = (data>>24)&0xff;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	0e1b      	lsrs	r3, r3, #24
 8000672:	b2db      	uxtb	r3, r3
 8000674:	75fb      	strb	r3, [r7, #23]
	return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txbuf, &TxMailBox);;
 8000676:	f107 0210 	add.w	r2, r7, #16
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <CANopenSendSDO+0xbc>)
 800067c:	4904      	ldr	r1, [pc, #16]	; (8000690 <CANopenSendSDO+0xb8>)
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <CANopenSendSDO+0xc0>)
 8000680:	f001 fdb3 	bl	80021ea <HAL_CAN_AddTxMessage>
 8000684:	4603      	mov	r3, r0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200003e4 	.word	0x200003e4
 8000694:	20000418 	.word	0x20000418
 8000698:	200001d4 	.word	0x200001d4

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b092      	sub	sp, #72	; 0x48
 80006a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f000 ffcd 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f8e5 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f000 fb83 	bl	8000db4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006ae:	f000 f94b 	bl	8000948 <MX_ADC1_Init>
  MX_DAC_Init();
 80006b2:	f000 f9fb 	bl	8000aac <MX_DAC_Init>
  MX_I2C1_Init();
 80006b6:	f000 fa2d 	bl	8000b14 <MX_I2C1_Init>
  MX_TIM4_Init();
 80006ba:	f000 fa59 	bl	8000b70 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80006be:	f000 fad1 	bl	8000c64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006c2:	f000 faf9 	bl	8000cb8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006c6:	f000 fb21 	bl	8000d0c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80006ca:	f000 fb49 	bl	8000d60 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80006ce:	f009 fb2d 	bl	8009d2c <MX_USB_DEVICE_Init>
  MX_CAN1_Init();
 80006d2:	f000 f97b 	bl	80009cc <MX_CAN1_Init>
  MX_CAN2_Init();
 80006d6:	f000 f9b3 	bl	8000a40 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */

  /*
   * Initiate INA module
   */
  setCalibration_32V_2A();
 80006da:	f7ff ff25 	bl	8000528 <setCalibration_32V_2A>

  loader_stm32_config_t config = {
 80006de:	4b5a      	ldr	r3, [pc, #360]	; (8000848 <main+0x1ac>)
 80006e0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80006e4:	461d      	mov	r5, r3
 80006e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ea:	682b      	ldr	r3, [r5, #0]
 80006ec:	6023      	str	r3, [r4, #0]
      .pin_num_io0 = GPIO_PIN_4,
      .port_rst = GPIOD,
      .pin_num_rst = GPIO_PIN_3,
  };

  loader_port_stm32_init(&config);
 80006ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fbfe 	bl	8000ef4 <loader_port_stm32_init>

  uint16_t v = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint8_t TxBuf[17] = "$             #\n\r",\
 80006fc:	4b53      	ldr	r3, [pc, #332]	; (800084c <main+0x1b0>)
 80006fe:	f107 0410 	add.w	r4, r7, #16
 8000702:	461d      	mov	r5, r3
 8000704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000708:	682b      	ldr	r3, [r5, #0]
 800070a:	7023      	strb	r3, [r4, #0]
		  substr[11];

  OFF_POWER;
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000712:	484f      	ldr	r0, [pc, #316]	; (8000850 <main+0x1b4>)
 8000714:	f002 fcca 	bl	80030ac <HAL_GPIO_WritePin>

#ifdef TEST_CAN
  //Test CAN
HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000718:	2102      	movs	r1, #2
 800071a:	484e      	ldr	r0, [pc, #312]	; (8000854 <main+0x1b8>)
 800071c:	f001 ff52 	bl	80025c4 <HAL_CAN_ActivateNotification>
HAL_CAN_Start(&hcan1);
 8000720:	484c      	ldr	r0, [pc, #304]	; (8000854 <main+0x1b8>)
 8000722:	f001 fd1e 	bl	8002162 <HAL_CAN_Start>

////Boot up:
TxHeader.DLC = 8;
 8000726:	4b4c      	ldr	r3, [pc, #304]	; (8000858 <main+0x1bc>)
 8000728:	2208      	movs	r2, #8
 800072a:	611a      	str	r2, [r3, #16]
TxHeader.IDE = CAN_ID_STD;
 800072c:	4b4a      	ldr	r3, [pc, #296]	; (8000858 <main+0x1bc>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
TxHeader.StdId = 601;
 8000732:	4b49      	ldr	r3, [pc, #292]	; (8000858 <main+0x1bc>)
 8000734:	f240 2259 	movw	r2, #601	; 0x259
 8000738:	601a      	str	r2, [r3, #0]
TxHeader.RTR = CAN_RTR_DATA;//sending data frame
 800073a:	4b47      	ldr	r3, [pc, #284]	; (8000858 <main+0x1bc>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
TxHeader.TransmitGlobalTime = DISABLE;
 8000740:	4b45      	ldr	r3, [pc, #276]	; (8000858 <main+0x1bc>)
 8000742:	2200      	movs	r2, #0
 8000744:	751a      	strb	r2, [r3, #20]
//CANTx_Dat[0] = 1;
//CANTx_Dat[1] = 1;
//HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CANTx_Dat, &TxMailBox);
//
TxHeader.DLC = 8;
 8000746:	4b44      	ldr	r3, [pc, #272]	; (8000858 <main+0x1bc>)
 8000748:	2208      	movs	r2, #8
 800074a:	611a      	str	r2, [r3, #16]
TxHeader.IDE = CAN_ID_STD;
 800074c:	4b42      	ldr	r3, [pc, #264]	; (8000858 <main+0x1bc>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
TxHeader.RTR = CAN_RTR_DATA;//sending data frame
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <main+0x1bc>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
//CANTx_Dat[7] = 0x00;
//
//HAL_CAN_AddTxMessage(&hcan1, &TxHeader, CANTx_Dat, &TxMailBox);

//Enable Motor;
CANopenSendSDO(1, 0x604000, 0x2F, 2, 1);
 8000758:	2301      	movs	r3, #1
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2302      	movs	r3, #2
 800075e:	222f      	movs	r2, #47	; 0x2f
 8000760:	493e      	ldr	r1, [pc, #248]	; (800085c <main+0x1c0>)
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ff38 	bl	80005d8 <CANopenSendSDO>

//Set operation mode to Speed mode
CANopenSendSDO(1, 0x606000, 3, 1, 1);
 8000768:	2301      	movs	r3, #1
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	2203      	movs	r2, #3
 8000770:	493b      	ldr	r1, [pc, #236]	; (8000860 <main+0x1c4>)
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff ff30 	bl	80005d8 <CANopenSendSDO>
joystickbalanceAdcValue = ADC_GetValueFromChannel(ADC_CHANNEL_8);
 8000778:	2008      	movs	r0, #8
 800077a:	f7ff fefb 	bl	8000574 <ADC_GetValueFromChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4b38      	ldr	r3, [pc, #224]	; (8000864 <main+0x1c8>)
 8000784:	801a      	strh	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  CANopenSendSDO(1, 0x604000, 0x06, 2, 1);
#ifdef TEST_CAN
	  joystickAdcValue = ADC_GetValueFromChannel(ADC_CHANNEL_8);
 8000786:	2008      	movs	r0, #8
 8000788:	f7ff fef4 	bl	8000574 <ADC_GetValueFromChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	4b35      	ldr	r3, [pc, #212]	; (8000868 <main+0x1cc>)
 8000792:	801a      	strh	r2, [r3, #0]

	  if(joystickAdcValue > joystickbalanceAdcValue)
 8000794:	4b34      	ldr	r3, [pc, #208]	; (8000868 <main+0x1cc>)
 8000796:	881a      	ldrh	r2, [r3, #0]
 8000798:	4b32      	ldr	r3, [pc, #200]	; (8000864 <main+0x1c8>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	429a      	cmp	r2, r3
 800079e:	d927      	bls.n	80007f0 <main+0x154>
	  {
		  //Rotate Motor CW
		  CANopenSendSDO(1, 0x607E00, 0, 1, 1);
 80007a0:	2301      	movs	r3, #1
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2301      	movs	r3, #1
 80007a6:	2200      	movs	r2, #0
 80007a8:	4930      	ldr	r1, [pc, #192]	; (800086c <main+0x1d0>)
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff ff14 	bl	80005d8 <CANopenSendSDO>
		  //Set target speed
		  uint16_t speed = joystickAdcValue - joystickbalanceAdcValue;
 80007b0:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <main+0x1cc>)
 80007b2:	881a      	ldrh	r2, [r3, #0]
 80007b4:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <main+0x1c8>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
		  if(speed > 2000) speed = 2000;
 80007bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80007be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80007c2:	d902      	bls.n	80007ca <main+0x12e>
 80007c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
		  if(speed < 100) speed = 0;
 80007ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80007cc:	2b63      	cmp	r3, #99	; 0x63
 80007ce:	d801      	bhi.n	80007d4 <main+0x138>
 80007d0:	2300      	movs	r3, #0
 80007d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
		  CANopenSendSDO(1, 0x60FF00, speed*2000, 4, 1);
 80007d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80007d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	2301      	movs	r3, #1
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2304      	movs	r3, #4
 80007e6:	4922      	ldr	r1, [pc, #136]	; (8000870 <main+0x1d4>)
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff fef5 	bl	80005d8 <CANopenSendSDO>
 80007ee:	e026      	b.n	800083e <main+0x1a2>
	  }
	  else
	  {
		  //Rotate Motor CCW
		  CANopenSendSDO(1, 0x607E00, 1, 1, 1);
 80007f0:	2301      	movs	r3, #1
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	2201      	movs	r2, #1
 80007f8:	491c      	ldr	r1, [pc, #112]	; (800086c <main+0x1d0>)
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff feec 	bl	80005d8 <CANopenSendSDO>
		  //Set target speed
		  uint16_t speed = joystickbalanceAdcValue - joystickAdcValue;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <main+0x1c8>)
 8000802:	881a      	ldrh	r2, [r3, #0]
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <main+0x1cc>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	87bb      	strh	r3, [r7, #60]	; 0x3c
		  if(speed > 2000) speed = 2000;
 800080c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800080e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000812:	d902      	bls.n	800081a <main+0x17e>
 8000814:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000818:	87bb      	strh	r3, [r7, #60]	; 0x3c
		  if(speed < 100) speed = 0;
 800081a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800081c:	2b63      	cmp	r3, #99	; 0x63
 800081e:	d801      	bhi.n	8000824 <main+0x188>
 8000820:	2300      	movs	r3, #0
 8000822:	87bb      	strh	r3, [r7, #60]	; 0x3c
		  CANopenSendSDO(1, 0x60FF00, speed*2000, 4, 1);
 8000824:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000826:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800082a:	fb02 f303 	mul.w	r3, r2, r3
 800082e:	461a      	mov	r2, r3
 8000830:	2301      	movs	r3, #1
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2304      	movs	r3, #4
 8000836:	490e      	ldr	r1, [pc, #56]	; (8000870 <main+0x1d4>)
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff fecd 	bl	80005d8 <CANopenSendSDO>
	  }
#endif
//
	  HAL_Delay(20);
 800083e:	2014      	movs	r0, #20
 8000840:	f000 ff70 	bl	8001724 <HAL_Delay>
	  joystickAdcValue = ADC_GetValueFromChannel(ADC_CHANNEL_8);
 8000844:	e79f      	b.n	8000786 <main+0xea>
 8000846:	bf00      	nop
 8000848:	0800acec 	.word	0x0800acec
 800084c:	0800ad00 	.word	0x0800ad00
 8000850:	40020400 	.word	0x40020400
 8000854:	200001d4 	.word	0x200001d4
 8000858:	200003e4 	.word	0x200003e4
 800085c:	00604000 	.word	0x00604000
 8000860:	00606000 	.word	0x00606000
 8000864:	20000426 	.word	0x20000426
 8000868:	20000424 	.word	0x20000424
 800086c:	00607e00 	.word	0x00607e00
 8000870:	0060ff00 	.word	0x0060ff00

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2230      	movs	r2, #48	; 0x30
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f00a f9b6 	bl	800abf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	4b28      	ldr	r3, [pc, #160]	; (8000940 <SystemClock_Config+0xcc>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a27      	ldr	r2, [pc, #156]	; (8000940 <SystemClock_Config+0xcc>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <SystemClock_Config+0xcc>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <SystemClock_Config+0xd0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a21      	ldr	r2, [pc, #132]	; (8000944 <SystemClock_Config+0xd0>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e4:	2308      	movs	r3, #8
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008f2:	2307      	movs	r3, #7
 80008f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	4618      	mov	r0, r3
 80008fc:	f004 fac8 	bl	8004e90 <HAL_RCC_OscConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000906:	f000 faef 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	230f      	movs	r3, #15
 800090c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090e:	2302      	movs	r3, #2
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000916:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800091a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800091c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000920:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2105      	movs	r1, #5
 8000928:	4618      	mov	r0, r3
 800092a:	f004 fd29 	bl	8005380 <HAL_RCC_ClockConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000934:	f000 fad8 	bl	8000ee8 <Error_Handler>
  }
}
 8000938:	bf00      	nop
 800093a:	3750      	adds	r7, #80	; 0x50
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_ADC1_Init+0x78>)
 800095c:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <MX_ADC1_Init+0x7c>)
 800095e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_ADC1_Init+0x78>)
 8000962:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000966:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_ADC1_Init+0x78>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_ADC1_Init+0x78>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_ADC1_Init+0x78>)
 8000976:	2201      	movs	r2, #1
 8000978:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_ADC1_Init+0x78>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_ADC1_Init+0x78>)
 8000984:	2200      	movs	r2, #0
 8000986:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_ADC1_Init+0x78>)
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <MX_ADC1_Init+0x80>)
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_ADC1_Init+0x78>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <MX_ADC1_Init+0x78>)
 8000996:	2201      	movs	r2, #1
 8000998:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_ADC1_Init+0x78>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_ADC1_Init+0x78>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_ADC1_Init+0x78>)
 80009aa:	f000 fedf 	bl	800176c <HAL_ADC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009b4:	f000 fa98 	bl	8000ee8 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000018c 	.word	0x2000018c
 80009c4:	40012000 	.word	0x40012000
 80009c8:	0f000001 	.word	0x0f000001

080009cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	hcan1.Instance = CAN1;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_CAN1_Init+0x6c>)
 80009d2:	4a1a      	ldr	r2, [pc, #104]	; (8000a3c <MX_CAN1_Init+0x70>)
 80009d4:	601a      	str	r2, [r3, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_CAN1_Init+0x6c>)
 80009d8:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <MX_CAN1_Init+0x70>)
 80009da:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_CAN1_Init+0x6c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_CAN1_Init+0x6c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_CAN1_Init+0x6c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_CAN1_Init+0x6c>)
 80009f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009f4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_CAN1_Init+0x6c>)
 80009f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009fc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_CAN1_Init+0x6c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_CAN1_Init+0x6c>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_CAN1_Init+0x6c>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_CAN1_Init+0x6c>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_CAN1_Init+0x6c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_CAN1_Init+0x6c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_CAN1_Init+0x6c>)
 8000a24:	f001 faa2 	bl	8001f6c <HAL_CAN_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_CAN1_Init+0x66>
  {
    Error_Handler();
 8000a2e:	f000 fa5b 	bl	8000ee8 <Error_Handler>
//CAN_Filter.SlaveStartFilterBank = 20;
//
//HAL_CAN_ConfigFilter(&hcan1, &CAN_Filter);
  /* USER CODE END CAN1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200001d4 	.word	0x200001d4
 8000a3c:	40006400 	.word	0x40006400

08000a40 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a46:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <MX_CAN2_Init+0x68>)
 8000a48:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 120;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a4c:	2278      	movs	r2, #120	; 0x78
 8000a4e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a62:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a6a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_CAN2_Init+0x64>)
 8000a92:	f001 fa6b 	bl	8001f6c <HAL_CAN_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000a9c:	f000 fa24 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200001fc 	.word	0x200001fc
 8000aa8:	40006800 	.word	0x40006800

08000aac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_DAC_Init+0x60>)
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <MX_DAC_Init+0x64>)
 8000abe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ac0:	4812      	ldr	r0, [pc, #72]	; (8000b0c <MX_DAC_Init+0x60>)
 8000ac2:	f002 f8e6 	bl	8002c92 <HAL_DAC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000acc:	f000 fa0c 	bl	8000ee8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	480b      	ldr	r0, [pc, #44]	; (8000b0c <MX_DAC_Init+0x60>)
 8000ae0:	f002 f8f9 	bl	8002cd6 <HAL_DAC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000aea:	f000 f9fd 	bl	8000ee8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000aee:	463b      	mov	r3, r7
 8000af0:	2210      	movs	r2, #16
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_DAC_Init+0x60>)
 8000af6:	f002 f8ee 	bl	8002cd6 <HAL_DAC_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 f9f2 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000224 	.word	0x20000224
 8000b10:	40007400 	.word	0x40007400

08000b14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b1a:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <MX_I2C1_Init+0x54>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b20:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_I2C1_Init+0x58>)
 8000b22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b52:	f002 fac5 	bl	80030e0 <HAL_I2C_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b5c:	f000 f9c4 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000238 	.word	0x20000238
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	000186a0 	.word	0x000186a0

08000b70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	f107 0320 	add.w	r3, r7, #32
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b92:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000b94:	4a32      	ldr	r2, [pc, #200]	; (8000c60 <MX_TIM4_Init+0xf0>)
 8000b96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b98:	4b30      	ldr	r3, [pc, #192]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000baa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bb8:	4828      	ldr	r0, [pc, #160]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000bba:	f004 fe01 	bl	80057c0 <HAL_TIM_PWM_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f000 f990 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bd0:	f107 0320 	add.w	r3, r7, #32
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4821      	ldr	r0, [pc, #132]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000bd8:	f005 f954 	bl	8005e84 <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000be2:	f000 f981 	bl	8000ee8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be6:	2360      	movs	r3, #96	; 0x60
 8000be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4817      	ldr	r0, [pc, #92]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000bfe:	f004 fe2f 	bl	8005860 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000c08:	f000 f96e 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2204      	movs	r2, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4812      	ldr	r0, [pc, #72]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000c14:	f004 fe24 	bl	8005860 <HAL_TIM_PWM_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000c1e:	f000 f963 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2208      	movs	r2, #8
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000c2a:	f004 fe19 	bl	8005860 <HAL_TIM_PWM_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000c34:	f000 f958 	bl	8000ee8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000c40:	f004 fe0e 	bl	8005860 <HAL_TIM_PWM_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000c4a:	f000 f94d 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM4_Init+0xec>)
 8000c50:	f000 fb56 	bl	8001300 <HAL_TIM_MspPostInit>

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000028c 	.word	0x2000028c
 8000c60:	40000800 	.word	0x40000800

08000c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_USART1_UART_Init+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c9c:	f005 f96e 	bl	8005f7c <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f000 f91f 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200002d4 	.word	0x200002d4
 8000cb4:	40011000 	.word	0x40011000

08000cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MX_USART2_UART_Init+0x50>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_USART2_UART_Init+0x4c>)
 8000cf0:	f005 f944 	bl	8005f7c <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cfa:	f000 f8f5 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000318 	.word	0x20000318
 8000d08:	40004400 	.word	0x40004400

08000d0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <MX_USART3_UART_Init+0x50>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_USART3_UART_Init+0x4c>)
 8000d44:	f005 f91a 	bl	8005f7c <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d4e:	f000 f8cb 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000035c 	.word	0x2000035c
 8000d5c:	40004800 	.word	0x40004800

08000d60 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_USART6_UART_Init+0x4c>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <MX_USART6_UART_Init+0x50>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_USART6_UART_Init+0x4c>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_USART6_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_USART6_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_USART6_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_USART6_UART_Init+0x4c>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_USART6_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_USART6_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_USART6_UART_Init+0x4c>)
 8000d98:	f005 f8f0 	bl	8005f7c <HAL_UART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000da2:	f000 f8a1 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200003a0 	.word	0x200003a0
 8000db0:	40011400 	.word	0x40011400

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a38      	ldr	r2, [pc, #224]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b36      	ldr	r3, [pc, #216]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a31      	ldr	r2, [pc, #196]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a2a      	ldr	r2, [pc, #168]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_GPIO_Init+0x100>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5c:	4816      	ldr	r0, [pc, #88]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000e5e:	f002 f925 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f640 4118 	movw	r1, #3096	; 0xc18
 8000e68:	4814      	ldr	r0, [pc, #80]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000e6a:	f002 f91f 	bl	80030ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <MX_GPIO_Init+0x104>)
 8000e88:	f001 ff74 	bl	8002d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4;
 8000e8c:	f640 4318 	movw	r3, #3096	; 0xc18
 8000e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_GPIO_Init+0x108>)
 8000ea6:	f001 ff65 	bl	8002d74 <HAL_GPIO_Init>

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	40020c00 	.word	0x40020c00

08000ec0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, CANRx_Dat);
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000ed0:	f001 fa66 	bl	80023a0 <HAL_CAN_GetRxMessage>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000041c 	.word	0x2000041c
 8000ee0:	200003fc 	.word	0x200003fc
 8000ee4:	200001d4 	.word	0x200001d4

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <Error_Handler+0x8>
	...

08000ef4 <loader_port_stm32_init>:
    }
}

void loader_port_stm32_init(loader_stm32_config_t *config)

{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    uart = config->huart;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <loader_port_stm32_init+0x3c>)
 8000f02:	6013      	str	r3, [r2, #0]
    gpio_port_io0 = config->port_io0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <loader_port_stm32_init+0x40>)
 8000f0a:	6013      	str	r3, [r2, #0]
    gpio_port_rst = config->port_rst;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <loader_port_stm32_init+0x44>)
 8000f12:	6013      	str	r3, [r2, #0]
    gpio_num_io0 = config->pin_num_io0;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	891a      	ldrh	r2, [r3, #8]
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <loader_port_stm32_init+0x48>)
 8000f1a:	801a      	strh	r2, [r3, #0]
    gpio_num_rst = config->pin_num_rst;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	8a1a      	ldrh	r2, [r3, #16]
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <loader_port_stm32_init+0x4c>)
 8000f22:	801a      	strh	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	20000428 	.word	0x20000428
 8000f34:	2000042c 	.word	0x2000042c
 8000f38:	20000430 	.word	0x20000430
 8000f3c:	20000434 	.word	0x20000434
 8000f40:	20000436 	.word	0x20000436

08000f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a24      	ldr	r2, [pc, #144]	; (8001044 <HAL_ADC_MspInit+0xb0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d141      	bne.n	800103a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <HAL_ADC_MspInit+0xb4>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a22      	ldr	r2, [pc, #136]	; (8001048 <HAL_ADC_MspInit+0xb4>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <HAL_ADC_MspInit+0xb4>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_ADC_MspInit+0xb4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <HAL_ADC_MspInit+0xb4>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_ADC_MspInit+0xb4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_ADC_MspInit+0xb4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <HAL_ADC_MspInit+0xb4>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_ADC_MspInit+0xb4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800100a:	23cf      	movs	r3, #207	; 0xcf
 800100c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <HAL_ADC_MspInit+0xb8>)
 800101e:	f001 fea9 	bl	8002d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001026:	2303      	movs	r3, #3
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <HAL_ADC_MspInit+0xbc>)
 8001036:	f001 fe9d 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40012000 	.word	0x40012000
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000
 8001050:	40020400 	.word	0x40020400

08001054 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a46      	ldr	r2, [pc, #280]	; (800118c <HAL_CAN_MspInit+0x138>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d13d      	bne.n	80010f2 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001076:	4b46      	ldr	r3, [pc, #280]	; (8001190 <HAL_CAN_MspInit+0x13c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a44      	ldr	r2, [pc, #272]	; (8001190 <HAL_CAN_MspInit+0x13c>)
 800107e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <HAL_CAN_MspInit+0x13c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d10d      	bne.n	80010a4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	4b41      	ldr	r3, [pc, #260]	; (8001194 <HAL_CAN_MspInit+0x140>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a40      	ldr	r2, [pc, #256]	; (8001194 <HAL_CAN_MspInit+0x140>)
 8001092:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <HAL_CAN_MspInit+0x140>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <HAL_CAN_MspInit+0x140>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a39      	ldr	r2, [pc, #228]	; (8001194 <HAL_CAN_MspInit+0x140>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <HAL_CAN_MspInit+0x140>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010c0:	2303      	movs	r3, #3
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010d0:	2309      	movs	r3, #9
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	482f      	ldr	r0, [pc, #188]	; (8001198 <HAL_CAN_MspInit+0x144>)
 80010dc:	f001 fe4a 	bl	8002d74 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2014      	movs	r0, #20
 80010e6:	f001 fd9e 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010ea:	2014      	movs	r0, #20
 80010ec:	f001 fdb7 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80010f0:	e048      	b.n	8001184 <HAL_CAN_MspInit+0x130>
  else if(hcan->Instance==CAN2)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a29      	ldr	r2, [pc, #164]	; (800119c <HAL_CAN_MspInit+0x148>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d143      	bne.n	8001184 <HAL_CAN_MspInit+0x130>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_CAN_MspInit+0x140>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a23      	ldr	r2, [pc, #140]	; (8001194 <HAL_CAN_MspInit+0x140>)
 8001106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <HAL_CAN_MspInit+0x140>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_CAN_MspInit+0x13c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <HAL_CAN_MspInit+0x13c>)
 8001120:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_CAN_MspInit+0x13c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d10d      	bne.n	8001146 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_CAN_MspInit+0x140>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a18      	ldr	r2, [pc, #96]	; (8001194 <HAL_CAN_MspInit+0x140>)
 8001134:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_CAN_MspInit+0x140>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_CAN_MspInit+0x140>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_CAN_MspInit+0x140>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_CAN_MspInit+0x140>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001162:	f242 0320 	movw	r3, #8224	; 0x2020
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001174:	2309      	movs	r3, #9
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <HAL_CAN_MspInit+0x14c>)
 8001180:	f001 fdf8 	bl	8002d74 <HAL_GPIO_Init>
}
 8001184:	bf00      	nop
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40006400 	.word	0x40006400
 8001190:	20000438 	.word	0x20000438
 8001194:	40023800 	.word	0x40023800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40006800 	.word	0x40006800
 80011a0:	40020400 	.word	0x40020400

080011a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_DAC_MspInit+0x7c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d127      	bne.n	8001216 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_DAC_MspInit+0x80>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a15      	ldr	r2, [pc, #84]	; (8001224 <HAL_DAC_MspInit+0x80>)
 80011d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_DAC_MspInit+0x80>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_DAC_MspInit+0x80>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_DAC_MspInit+0x80>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_DAC_MspInit+0x80>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011fe:	2330      	movs	r3, #48	; 0x30
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_DAC_MspInit+0x84>)
 8001212:	f001 fdaf 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40007400 	.word	0x40007400
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000

0800122c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_I2C_MspInit+0x84>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12b      	bne.n	80012a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800126a:	23c0      	movs	r3, #192	; 0xc0
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126e:	2312      	movs	r3, #18
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800127a:	2304      	movs	r3, #4
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <HAL_I2C_MspInit+0x8c>)
 8001286:	f001 fd75 	bl	8002d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 8001294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_I2C_MspInit+0x88>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40005400 	.word	0x40005400
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020400 	.word	0x40020400

080012bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10d      	bne.n	80012ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_TIM_PWM_MspInit+0x40>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_TIM_PWM_MspInit+0x40>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_TIM_PWM_MspInit+0x40>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40000800 	.word	0x40000800
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_TIM_MspPostInit+0x68>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d11e      	bne.n	8001360 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_TIM_MspPostInit+0x6c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a10      	ldr	r2, [pc, #64]	; (800136c <HAL_TIM_MspPostInit+0x6c>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_TIM_MspPostInit+0x6c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800133e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001342:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001350:	2302      	movs	r3, #2
 8001352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4619      	mov	r1, r3
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <HAL_TIM_MspPostInit+0x70>)
 800135c:	f001 fd0a 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40000800 	.word	0x40000800
 800136c:	40023800 	.word	0x40023800
 8001370:	40020c00 	.word	0x40020c00

08001374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b090      	sub	sp, #64	; 0x40
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_UART_MspInit+0x1b4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d12d      	bne.n	80013f2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
 800139a:	4b64      	ldr	r3, [pc, #400]	; (800152c <HAL_UART_MspInit+0x1b8>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a63      	ldr	r2, [pc, #396]	; (800152c <HAL_UART_MspInit+0x1b8>)
 80013a0:	f043 0310 	orr.w	r3, r3, #16
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b61      	ldr	r3, [pc, #388]	; (800152c <HAL_UART_MspInit+0x1b8>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80013b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	4b5d      	ldr	r3, [pc, #372]	; (800152c <HAL_UART_MspInit+0x1b8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a5c      	ldr	r2, [pc, #368]	; (800152c <HAL_UART_MspInit+0x1b8>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b5a      	ldr	r3, [pc, #360]	; (800152c <HAL_UART_MspInit+0x1b8>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e0:	2307      	movs	r3, #7
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e8:	4619      	mov	r1, r3
 80013ea:	4851      	ldr	r0, [pc, #324]	; (8001530 <HAL_UART_MspInit+0x1bc>)
 80013ec:	f001 fcc2 	bl	8002d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013f0:	e095      	b.n	800151e <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a4f      	ldr	r2, [pc, #316]	; (8001534 <HAL_UART_MspInit+0x1c0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d12c      	bne.n	8001456 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	4b4a      	ldr	r3, [pc, #296]	; (800152c <HAL_UART_MspInit+0x1b8>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a49      	ldr	r2, [pc, #292]	; (800152c <HAL_UART_MspInit+0x1b8>)
 8001406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b47      	ldr	r3, [pc, #284]	; (800152c <HAL_UART_MspInit+0x1b8>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	623b      	str	r3, [r7, #32]
 8001416:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <HAL_UART_MspInit+0x1b8>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a42      	ldr	r2, [pc, #264]	; (800152c <HAL_UART_MspInit+0x1b8>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6313      	str	r3, [r2, #48]	; 0x30
 8001428:	4b40      	ldr	r3, [pc, #256]	; (800152c <HAL_UART_MspInit+0x1b8>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001434:	2360      	movs	r3, #96	; 0x60
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001444:	2307      	movs	r3, #7
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144c:	4619      	mov	r1, r3
 800144e:	483a      	ldr	r0, [pc, #232]	; (8001538 <HAL_UART_MspInit+0x1c4>)
 8001450:	f001 fc90 	bl	8002d74 <HAL_GPIO_Init>
}
 8001454:	e063      	b.n	800151e <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART3)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a38      	ldr	r2, [pc, #224]	; (800153c <HAL_UART_MspInit+0x1c8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d12d      	bne.n	80014bc <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	4b31      	ldr	r3, [pc, #196]	; (800152c <HAL_UART_MspInit+0x1b8>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	4a30      	ldr	r2, [pc, #192]	; (800152c <HAL_UART_MspInit+0x1b8>)
 800146a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146e:	6413      	str	r3, [r2, #64]	; 0x40
 8001470:	4b2e      	ldr	r3, [pc, #184]	; (800152c <HAL_UART_MspInit+0x1b8>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_UART_MspInit+0x1b8>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	4a29      	ldr	r2, [pc, #164]	; (800152c <HAL_UART_MspInit+0x1b8>)
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	6313      	str	r3, [r2, #48]	; 0x30
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_UART_MspInit+0x1b8>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001498:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014aa:	2307      	movs	r3, #7
 80014ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b2:	4619      	mov	r1, r3
 80014b4:	4822      	ldr	r0, [pc, #136]	; (8001540 <HAL_UART_MspInit+0x1cc>)
 80014b6:	f001 fc5d 	bl	8002d74 <HAL_GPIO_Init>
}
 80014ba:	e030      	b.n	800151e <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a20      	ldr	r2, [pc, #128]	; (8001544 <HAL_UART_MspInit+0x1d0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d12b      	bne.n	800151e <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0x1b8>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_UART_MspInit+0x1b8>)
 80014d0:	f043 0320 	orr.w	r3, r3, #32
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_UART_MspInit+0x1b8>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f003 0320 	and.w	r3, r3, #32
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_UART_MspInit+0x1b8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <HAL_UART_MspInit+0x1b8>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_UART_MspInit+0x1b8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014fe:	23c0      	movs	r3, #192	; 0xc0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800150e:	2308      	movs	r3, #8
 8001510:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001516:	4619      	mov	r1, r3
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <HAL_UART_MspInit+0x1d4>)
 800151a:	f001 fc2b 	bl	8002d74 <HAL_GPIO_Init>
}
 800151e:	bf00      	nop
 8001520:	3740      	adds	r7, #64	; 0x40
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40011000 	.word	0x40011000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40004400 	.word	0x40004400
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40004800 	.word	0x40004800
 8001540:	40020400 	.word	0x40020400
 8001544:	40011400 	.word	0x40011400
 8001548:	40020800 	.word	0x40020800

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>

08001552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001598:	f000 f8a4 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <CAN1_RX0_IRQHandler+0x10>)
 80015a6:	f001 f833 	bl	8002610 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200001d4 	.word	0x200001d4

080015b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <OTG_FS_IRQHandler+0x10>)
 80015ba:	f002 fb3c 	bl	8003c36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20001d3c 	.word	0x20001d3c

080015c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001608:	4c0b      	ldr	r4, [pc, #44]	; (8001638 <LoopFillZerobss+0x26>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001616:	f7ff ffd7 	bl	80015c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f009 fabd 	bl	800ab98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161e:	f7ff f83d 	bl	800069c <main>
  bx  lr    
 8001622:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001630:	0800ae8c 	.word	0x0800ae8c
  ldr r2, =_sbss
 8001634:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001638:	20002470 	.word	0x20002470

0800163c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC_IRQHandler>
	...

08001640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <HAL_Init+0x40>)
 800164a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_Init+0x40>)
 8001656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_Init+0x40>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001668:	2003      	movs	r0, #3
 800166a:	f001 fad1 	bl	8002c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166e:	200f      	movs	r0, #15
 8001670:	f000 f808 	bl	8001684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001674:	f7ff fc66 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023c00 	.word	0x40023c00

08001684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_InitTick+0x54>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x58>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	fbb3 f3f1 	udiv	r3, r3, r1
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f001 fae9 	bl	8002c7a <HAL_SYSTICK_Config>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00e      	b.n	80016d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d80a      	bhi.n	80016ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b8:	2200      	movs	r2, #0
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f001 fab1 	bl	8002c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c4:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <HAL_InitTick+0x5c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000004 	.word	0x20000004
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	20000008 	.word	0x20000008

080016e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x20>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_IncTick+0x24>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_IncTick+0x24>)
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	2000000c 	.word	0x2000000c
 8001708:	2000043c 	.word	0x2000043c

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <HAL_GetTick+0x14>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2000043c 	.word	0x2000043c

08001724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800172c:	f7ff ffee 	bl	800170c <HAL_GetTick>
 8001730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d005      	beq.n	800174a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_Delay+0x44>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800174a:	bf00      	nop
 800174c:	f7ff ffde 	bl	800170c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <HAL_Delay+0x28>
  {
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000000c 	.word	0x2000000c

0800176c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e033      	b.n	80017ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fc02 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017b2:	f023 0302 	bic.w	r3, r3, #2
 80017b6:	f043 0202 	orr.w	r2, r3, #2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fad8 	bl	8001d74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f023 0303 	bic.w	r3, r3, #3
 80017d2:	f043 0201 	orr.w	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
 80017da:	e001      	b.n	80017e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_ADC_Start+0x1a>
 800180a:	2302      	movs	r3, #2
 800180c:	e0b2      	b.n	8001974 <HAL_ADC_Start+0x180>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d018      	beq.n	8001856 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001834:	4b52      	ldr	r3, [pc, #328]	; (8001980 <HAL_ADC_Start+0x18c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a52      	ldr	r2, [pc, #328]	; (8001984 <HAL_ADC_Start+0x190>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0c9a      	lsrs	r2, r3, #18
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001848:	e002      	b.n	8001850 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3b01      	subs	r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f9      	bne.n	800184a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d17a      	bne.n	800195a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800188e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a2:	d106      	bne.n	80018b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f023 0206 	bic.w	r2, r3, #6
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c0:	4b31      	ldr	r3, [pc, #196]	; (8001988 <HAL_ADC_Start+0x194>)
 80018c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d12a      	bne.n	8001930 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a2b      	ldr	r2, [pc, #172]	; (800198c <HAL_ADC_Start+0x198>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d015      	beq.n	8001910 <HAL_ADC_Start+0x11c>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a29      	ldr	r2, [pc, #164]	; (8001990 <HAL_ADC_Start+0x19c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d105      	bne.n	80018fa <HAL_ADC_Start+0x106>
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_ADC_Start+0x194>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00a      	beq.n	8001910 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <HAL_ADC_Start+0x1a0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d136      	bne.n	8001972 <HAL_ADC_Start+0x17e>
 8001904:	4b20      	ldr	r3, [pc, #128]	; (8001988 <HAL_ADC_Start+0x194>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	d130      	bne.n	8001972 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d129      	bne.n	8001972 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	e020      	b.n	8001972 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a15      	ldr	r2, [pc, #84]	; (800198c <HAL_ADC_Start+0x198>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d11b      	bne.n	8001972 <HAL_ADC_Start+0x17e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d114      	bne.n	8001972 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	e00b      	b.n	8001972 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f043 0210 	orr.w	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f043 0201 	orr.w	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	20000004 	.word	0x20000004
 8001984:	431bde83 	.word	0x431bde83
 8001988:	40012300 	.word	0x40012300
 800198c:	40012000 	.word	0x40012000
 8001990:	40012100 	.word	0x40012100
 8001994:	40012200 	.word	0x40012200

08001998 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_Stop+0x16>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e021      	b.n	80019f2 <HAL_ADC_Stop+0x5a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d109      	bne.n	80019e8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	f043 0201 	orr.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1a:	d113      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2a:	d10b      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f043 0220 	orr.w	r2, r3, #32
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e063      	b.n	8001b0c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a44:	f7ff fe62 	bl	800170c <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a4a:	e021      	b.n	8001a90 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a52:	d01d      	beq.n	8001a90 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_ADC_PollForConversion+0x6c>
 8001a5a:	f7ff fe57 	bl	800170c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d212      	bcs.n	8001a90 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d00b      	beq.n	8001a90 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f043 0204 	orr.w	r2, r3, #4
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e03d      	b.n	8001b0c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d1d6      	bne.n	8001a4c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f06f 0212 	mvn.w	r2, #18
 8001aa6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d123      	bne.n	8001b0a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d11f      	bne.n	8001b0a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d111      	bne.n	8001b0a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d105      	bne.n	8001b0a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f043 0201 	orr.w	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1c>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e105      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x228>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d925      	bls.n	8001ba8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	2207      	movs	r2, #7
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	400a      	ands	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68d9      	ldr	r1, [r3, #12]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	4603      	mov	r3, r0
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4403      	add	r3, r0
 8001b9a:	3b1e      	subs	r3, #30
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	e022      	b.n	8001bee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	400a      	ands	r2, r1
 8001bca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6919      	ldr	r1, [r3, #16]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4603      	mov	r3, r0
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4403      	add	r3, r0
 8001be4:	409a      	lsls	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d824      	bhi.n	8001c40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b05      	subs	r3, #5
 8001c08:	221f      	movs	r2, #31
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	400a      	ands	r2, r1
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b05      	subs	r3, #5
 8001c32:	fa00 f203 	lsl.w	r2, r0, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3e:	e04c      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d824      	bhi.n	8001c92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	3b23      	subs	r3, #35	; 0x23
 8001c5a:	221f      	movs	r2, #31
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43da      	mvns	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	400a      	ands	r2, r1
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3b23      	subs	r3, #35	; 0x23
 8001c84:	fa00 f203 	lsl.w	r2, r0, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c90:	e023      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b41      	subs	r3, #65	; 0x41
 8001ca4:	221f      	movs	r2, #31
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b41      	subs	r3, #65	; 0x41
 8001cce:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_ADC_ConfigChannel+0x234>)
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <HAL_ADC_ConfigChannel+0x238>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d109      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1cc>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b12      	cmp	r3, #18
 8001cee:	d105      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_ADC_ConfigChannel+0x238>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d123      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x21e>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d003      	beq.n	8001d16 <HAL_ADC_ConfigChannel+0x1e6>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b11      	cmp	r3, #17
 8001d14:	d11b      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d111      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_ADC_ConfigChannel+0x23c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_ADC_ConfigChannel+0x240>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	0c9a      	lsrs	r2, r3, #18
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d40:	e002      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f9      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40012300 	.word	0x40012300
 8001d68:	40012000 	.word	0x40012000
 8001d6c:	20000004 	.word	0x20000004
 8001d70:	431bde83 	.word	0x431bde83

08001d74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7c:	4b79      	ldr	r3, [pc, #484]	; (8001f64 <ADC_Init+0x1f0>)
 8001d7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	021a      	lsls	r2, r3, #8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6899      	ldr	r1, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	4a58      	ldr	r2, [pc, #352]	; (8001f68 <ADC_Init+0x1f4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d022      	beq.n	8001e52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6899      	ldr	r1, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6899      	ldr	r1, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	e00f      	b.n	8001e72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0202 	bic.w	r2, r2, #2
 8001e80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6899      	ldr	r1, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7e1b      	ldrb	r3, [r3, #24]
 8001e8c:	005a      	lsls	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01b      	beq.n	8001ed8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ebe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6859      	ldr	r1, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	035a      	lsls	r2, r3, #13
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	e007      	b.n	8001ee8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	051a      	lsls	r2, r3, #20
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6899      	ldr	r1, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f2a:	025a      	lsls	r2, r3, #9
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	029a      	lsls	r2, r3, #10
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40012300 	.word	0x40012300
 8001f68:	0f000001 	.word	0x0f000001

08001f6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0ed      	b.n	800215a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff f862 	bl	8001054 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa0:	f7ff fbb4 	bl	800170c <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fa6:	e012      	b.n	8001fce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fa8:	f7ff fbb0 	bl	800170c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b0a      	cmp	r3, #10
 8001fb4:	d90b      	bls.n	8001fce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2205      	movs	r2, #5
 8001fc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e0c5      	b.n	800215a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0e5      	beq.n	8001fa8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0202 	bic.w	r2, r2, #2
 8001fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fec:	f7ff fb8e 	bl	800170c <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ff2:	e012      	b.n	800201a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ff4:	f7ff fb8a 	bl	800170c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b0a      	cmp	r3, #10
 8002000:	d90b      	bls.n	800201a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2205      	movs	r2, #5
 8002012:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e09f      	b.n	800215a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e5      	bne.n	8001ff4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7e1b      	ldrb	r3, [r3, #24]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d108      	bne.n	8002042 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e007      	b.n	8002052 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7e5b      	ldrb	r3, [r3, #25]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d108      	bne.n	800206c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e007      	b.n	800207c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800207a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7e9b      	ldrb	r3, [r3, #26]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d108      	bne.n	8002096 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0220 	orr.w	r2, r2, #32
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e007      	b.n	80020a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0220 	bic.w	r2, r2, #32
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7edb      	ldrb	r3, [r3, #27]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d108      	bne.n	80020c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0210 	bic.w	r2, r2, #16
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e007      	b.n	80020d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0210 	orr.w	r2, r2, #16
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7f1b      	ldrb	r3, [r3, #28]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d108      	bne.n	80020ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0208 	orr.w	r2, r2, #8
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e007      	b.n	80020fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0208 	bic.w	r2, r2, #8
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7f5b      	ldrb	r3, [r3, #29]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d108      	bne.n	8002114 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0204 	orr.w	r2, r2, #4
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e007      	b.n	8002124 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0204 	bic.w	r2, r2, #4
 8002122:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	ea42 0103 	orr.w	r1, r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	1e5a      	subs	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d12e      	bne.n	80021d4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2202      	movs	r2, #2
 800217a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800218e:	f7ff fabd 	bl	800170c <HAL_GetTick>
 8002192:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002194:	e012      	b.n	80021bc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002196:	f7ff fab9 	bl	800170c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b0a      	cmp	r3, #10
 80021a2:	d90b      	bls.n	80021bc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2205      	movs	r2, #5
 80021b4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e012      	b.n	80021e2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1e5      	bne.n	8002196 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e006      	b.n	80021e2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
  }
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b089      	sub	sp, #36	; 0x24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002208:	7ffb      	ldrb	r3, [r7, #31]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d003      	beq.n	8002216 <HAL_CAN_AddTxMessage+0x2c>
 800220e:	7ffb      	ldrb	r3, [r7, #31]
 8002210:	2b02      	cmp	r3, #2
 8002212:	f040 80b8 	bne.w	8002386 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10a      	bne.n	8002236 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a0 	beq.w	8002376 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	0e1b      	lsrs	r3, r3, #24
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d907      	bls.n	8002256 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e09e      	b.n	8002394 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002256:	2201      	movs	r2, #1
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10d      	bne.n	8002284 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002272:	68f9      	ldr	r1, [r7, #12]
 8002274:	6809      	ldr	r1, [r1, #0]
 8002276:	431a      	orrs	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3318      	adds	r3, #24
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	440b      	add	r3, r1
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e00f      	b.n	80022a4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800228e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002294:	68f9      	ldr	r1, [r7, #12]
 8002296:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002298:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3318      	adds	r3, #24
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	440b      	add	r3, r1
 80022a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3318      	adds	r3, #24
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	440b      	add	r3, r1
 80022b4:	3304      	adds	r3, #4
 80022b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	7d1b      	ldrb	r3, [r3, #20]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d111      	bne.n	80022e4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3318      	adds	r3, #24
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	4413      	add	r3, r2
 80022cc:	3304      	adds	r3, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	6811      	ldr	r1, [r2, #0]
 80022d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3318      	adds	r3, #24
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	440b      	add	r3, r1
 80022e0:	3304      	adds	r3, #4
 80022e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3307      	adds	r3, #7
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	061a      	lsls	r2, r3, #24
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3306      	adds	r3, #6
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3305      	adds	r3, #5
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	4313      	orrs	r3, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	3204      	adds	r2, #4
 8002304:	7812      	ldrb	r2, [r2, #0]
 8002306:	4610      	mov	r0, r2
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	6811      	ldr	r1, [r2, #0]
 800230c:	ea43 0200 	orr.w	r2, r3, r0
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	440b      	add	r3, r1
 8002316:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800231a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3303      	adds	r3, #3
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	061a      	lsls	r2, r3, #24
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3302      	adds	r3, #2
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3301      	adds	r3, #1
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	4313      	orrs	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	7812      	ldrb	r2, [r2, #0]
 800233c:	4610      	mov	r0, r2
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	6811      	ldr	r1, [r2, #0]
 8002342:	ea43 0200 	orr.w	r2, r3, r0
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	440b      	add	r3, r1
 800234c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002350:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3318      	adds	r3, #24
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	4413      	add	r3, r2
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	6811      	ldr	r1, [r2, #0]
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3318      	adds	r3, #24
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	440b      	add	r3, r1
 8002370:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	e00e      	b.n	8002394 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e006      	b.n	8002394 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
  }
}
 8002394:	4618      	mov	r0, r3
 8002396:	3724      	adds	r7, #36	; 0x24
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d003      	beq.n	80023c4 <HAL_CAN_GetRxMessage+0x24>
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	f040 80f3 	bne.w	80025aa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10e      	bne.n	80023e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d116      	bne.n	8002406 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0e7      	b.n	80025b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d107      	bne.n	8002406 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0d8      	b.n	80025b8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	331b      	adds	r3, #27
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	4413      	add	r3, r2
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0204 	and.w	r2, r3, #4
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10c      	bne.n	800243e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	331b      	adds	r3, #27
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	4413      	add	r3, r2
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	0d5b      	lsrs	r3, r3, #21
 8002434:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	e00b      	b.n	8002456 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	331b      	adds	r3, #27
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	4413      	add	r3, r2
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	08db      	lsrs	r3, r3, #3
 800244e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	331b      	adds	r3, #27
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	4413      	add	r3, r2
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0202 	and.w	r2, r3, #2
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	331b      	adds	r3, #27
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	4413      	add	r3, r2
 8002478:	3304      	adds	r3, #4
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 020f 	and.w	r2, r3, #15
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	331b      	adds	r3, #27
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	b2da      	uxtb	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	331b      	adds	r3, #27
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	4413      	add	r3, r2
 80024a8:	3304      	adds	r3, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	4413      	add	r3, r2
 80024be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	0a1a      	lsrs	r2, r3, #8
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	3301      	adds	r3, #1
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0c1a      	lsrs	r2, r3, #16
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	3302      	adds	r3, #2
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	4413      	add	r3, r2
 8002508:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0e1a      	lsrs	r2, r3, #24
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	3303      	adds	r3, #3
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	4413      	add	r3, r2
 8002522:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	3304      	adds	r3, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	4413      	add	r3, r2
 800253a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0a1a      	lsrs	r2, r3, #8
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	3305      	adds	r3, #5
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4413      	add	r3, r2
 8002554:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	0c1a      	lsrs	r2, r3, #16
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	3306      	adds	r3, #6
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	4413      	add	r3, r2
 800256e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e1a      	lsrs	r2, r3, #24
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	3307      	adds	r3, #7
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0220 	orr.w	r2, r2, #32
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	e007      	b.n	80025a6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0220 	orr.w	r2, r2, #32
 80025a4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e006      	b.n	80025b8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
  }
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d002      	beq.n	80025e2 <HAL_CAN_ActivateNotification+0x1e>
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d109      	bne.n	80025f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6959      	ldr	r1, [r3, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e006      	b.n	8002604 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
  }
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d07c      	beq.n	8002750 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d023      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f983 	bl	800297e <HAL_CAN_TxMailbox0CompleteCallback>
 8002678:	e016      	b.n	80026a8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
 800268c:	e00c      	b.n	80026a8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d004      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
 80026a0:	e002      	b.n	80026a8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f989 	bl	80029ba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d024      	beq.n	80026fc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f963 	bl	8002992 <HAL_CAN_TxMailbox1CompleteCallback>
 80026cc:	e016      	b.n	80026fc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
 80026e0:	e00c      	b.n	80026fc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
 80026f4:	e002      	b.n	80026fc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f969 	bl	80029ce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d024      	beq.n	8002750 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800270e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f943 	bl	80029a6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002720:	e016      	b.n	8002750 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
 8002734:	e00c      	b.n	8002750 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
 8002748:	e002      	b.n	8002750 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f949 	bl	80029e2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00c      	beq.n	8002774 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2210      	movs	r2, #16
 8002772:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2208      	movs	r2, #8
 800278e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f930 	bl	80029f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d009      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe fb86 	bl	8000ec0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00c      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2210      	movs	r2, #16
 80027d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2208      	movs	r2, #8
 80027f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f912 	bl	8002a1e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	2b00      	cmp	r3, #0
 8002802:	d009      	beq.n	8002818 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f8f9 	bl	8002a0a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2210      	movs	r2, #16
 8002832:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f8fc 	bl	8002a32 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d006      	beq.n	800285c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2208      	movs	r2, #8
 8002854:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8f5 	bl	8002a46 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d07b      	beq.n	800295e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d072      	beq.n	8002956 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	f043 0302 	orr.w	r3, r3, #2
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d043      	beq.n	8002956 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d03e      	beq.n	8002956 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028de:	2b60      	cmp	r3, #96	; 0x60
 80028e0:	d02b      	beq.n	800293a <HAL_CAN_IRQHandler+0x32a>
 80028e2:	2b60      	cmp	r3, #96	; 0x60
 80028e4:	d82e      	bhi.n	8002944 <HAL_CAN_IRQHandler+0x334>
 80028e6:	2b50      	cmp	r3, #80	; 0x50
 80028e8:	d022      	beq.n	8002930 <HAL_CAN_IRQHandler+0x320>
 80028ea:	2b50      	cmp	r3, #80	; 0x50
 80028ec:	d82a      	bhi.n	8002944 <HAL_CAN_IRQHandler+0x334>
 80028ee:	2b40      	cmp	r3, #64	; 0x40
 80028f0:	d019      	beq.n	8002926 <HAL_CAN_IRQHandler+0x316>
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d826      	bhi.n	8002944 <HAL_CAN_IRQHandler+0x334>
 80028f6:	2b30      	cmp	r3, #48	; 0x30
 80028f8:	d010      	beq.n	800291c <HAL_CAN_IRQHandler+0x30c>
 80028fa:	2b30      	cmp	r3, #48	; 0x30
 80028fc:	d822      	bhi.n	8002944 <HAL_CAN_IRQHandler+0x334>
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d002      	beq.n	8002908 <HAL_CAN_IRQHandler+0x2f8>
 8002902:	2b20      	cmp	r3, #32
 8002904:	d005      	beq.n	8002912 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002906:	e01d      	b.n	8002944 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	f043 0308 	orr.w	r3, r3, #8
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002910:	e019      	b.n	8002946 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	f043 0310 	orr.w	r3, r3, #16
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800291a:	e014      	b.n	8002946 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	f043 0320 	orr.w	r3, r3, #32
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002924:	e00f      	b.n	8002946 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800292e:	e00a      	b.n	8002946 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002938:	e005      	b.n	8002946 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002942:	e000      	b.n	8002946 <HAL_CAN_IRQHandler+0x336>
            break;
 8002944:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699a      	ldr	r2, [r3, #24]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002954:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2204      	movs	r2, #4
 800295c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f872 	bl	8002a5a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002976:	bf00      	nop
 8002978:	3728      	adds	r7, #40	; 0x28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	60d3      	str	r3, [r2, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	f003 0307 	and.w	r3, r3, #7
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db0b      	blt.n	8002afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4907      	ldr	r1, [pc, #28]	; (8002b0c <__NVIC_EnableIRQ+0x38>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2001      	movs	r0, #1
 8002af6:	fa00 f202 	lsl.w	r2, r0, r2
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bdc:	d301      	bcc.n	8002be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00f      	b.n	8002c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <SysTick_Config+0x40>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bea:	210f      	movs	r1, #15
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f7ff ff8e 	bl	8002b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <SysTick_Config+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <SysTick_Config+0x40>)
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000e010 	.word	0xe000e010

08002c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff29 	bl	8002a70 <__NVIC_SetPriorityGrouping>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c38:	f7ff ff3e 	bl	8002ab8 <__NVIC_GetPriorityGrouping>
 8002c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff8e 	bl	8002b64 <NVIC_EncodePriority>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff5d 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff31 	bl	8002ad4 <__NVIC_EnableIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ffa2 	bl	8002bcc <SysTick_Config>
 8002c88:	4603      	mov	r3, r0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e014      	b.n	8002cce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	791b      	ldrb	r3, [r3, #4]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fe fa75 	bl	80011a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b087      	sub	sp, #28
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	795b      	ldrb	r3, [r3, #5]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_DAC_ConfigChannel+0x18>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e03c      	b.n	8002d68 <HAL_DAC_ConfigChannel+0x92>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4013      	ands	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6819      	ldr	r1, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	22c0      	movs	r2, #192	; 0xc0
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43da      	mvns	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	400a      	ands	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e16b      	b.n	8003068 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f040 815a 	bne.w	8003062 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d005      	beq.n	8002dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d130      	bne.n	8002e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 0201 	and.w	r2, r3, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d017      	beq.n	8002e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80b4 	beq.w	8003062 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b60      	ldr	r3, [pc, #384]	; (8003080 <HAL_GPIO_Init+0x30c>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4a5f      	ldr	r2, [pc, #380]	; (8003080 <HAL_GPIO_Init+0x30c>)
 8002f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f08:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0a:	4b5d      	ldr	r3, [pc, #372]	; (8003080 <HAL_GPIO_Init+0x30c>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f16:	4a5b      	ldr	r2, [pc, #364]	; (8003084 <HAL_GPIO_Init+0x310>)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	; (8003088 <HAL_GPIO_Init+0x314>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02b      	beq.n	8002f9a <HAL_GPIO_Init+0x226>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a51      	ldr	r2, [pc, #324]	; (800308c <HAL_GPIO_Init+0x318>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d025      	beq.n	8002f96 <HAL_GPIO_Init+0x222>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <HAL_GPIO_Init+0x31c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01f      	beq.n	8002f92 <HAL_GPIO_Init+0x21e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4f      	ldr	r2, [pc, #316]	; (8003094 <HAL_GPIO_Init+0x320>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d019      	beq.n	8002f8e <HAL_GPIO_Init+0x21a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4e      	ldr	r2, [pc, #312]	; (8003098 <HAL_GPIO_Init+0x324>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_GPIO_Init+0x216>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4d      	ldr	r2, [pc, #308]	; (800309c <HAL_GPIO_Init+0x328>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00d      	beq.n	8002f86 <HAL_GPIO_Init+0x212>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4c      	ldr	r2, [pc, #304]	; (80030a0 <HAL_GPIO_Init+0x32c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_GPIO_Init+0x20e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4b      	ldr	r2, [pc, #300]	; (80030a4 <HAL_GPIO_Init+0x330>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_GPIO_Init+0x20a>
 8002f7a:	2307      	movs	r3, #7
 8002f7c:	e00e      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f7e:	2308      	movs	r3, #8
 8002f80:	e00c      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f82:	2306      	movs	r3, #6
 8002f84:	e00a      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f86:	2305      	movs	r3, #5
 8002f88:	e008      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e004      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_GPIO_Init+0x228>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	f002 0203 	and.w	r2, r2, #3
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	4093      	lsls	r3, r2
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fac:	4935      	ldr	r1, [pc, #212]	; (8003084 <HAL_GPIO_Init+0x310>)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fba:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fde:	4a32      	ldr	r2, [pc, #200]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe4:	4b30      	ldr	r3, [pc, #192]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003008:	4a27      	ldr	r2, [pc, #156]	; (80030a8 <HAL_GPIO_Init+0x334>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003032:	4a1d      	ldr	r2, [pc, #116]	; (80030a8 <HAL_GPIO_Init+0x334>)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003038:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <HAL_GPIO_Init+0x334>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800305c:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <HAL_GPIO_Init+0x334>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3301      	adds	r3, #1
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b0f      	cmp	r3, #15
 800306c:	f67f ae90 	bls.w	8002d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40013800 	.word	0x40013800
 8003088:	40020000 	.word	0x40020000
 800308c:	40020400 	.word	0x40020400
 8003090:	40020800 	.word	0x40020800
 8003094:	40020c00 	.word	0x40020c00
 8003098:	40021000 	.word	0x40021000
 800309c:	40021400 	.word	0x40021400
 80030a0:	40021800 	.word	0x40021800
 80030a4:	40021c00 	.word	0x40021c00
 80030a8:	40013c00 	.word	0x40013c00

080030ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	807b      	strh	r3, [r7, #2]
 80030b8:	4613      	mov	r3, r2
 80030ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030bc:	787b      	ldrb	r3, [r7, #1]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030c8:	e003      	b.n	80030d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	041a      	lsls	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	619a      	str	r2, [r3, #24]
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e12b      	b.n	800334a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe f890 	bl	800122c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003132:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003142:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003144:	f002 fb14 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 8003148:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4a81      	ldr	r2, [pc, #516]	; (8003354 <HAL_I2C_Init+0x274>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d807      	bhi.n	8003164 <HAL_I2C_Init+0x84>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a80      	ldr	r2, [pc, #512]	; (8003358 <HAL_I2C_Init+0x278>)
 8003158:	4293      	cmp	r3, r2
 800315a:	bf94      	ite	ls
 800315c:	2301      	movls	r3, #1
 800315e:	2300      	movhi	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e006      	b.n	8003172 <HAL_I2C_Init+0x92>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4a7d      	ldr	r2, [pc, #500]	; (800335c <HAL_I2C_Init+0x27c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	bf94      	ite	ls
 800316c:	2301      	movls	r3, #1
 800316e:	2300      	movhi	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e0e7      	b.n	800334a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a78      	ldr	r2, [pc, #480]	; (8003360 <HAL_I2C_Init+0x280>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0c9b      	lsrs	r3, r3, #18
 8003184:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4a6a      	ldr	r2, [pc, #424]	; (8003354 <HAL_I2C_Init+0x274>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d802      	bhi.n	80031b4 <HAL_I2C_Init+0xd4>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3301      	adds	r3, #1
 80031b2:	e009      	b.n	80031c8 <HAL_I2C_Init+0xe8>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	4a69      	ldr	r2, [pc, #420]	; (8003364 <HAL_I2C_Init+0x284>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	3301      	adds	r3, #1
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	495c      	ldr	r1, [pc, #368]	; (8003354 <HAL_I2C_Init+0x274>)
 80031e4:	428b      	cmp	r3, r1
 80031e6:	d819      	bhi.n	800321c <HAL_I2C_Init+0x13c>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e59      	subs	r1, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f6:	1c59      	adds	r1, r3, #1
 80031f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031fc:	400b      	ands	r3, r1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_I2C_Init+0x138>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1e59      	subs	r1, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003210:	3301      	adds	r3, #1
 8003212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003216:	e051      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 8003218:	2304      	movs	r3, #4
 800321a:	e04f      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d111      	bne.n	8003248 <HAL_I2C_Init+0x168>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e58      	subs	r0, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	440b      	add	r3, r1
 8003232:	fbb0 f3f3 	udiv	r3, r0, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e012      	b.n	800326e <HAL_I2C_Init+0x18e>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	0099      	lsls	r1, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	fbb0 f3f3 	udiv	r3, r0, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Init+0x196>
 8003272:	2301      	movs	r3, #1
 8003274:	e022      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10e      	bne.n	800329c <HAL_I2C_Init+0x1bc>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1e58      	subs	r0, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6859      	ldr	r1, [r3, #4]
 8003286:	460b      	mov	r3, r1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	440b      	add	r3, r1
 800328c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003290:	3301      	adds	r3, #1
 8003292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329a:	e00f      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1e58      	subs	r0, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	0099      	lsls	r1, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	6809      	ldr	r1, [r1, #0]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6911      	ldr	r1, [r2, #16]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68d2      	ldr	r2, [r2, #12]
 80032f6:	4311      	orrs	r1, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	000186a0 	.word	0x000186a0
 8003358:	001e847f 	.word	0x001e847f
 800335c:	003d08ff 	.word	0x003d08ff
 8003360:	431bde83 	.word	0x431bde83
 8003364:	10624dd3 	.word	0x10624dd3

08003368 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	461a      	mov	r2, r3
 8003376:	4603      	mov	r3, r0
 8003378:	817b      	strh	r3, [r7, #10]
 800337a:	460b      	mov	r3, r1
 800337c:	813b      	strh	r3, [r7, #8]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003382:	f7fe f9c3 	bl	800170c <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b20      	cmp	r3, #32
 8003392:	f040 80d9 	bne.w	8003548 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	2319      	movs	r3, #25
 800339c:	2201      	movs	r2, #1
 800339e:	496d      	ldr	r1, [pc, #436]	; (8003554 <HAL_I2C_Mem_Write+0x1ec>)
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f971 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
 80033ae:	e0cc      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_I2C_Mem_Write+0x56>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0c5      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d007      	beq.n	80033e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2221      	movs	r2, #33	; 0x21
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2240      	movs	r2, #64	; 0x40
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a3a      	ldr	r2, [r7, #32]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a4d      	ldr	r2, [pc, #308]	; (8003558 <HAL_I2C_Mem_Write+0x1f0>)
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003426:	88f8      	ldrh	r0, [r7, #6]
 8003428:	893a      	ldrh	r2, [r7, #8]
 800342a:	8979      	ldrh	r1, [r7, #10]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4603      	mov	r3, r0
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f890 	bl	800355c <I2C_RequestMemoryWrite>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d052      	beq.n	80034e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e081      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f9f2 	bl	8003834 <I2C_WaitOnTXEFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b04      	cmp	r3, #4
 800345c:	d107      	bne.n	800346e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06b      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d11b      	bne.n	80034e8 <HAL_I2C_Mem_Write+0x180>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d017      	beq.n	80034e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1aa      	bne.n	8003446 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f9de 	bl	80038b6 <I2C_WaitOnBTFFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	2b04      	cmp	r3, #4
 8003506:	d107      	bne.n	8003518 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e016      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	00100002 	.word	0x00100002
 8003558:	ffff0000 	.word	0xffff0000

0800355c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	4608      	mov	r0, r1
 8003566:	4611      	mov	r1, r2
 8003568:	461a      	mov	r2, r3
 800356a:	4603      	mov	r3, r0
 800356c:	817b      	strh	r3, [r7, #10]
 800356e:	460b      	mov	r3, r1
 8003570:	813b      	strh	r3, [r7, #8]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	2200      	movs	r2, #0
 800358e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f878 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ac:	d103      	bne.n	80035b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e05f      	b.n	800367a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	6a3a      	ldr	r2, [r7, #32]
 80035ce:	492d      	ldr	r1, [pc, #180]	; (8003684 <I2C_RequestMemoryWrite+0x128>)
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f8b0 	bl	8003736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e04c      	b.n	800367a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	6a39      	ldr	r1, [r7, #32]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f91a 	bl	8003834 <I2C_WaitOnTXEFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2b04      	cmp	r3, #4
 800360c:	d107      	bne.n	800361e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e02b      	b.n	800367a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d105      	bne.n	8003634 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003628:	893b      	ldrh	r3, [r7, #8]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	611a      	str	r2, [r3, #16]
 8003632:	e021      	b.n	8003678 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003634:	893b      	ldrh	r3, [r7, #8]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	b29b      	uxth	r3, r3
 800363a:	b2da      	uxtb	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003644:	6a39      	ldr	r1, [r7, #32]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f8f4 	bl	8003834 <I2C_WaitOnTXEFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	2b04      	cmp	r3, #4
 8003658:	d107      	bne.n	800366a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003668:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e005      	b.n	800367a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800366e:	893b      	ldrh	r3, [r7, #8]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	00010002 	.word	0x00010002

08003688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003698:	e025      	b.n	80036e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d021      	beq.n	80036e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7fe f833 	bl	800170c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d116      	bne.n	80036e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e023      	b.n	800372e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10d      	bne.n	800370c <I2C_WaitOnFlagUntilTimeout+0x84>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
 800370a:	e00c      	b.n	8003726 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	429a      	cmp	r2, r3
 800372a:	d0b6      	beq.n	800369a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003744:	e051      	b.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003754:	d123      	bne.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800376e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0204 	orr.w	r2, r3, #4
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e046      	b.n	800382c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d021      	beq.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7fd ffb1 	bl	800170c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d116      	bne.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e020      	b.n	800382c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d10c      	bne.n	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	43da      	mvns	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	bf14      	ite	ne
 8003806:	2301      	movne	r3, #1
 8003808:	2300      	moveq	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	e00b      	b.n	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	43da      	mvns	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	4013      	ands	r3, r2
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d18d      	bne.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003840:	e02d      	b.n	800389e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f878 	bl	8003938 <I2C_IsAcknowledgeFailed>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e02d      	b.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d021      	beq.n	800389e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385a:	f7fd ff57 	bl	800170c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d116      	bne.n	800389e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e007      	b.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d1ca      	bne.n	8003842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c2:	e02d      	b.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f837 	bl	8003938 <I2C_IsAcknowledgeFailed>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e02d      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d021      	beq.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038dc:	f7fd ff16 	bl	800170c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d302      	bcc.n	80038f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d116      	bne.n	8003920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e007      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d1ca      	bne.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394e:	d11b      	bne.n	8003988 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003958:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	f043 0204 	orr.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003998:	b08f      	sub	sp, #60	; 0x3c
 800399a:	af0a      	add	r7, sp, #40	; 0x28
 800399c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e10f      	b.n	8003bc8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f006 fdd4 	bl	800a570 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2203      	movs	r2, #3
 80039cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 fe9f 	bl	800672a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	687e      	ldr	r6, [r7, #4]
 80039f4:	466d      	mov	r5, sp
 80039f6:	f106 0410 	add.w	r4, r6, #16
 80039fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a06:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a0a:	1d33      	adds	r3, r6, #4
 8003a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a0e:	6838      	ldr	r0, [r7, #0]
 8003a10:	f002 fd76 	bl	8006500 <USB_CoreInit>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0d0      	b.n	8003bc8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f002 fe8d 	bl	800674c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e04a      	b.n	8003ace <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	333d      	adds	r3, #61	; 0x3d
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	333c      	adds	r3, #60	; 0x3c
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	b298      	uxth	r0, r3
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3344      	adds	r3, #68	; 0x44
 8003a74:	4602      	mov	r2, r0
 8003a76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3340      	adds	r3, #64	; 0x40
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a8c:	7bfa      	ldrb	r2, [r7, #15]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3348      	adds	r3, #72	; 0x48
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	334c      	adds	r3, #76	; 0x4c
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	3354      	adds	r3, #84	; 0x54
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	3301      	adds	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	7bfa      	ldrb	r2, [r7, #15]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d3af      	bcc.n	8003a38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	e044      	b.n	8003b68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ade:	7bfa      	ldrb	r2, [r7, #15]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	3301      	adds	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d3b5      	bcc.n	8003ade <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	687e      	ldr	r6, [r7, #4]
 8003b7a:	466d      	mov	r5, sp
 8003b7c:	f106 0410 	add.w	r4, r6, #16
 8003b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b90:	1d33      	adds	r3, r6, #4
 8003b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b94:	6838      	ldr	r0, [r7, #0]
 8003b96:	f002 fe25 	bl	80067e4 <USB_DevInit>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e00d      	b.n	8003bc8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f003 ff74 	bl	8007aae <USB_DevDisconnect>

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_PCD_Start+0x1c>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e020      	b.n	8003c2e <HAL_PCD_Start+0x5e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d109      	bne.n	8003c10 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d005      	beq.n	8003c10 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f002 fd77 	bl	8006708 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f003 ff24 	bl	8007a6c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c36:	b590      	push	{r4, r7, lr}
 8003c38:	b08d      	sub	sp, #52	; 0x34
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f003 ffe2 	bl	8007c16 <USB_GetMode>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 848a 	bne.w	800456e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f003 ff46 	bl	8007af0 <USB_ReadInterrupts>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 8480 	beq.w	800456c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f003 ff33 	bl	8007af0 <USB_ReadInterrupts>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d107      	bne.n	8003ca4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f002 0202 	and.w	r2, r2, #2
 8003ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f003 ff21 	bl	8007af0 <USB_ReadInterrupts>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d161      	bne.n	8003d7c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0210 	bic.w	r2, r2, #16
 8003cc6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	f003 020f 	and.w	r2, r3, #15
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	0c5b      	lsrs	r3, r3, #17
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d124      	bne.n	8003d3e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d035      	beq.n	8003d6c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	6a38      	ldr	r0, [r7, #32]
 8003d14:	f003 fd58 	bl	80077c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d24:	441a      	add	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d36:	441a      	add	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	621a      	str	r2, [r3, #32]
 8003d3c:	e016      	b.n	8003d6c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	0c5b      	lsrs	r3, r3, #17
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d110      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d50:	2208      	movs	r2, #8
 8003d52:	4619      	mov	r1, r3
 8003d54:	6a38      	ldr	r0, [r7, #32]
 8003d56:	f003 fd37 	bl	80077c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	6a1a      	ldr	r2, [r3, #32]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d66:	441a      	add	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0210 	orr.w	r2, r2, #16
 8003d7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f003 feb5 	bl	8007af0 <USB_ReadInterrupts>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d90:	f040 80a7 	bne.w	8003ee2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f003 feba 	bl	8007b16 <USB_ReadDevAllOutEpInterrupt>
 8003da2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003da4:	e099      	b.n	8003eda <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 808e 	beq.w	8003ece <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f003 fede 	bl	8007b7e <USB_ReadDevOutEPInterrupt>
 8003dc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2301      	movs	r3, #1
 8003dde:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fec2 	bl	8004b6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2308      	movs	r3, #8
 8003e02:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 ff98 	bl	8004d3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e22:	461a      	mov	r2, r3
 8003e24:	2310      	movs	r3, #16
 8003e26:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d030      	beq.n	8003e94 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3a:	2b80      	cmp	r3, #128	; 0x80
 8003e3c:	d109      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e50:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	3304      	adds	r3, #4
 8003e66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	78db      	ldrb	r3, [r3, #3]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d108      	bne.n	8003e82 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2200      	movs	r2, #0
 8003e74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f006 fc7d 	bl	800a77c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2302      	movs	r3, #2
 8003e92:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2320      	movs	r3, #32
 8003eae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ecc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f47f af62 	bne.w	8003da6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f003 fe02 	bl	8007af0 <USB_ReadInterrupts>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ef6:	f040 80db 	bne.w	80040b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f003 fe23 	bl	8007b4a <USB_ReadDevAllInEpInterrupt>
 8003f04:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f0a:	e0cd      	b.n	80040a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80c2 	beq.w	800409c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f003 fe49 	bl	8007bba <USB_ReadDevInEPInterrupt>
 8003f28:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d057      	beq.n	8003fe4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69f9      	ldr	r1, [r7, #28]
 8003f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f54:	4013      	ands	r3, r2
 8003f56:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f64:	461a      	mov	r2, r3
 8003f66:	2301      	movs	r3, #1
 8003f68:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d132      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f76:	4613      	mov	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	334c      	adds	r3, #76	; 0x4c
 8003f82:	6819      	ldr	r1, [r3, #0]
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4403      	add	r3, r0
 8003f92:	3348      	adds	r3, #72	; 0x48
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4419      	add	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4403      	add	r3, r0
 8003fa6:	334c      	adds	r3, #76	; 0x4c
 8003fa8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d113      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x3a2>
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3354      	adds	r3, #84	; 0x54
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d108      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	f003 fe50 	bl	8007c78 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f006 fb47 	bl	800a672 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004016:	461a      	mov	r2, r3
 8004018:	2310      	movs	r3, #16
 800401a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	461a      	mov	r2, r3
 8004034:	2340      	movs	r3, #64	; 0x40
 8004036:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d023      	beq.n	800408a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004044:	6a38      	ldr	r0, [r7, #32]
 8004046:	f002 fd31 	bl	8006aac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	3338      	adds	r3, #56	; 0x38
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	3304      	adds	r3, #4
 800405c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	78db      	ldrb	r3, [r3, #3]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d108      	bne.n	8004078 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	b2db      	uxtb	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f006 fb94 	bl	800a7a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004084:	461a      	mov	r2, r3
 8004086:	2302      	movs	r3, #2
 8004088:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fcdb 	bl	8004a52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	3301      	adds	r3, #1
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f47f af2e 	bne.w	8003f0c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f003 fd1b 	bl	8007af0 <USB_ReadInterrupts>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040c4:	d122      	bne.n	800410c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d108      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040ec:	2100      	movs	r1, #0
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fec2 	bl	8004e78 <HAL_PCDEx_LPM_Callback>
 80040f4:	e002      	b.n	80040fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f006 fb32 	bl	800a760 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800410a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f003 fced 	bl	8007af0 <USB_ReadInterrupts>
 8004116:	4603      	mov	r3, r0
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004120:	d112      	bne.n	8004148 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d102      	bne.n	8004138 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f006 faee 	bl	800a714 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004146:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f003 fccf 	bl	8007af0 <USB_ReadInterrupts>
 8004152:	4603      	mov	r3, r0
 8004154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415c:	f040 80b7 	bne.w	80042ce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2110      	movs	r1, #16
 800417a:	4618      	mov	r0, r3
 800417c:	f002 fc96 	bl	8006aac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004180:	2300      	movs	r3, #0
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004184:	e046      	b.n	8004214 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004192:	461a      	mov	r2, r3
 8004194:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004198:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	461a      	mov	r2, r3
 80041c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fe:	0151      	lsls	r1, r2, #5
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	440a      	add	r2, r1
 8004204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800420c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	3301      	adds	r3, #1
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421a:	429a      	cmp	r2, r3
 800421c:	d3b3      	bcc.n	8004186 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004230:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	2b00      	cmp	r3, #0
 8004238:	d016      	beq.n	8004268 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800424a:	f043 030b 	orr.w	r3, r3, #11
 800424e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004260:	f043 030b 	orr.w	r3, r3, #11
 8004264:	6453      	str	r3, [r2, #68]	; 0x44
 8004266:	e015      	b.n	8004294 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004276:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800427a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800427e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428e:	f043 030b 	orr.w	r3, r3, #11
 8004292:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042b8:	461a      	mov	r2, r3
 80042ba:	f003 fcdd 	bl	8007c78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f003 fc0c 	bl	8007af0 <USB_ReadInterrupts>
 80042d8:	4603      	mov	r3, r0
 80042da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e2:	d124      	bne.n	800432e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 fca2 	bl	8007c32 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f002 fc57 	bl	8006ba6 <USB_GetDevSpeed>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681c      	ldr	r4, [r3, #0]
 8004304:	f001 fa28 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 8004308:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	4620      	mov	r0, r4
 8004314:	f002 f956 	bl	80065c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f006 f9d2 	bl	800a6c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800432c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f003 fbdc 	bl	8007af0 <USB_ReadInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b08      	cmp	r3, #8
 8004340:	d10a      	bne.n	8004358 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f006 f9af 	bl	800a6a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f002 0208 	and.w	r2, r2, #8
 8004356:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f003 fbc7 	bl	8007af0 <USB_ReadInterrupts>
 8004362:	4603      	mov	r3, r0
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d122      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004378:	2301      	movs	r3, #1
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
 800437c:	e014      	b.n	80043a8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	b2db      	uxtb	r3, r3
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fb27 	bl	80049f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	3301      	adds	r3, #1
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d3e5      	bcc.n	800437e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f003 fb9a 	bl	8007af0 <USB_ReadInterrupts>
 80043bc:	4603      	mov	r3, r0
 80043be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c6:	d13b      	bne.n	8004440 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043c8:	2301      	movs	r3, #1
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e02b      	b.n	8004426 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	3340      	adds	r3, #64	; 0x40
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d115      	bne.n	8004420 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da12      	bge.n	8004420 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	333f      	adds	r3, #63	; 0x3f
 800440a:	2201      	movs	r2, #1
 800440c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fae8 	bl	80049f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	3301      	adds	r3, #1
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	429a      	cmp	r2, r3
 800442e:	d3ce      	bcc.n	80043ce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800443e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f003 fb53 	bl	8007af0 <USB_ReadInterrupts>
 800444a:	4603      	mov	r3, r0
 800444c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004454:	d155      	bne.n	8004502 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004456:	2301      	movs	r3, #1
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
 800445a:	e045      	b.n	80044e8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d12e      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004484:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	da2b      	bge.n	80044e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004496:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800449a:	429a      	cmp	r2, r3
 800449c:	d121      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044b0:	2201      	movs	r2, #1
 80044b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044de:	6053      	str	r3, [r2, #4]
            break;
 80044e0:	e007      	b.n	80044f2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	3301      	adds	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d3b4      	bcc.n	800445c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695a      	ldr	r2, [r3, #20]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f003 faf2 	bl	8007af0 <USB_ReadInterrupts>
 800450c:	4603      	mov	r3, r0
 800450e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004516:	d10a      	bne.n	800452e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f006 f953 	bl	800a7c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800452c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f003 fadc 	bl	8007af0 <USB_ReadInterrupts>
 8004538:	4603      	mov	r3, r0
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d115      	bne.n	800456e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f006 f943 	bl	800a7e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	e000      	b.n	800456e <HAL_PCD_IRQHandler+0x938>
      return;
 800456c:	bf00      	nop
    }
  }
}
 800456e:	3734      	adds	r7, #52	; 0x34
 8004570:	46bd      	mov	sp, r7
 8004572:	bd90      	pop	{r4, r7, pc}

08004574 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_PCD_SetAddress+0x1a>
 800458a:	2302      	movs	r3, #2
 800458c:	e013      	b.n	80045b6 <HAL_PCD_SetAddress+0x42>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f003 fa3a 	bl	8007a20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	4608      	mov	r0, r1
 80045c8:	4611      	mov	r1, r2
 80045ca:	461a      	mov	r2, r3
 80045cc:	4603      	mov	r3, r0
 80045ce:	70fb      	strb	r3, [r7, #3]
 80045d0:	460b      	mov	r3, r1
 80045d2:	803b      	strh	r3, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	da0f      	bge.n	8004604 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	3338      	adds	r3, #56	; 0x38
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	3304      	adds	r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	705a      	strb	r2, [r3, #1]
 8004602:	e00f      	b.n	8004624 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 020f 	and.w	r2, r3, #15
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	3304      	adds	r3, #4
 800461c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004630:	883a      	ldrh	r2, [r7, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	78ba      	ldrb	r2, [r7, #2]
 800463a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800464e:	78bb      	ldrb	r3, [r7, #2]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d102      	bne.n	800465a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_PCD_EP_Open+0xaa>
 8004664:	2302      	movs	r3, #2
 8004666:	e00e      	b.n	8004686 <HAL_PCD_EP_Open+0xc8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68f9      	ldr	r1, [r7, #12]
 8004676:	4618      	mov	r0, r3
 8004678:	f002 faba 	bl	8006bf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004684:	7afb      	ldrb	r3, [r7, #11]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800469a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da0f      	bge.n	80046c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 020f 	and.w	r2, r3, #15
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	3338      	adds	r3, #56	; 0x38
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	3304      	adds	r3, #4
 80046b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	705a      	strb	r2, [r3, #1]
 80046c0:	e00f      	b.n	80046e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	f003 020f 	and.w	r2, r3, #15
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	4413      	add	r3, r2
 80046d8:	3304      	adds	r3, #4
 80046da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_PCD_EP_Close+0x6e>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e00e      	b.n	800471a <HAL_PCD_EP_Close+0x8c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	4618      	mov	r0, r3
 800470c:	f002 faf8 	bl	8006d00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b086      	sub	sp, #24
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	460b      	mov	r3, r1
 8004730:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004732:	7afb      	ldrb	r3, [r7, #11]
 8004734:	f003 020f 	and.w	r2, r3, #15
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	3304      	adds	r3, #4
 800474a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2200      	movs	r2, #0
 800475c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2200      	movs	r2, #0
 8004762:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004764:	7afb      	ldrb	r3, [r7, #11]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	b2da      	uxtb	r2, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d102      	bne.n	800477e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800477e:	7afb      	ldrb	r3, [r7, #11]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	2b00      	cmp	r3, #0
 8004786:	d109      	bne.n	800479c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	6979      	ldr	r1, [r7, #20]
 8004796:	f002 fdd7 	bl	8007348 <USB_EP0StartXfer>
 800479a:	e008      	b.n	80047ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	6979      	ldr	r1, [r7, #20]
 80047aa:	f002 fb85 	bl	8006eb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	460b      	mov	r3, r1
 80047f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f8:	7afb      	ldrb	r3, [r7, #11]
 80047fa:	f003 020f 	and.w	r2, r3, #15
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	3338      	adds	r3, #56	; 0x38
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	3304      	adds	r3, #4
 800480e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2200      	movs	r2, #0
 8004820:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2201      	movs	r2, #1
 8004826:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004828:	7afb      	ldrb	r3, [r7, #11]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	b2da      	uxtb	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d102      	bne.n	8004842 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004842:	7afb      	ldrb	r3, [r7, #11]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2b00      	cmp	r3, #0
 800484a:	d109      	bne.n	8004860 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	6979      	ldr	r1, [r7, #20]
 800485a:	f002 fd75 	bl	8007348 <USB_EP0StartXfer>
 800485e:	e008      	b.n	8004872 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	6979      	ldr	r1, [r7, #20]
 800486e:	f002 fb23 	bl	8006eb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	f003 020f 	and.w	r2, r3, #15
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d901      	bls.n	800489a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e050      	b.n	800493c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800489a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	da0f      	bge.n	80048c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	f003 020f 	and.w	r2, r3, #15
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	3338      	adds	r3, #56	; 0x38
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	3304      	adds	r3, #4
 80048b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	705a      	strb	r2, [r3, #1]
 80048c0:	e00d      	b.n	80048de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	3304      	adds	r3, #4
 80048d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_PCD_EP_SetStall+0x82>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e01e      	b.n	800493c <HAL_PCD_EP_SetStall+0xc0>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	4618      	mov	r0, r3
 800490e:	f002 ffb3 	bl	8007878 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	b2d9      	uxtb	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800492c:	461a      	mov	r2, r3
 800492e:	f003 f9a3 	bl	8007c78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	f003 020f 	and.w	r2, r3, #15
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	429a      	cmp	r2, r3
 800495c:	d901      	bls.n	8004962 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e042      	b.n	80049e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004966:	2b00      	cmp	r3, #0
 8004968:	da0f      	bge.n	800498a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	f003 020f 	and.w	r2, r3, #15
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	3338      	adds	r3, #56	; 0x38
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	3304      	adds	r3, #4
 8004980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	705a      	strb	r2, [r3, #1]
 8004988:	e00f      	b.n	80049aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	f003 020f 	and.w	r2, r3, #15
 8004990:	4613      	mov	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	4413      	add	r3, r2
 80049a0:	3304      	adds	r3, #4
 80049a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_PCD_EP_ClrStall+0x86>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e00e      	b.n	80049e8 <HAL_PCD_EP_ClrStall+0xa4>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68f9      	ldr	r1, [r7, #12]
 80049d8:	4618      	mov	r0, r3
 80049da:	f002 ffbb 	bl	8007954 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da0c      	bge.n	8004a1e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	f003 020f 	and.w	r2, r3, #15
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	3338      	adds	r3, #56	; 0x38
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	3304      	adds	r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e00c      	b.n	8004a38 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4413      	add	r3, r2
 8004a34:	3304      	adds	r3, #4
 8004a36:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f002 fdda 	bl	80075f8 <USB_EPStopXfer>
 8004a44:	4603      	mov	r3, r0
 8004a46:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a48:	7afb      	ldrb	r3, [r7, #11]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b08a      	sub	sp, #40	; 0x28
 8004a56:	af02      	add	r7, sp, #8
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	3338      	adds	r3, #56	; 0x38
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	3304      	adds	r3, #4
 8004a78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1a      	ldr	r2, [r3, #32]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d901      	bls.n	8004a8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e06c      	b.n	8004b64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d902      	bls.n	8004aa6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3303      	adds	r3, #3
 8004aaa:	089b      	lsrs	r3, r3, #2
 8004aac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aae:	e02b      	b.n	8004b08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d902      	bls.n	8004acc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	3303      	adds	r3, #3
 8004ad0:	089b      	lsrs	r3, r3, #2
 8004ad2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6919      	ldr	r1, [r3, #16]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4603      	mov	r3, r0
 8004aea:	6978      	ldr	r0, [r7, #20]
 8004aec:	f002 fe2e 	bl	800774c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	441a      	add	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	441a      	add	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d809      	bhi.n	8004b32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1a      	ldr	r2, [r3, #32]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d203      	bcs.n	8004b32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1be      	bne.n	8004ab0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d811      	bhi.n	8004b62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	2201      	movs	r2, #1
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	6939      	ldr	r1, [r7, #16]
 8004b5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b5e:	4013      	ands	r3, r2
 8004b60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	333c      	adds	r3, #60	; 0x3c
 8004b84:	3304      	adds	r3, #4
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d17b      	bne.n	8004c9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4a61      	ldr	r2, [pc, #388]	; (8004d34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	f240 80b9 	bls.w	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80b3 	beq.w	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd4:	6093      	str	r3, [r2, #8]
 8004bd6:	e0a7      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	6093      	str	r3, [r2, #8]
 8004bf4:	e098      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f040 8093 	bne.w	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	4a4b      	ldr	r2, [pc, #300]	; (8004d34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d90f      	bls.n	8004c2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	461a      	mov	r2, r3
 8004c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c26:	6093      	str	r3, [r2, #8]
 8004c28:	e07e      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	0159      	lsls	r1, r3, #5
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	440b      	add	r3, r1
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c56:	1ad2      	subs	r2, r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d114      	bne.n	8004c8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c74:	461a      	mov	r2, r3
 8004c76:	2101      	movs	r1, #1
 8004c78:	f002 fffe 	bl	8007c78 <USB_EP0_OutStart>
 8004c7c:	e006      	b.n	8004c8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	441a      	add	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f005 fcd2 	bl	800a63c <HAL_PCD_DataOutStageCallback>
 8004c98:	e046      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	4a26      	ldr	r2, [pc, #152]	; (8004d38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d124      	bne.n	8004cec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cbe:	6093      	str	r3, [r2, #8]
 8004cc0:	e032      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2320      	movs	r3, #32
 8004cdc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f005 fca9 	bl	800a63c <HAL_PCD_DataOutStageCallback>
 8004cea:	e01d      	b.n	8004d28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d114      	bne.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d108      	bne.n	8004d1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d14:	461a      	mov	r2, r3
 8004d16:	2100      	movs	r1, #0
 8004d18:	f002 ffae 	bl	8007c78 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f005 fc8a 	bl	800a63c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	4f54300a 	.word	0x4f54300a
 8004d38:	4f54310a 	.word	0x4f54310a

08004d3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	333c      	adds	r3, #60	; 0x3c
 8004d54:	3304      	adds	r3, #4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d90e      	bls.n	8004d90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d009      	beq.n	8004d90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f005 fc41 	bl	800a618 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d90c      	bls.n	8004db8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d108      	bne.n	8004db8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004db0:	461a      	mov	r2, r3
 8004db2:	2101      	movs	r1, #1
 8004db4:	f002 ff60 	bl	8007c78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	4f54300a 	.word	0x4f54300a

08004dc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d107      	bne.n	8004df6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004de6:	883b      	ldrh	r3, [r7, #0]
 8004de8:	0419      	lsls	r1, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
 8004df4:	e028      	b.n	8004e48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	0c1b      	lsrs	r3, r3, #16
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	4413      	add	r3, r2
 8004e02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]
 8004e08:	e00d      	b.n	8004e26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	3340      	adds	r3, #64	; 0x40
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	3301      	adds	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	7bfa      	ldrb	r2, [r7, #15]
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d3ec      	bcc.n	8004e0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e30:	883b      	ldrh	r3, [r7, #0]
 8004e32:	0418      	lsls	r0, r3, #16
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6819      	ldr	r1, [r3, #0]
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	4302      	orrs	r2, r0
 8004e40:	3340      	adds	r3, #64	; 0x40
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e267      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d075      	beq.n	8004f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eae:	4b88      	ldr	r3, [pc, #544]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b85      	ldr	r3, [pc, #532]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d112      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec6:	4b82      	ldr	r3, [pc, #520]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed2:	d10b      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	4b7e      	ldr	r3, [pc, #504]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d05b      	beq.n	8004f98 <HAL_RCC_OscConfig+0x108>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d157      	bne.n	8004f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e242      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCC_OscConfig+0x74>
 8004ef6:	4b76      	ldr	r3, [pc, #472]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a75      	ldr	r2, [pc, #468]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e01d      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x98>
 8004f0e:	4b70      	ldr	r3, [pc, #448]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a6f      	ldr	r2, [pc, #444]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a6c      	ldr	r2, [pc, #432]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f28:	4b69      	ldr	r3, [pc, #420]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a68      	ldr	r2, [pc, #416]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b66      	ldr	r3, [pc, #408]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a65      	ldr	r2, [pc, #404]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fc fbe0 	bl	800170c <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fc fbdc 	bl	800170c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e207      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b5b      	ldr	r3, [pc, #364]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0xc0>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f70:	f7fc fbcc 	bl	800170c <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fc fbc8 	bl	800170c <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	; 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e1f3      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	4b51      	ldr	r3, [pc, #324]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0xe8>
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d063      	beq.n	800506e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fa6:	4b4a      	ldr	r3, [pc, #296]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb2:	4b47      	ldr	r3, [pc, #284]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d11c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fbe:	4b44      	ldr	r3, [pc, #272]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d116      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fca:	4b41      	ldr	r3, [pc, #260]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e1c7      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe2:	4b3b      	ldr	r3, [pc, #236]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4937      	ldr	r1, [pc, #220]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff6:	e03a      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d020      	beq.n	8005042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005000:	4b34      	ldr	r3, [pc, #208]	; (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fc fb81 	bl	800170c <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800500e:	f7fc fb7d 	bl	800170c <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1a8      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005020:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502c:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4925      	ldr	r1, [pc, #148]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
 8005040:	e015      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fc fb60 	bl	800170c <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005050:	f7fc fb5c 	bl	800170c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e187      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d036      	beq.n	80050e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d016      	beq.n	80050b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005082:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <HAL_RCC_OscConfig+0x248>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fc fb40 	bl	800170c <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005090:	f7fc fb3c 	bl	800170c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e167      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a2:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <HAL_RCC_OscConfig+0x240>)
 80050a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x200>
 80050ae:	e01b      	b.n	80050e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <HAL_RCC_OscConfig+0x248>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b6:	f7fc fb29 	bl	800170c <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050bc:	e00e      	b.n	80050dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050be:	f7fc fb25 	bl	800170c <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d907      	bls.n	80050dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e150      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 80050d0:	40023800 	.word	0x40023800
 80050d4:	42470000 	.word	0x42470000
 80050d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	4b88      	ldr	r3, [pc, #544]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80050de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1ea      	bne.n	80050be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8097 	beq.w	8005224 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fa:	4b81      	ldr	r3, [pc, #516]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10f      	bne.n	8005126 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	4b7d      	ldr	r3, [pc, #500]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	4a7c      	ldr	r2, [pc, #496]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005114:	6413      	str	r3, [r2, #64]	; 0x40
 8005116:	4b7a      	ldr	r3, [pc, #488]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005122:	2301      	movs	r3, #1
 8005124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005126:	4b77      	ldr	r3, [pc, #476]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d118      	bne.n	8005164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005132:	4b74      	ldr	r3, [pc, #464]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a73      	ldr	r2, [pc, #460]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513e:	f7fc fae5 	bl	800170c <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fc fae1 	bl	800170c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e10c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	4b6a      	ldr	r3, [pc, #424]	; (8005304 <HAL_RCC_OscConfig+0x474>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d106      	bne.n	800517a <HAL_RCC_OscConfig+0x2ea>
 800516c:	4b64      	ldr	r3, [pc, #400]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	4a63      	ldr	r2, [pc, #396]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	; 0x70
 8005178:	e01c      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b05      	cmp	r3, #5
 8005180:	d10c      	bne.n	800519c <HAL_RCC_OscConfig+0x30c>
 8005182:	4b5f      	ldr	r3, [pc, #380]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	4a5e      	ldr	r2, [pc, #376]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005188:	f043 0304 	orr.w	r3, r3, #4
 800518c:	6713      	str	r3, [r2, #112]	; 0x70
 800518e:	4b5c      	ldr	r3, [pc, #368]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005192:	4a5b      	ldr	r2, [pc, #364]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6713      	str	r3, [r2, #112]	; 0x70
 800519a:	e00b      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800519c:	4b58      	ldr	r3, [pc, #352]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	4a57      	ldr	r2, [pc, #348]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	; 0x70
 80051a8:	4b55      	ldr	r3, [pc, #340]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	4a54      	ldr	r2, [pc, #336]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051ae:	f023 0304 	bic.w	r3, r3, #4
 80051b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fc faa6 	bl	800170c <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fc faa2 	bl	800170c <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0cb      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	4b49      	ldr	r3, [pc, #292]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0ee      	beq.n	80051c4 <HAL_RCC_OscConfig+0x334>
 80051e6:	e014      	b.n	8005212 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fc fa90 	bl	800170c <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051f0:	f7fc fa8c 	bl	800170c <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e0b5      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	4b3e      	ldr	r3, [pc, #248]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1ee      	bne.n	80051f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d105      	bne.n	8005224 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005218:	4b39      	ldr	r3, [pc, #228]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	4a38      	ldr	r2, [pc, #224]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 800521e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005222:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a1 	beq.w	8005370 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800522e:	4b34      	ldr	r3, [pc, #208]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b08      	cmp	r3, #8
 8005238:	d05c      	beq.n	80052f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d141      	bne.n	80052c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005242:	4b31      	ldr	r3, [pc, #196]	; (8005308 <HAL_RCC_OscConfig+0x478>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fc fa60 	bl	800170c <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005250:	f7fc fa5c 	bl	800170c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e087      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	4b27      	ldr	r3, [pc, #156]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	3b01      	subs	r3, #1
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	491b      	ldr	r1, [pc, #108]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 8005294:	4313      	orrs	r3, r2
 8005296:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005298:	4b1b      	ldr	r3, [pc, #108]	; (8005308 <HAL_RCC_OscConfig+0x478>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529e:	f7fc fa35 	bl	800170c <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fc fa31 	bl	800170c <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e05c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b8:	4b11      	ldr	r3, [pc, #68]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCC_OscConfig+0x416>
 80052c4:	e054      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c6:	4b10      	ldr	r3, [pc, #64]	; (8005308 <HAL_RCC_OscConfig+0x478>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fc fa1e 	bl	800170c <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fc fa1a 	bl	800170c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e045      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	4b06      	ldr	r3, [pc, #24]	; (8005300 <HAL_RCC_OscConfig+0x470>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x444>
 80052f2:	e03d      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e038      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 8005300:	40023800 	.word	0x40023800
 8005304:	40007000 	.word	0x40007000
 8005308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800530c:	4b1b      	ldr	r3, [pc, #108]	; (800537c <HAL_RCC_OscConfig+0x4ec>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d028      	beq.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d121      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d11a      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005344:	4293      	cmp	r3, r2
 8005346:	d111      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	3b01      	subs	r3, #1
 8005356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d107      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800

08005380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0cc      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b68      	ldr	r3, [pc, #416]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d90c      	bls.n	80053bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b65      	ldr	r3, [pc, #404]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b63      	ldr	r3, [pc, #396]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0b8      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d020      	beq.n	800540a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d4:	4b59      	ldr	r3, [pc, #356]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a58      	ldr	r2, [pc, #352]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ec:	4b53      	ldr	r3, [pc, #332]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a52      	ldr	r2, [pc, #328]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f8:	4b50      	ldr	r3, [pc, #320]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	494d      	ldr	r1, [pc, #308]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d044      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b47      	ldr	r3, [pc, #284]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d119      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e07f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d003      	beq.n	800543e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800543a:	2b03      	cmp	r3, #3
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b3f      	ldr	r3, [pc, #252]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e06f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b3b      	ldr	r3, [pc, #236]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e067      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b37      	ldr	r3, [pc, #220]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4934      	ldr	r1, [pc, #208]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005470:	f7fc f94c 	bl	800170c <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fc f948 	bl	800170c <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	; 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e04f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b2b      	ldr	r3, [pc, #172]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b25      	ldr	r3, [pc, #148]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d20c      	bcs.n	80054c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b22      	ldr	r3, [pc, #136]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e032      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d4:	4b19      	ldr	r3, [pc, #100]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4916      	ldr	r1, [pc, #88]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	490e      	ldr	r1, [pc, #56]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005506:	f000 f821 	bl	800554c <HAL_RCC_GetSysClockFreq>
 800550a:	4602      	mov	r2, r0
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	490a      	ldr	r1, [pc, #40]	; (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005522:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_RCC_ClockConfig+0x1c8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fc f8ac 	bl	8001684 <HAL_InitTick>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023c00 	.word	0x40023c00
 800553c:	40023800 	.word	0x40023800
 8005540:	0800ae04 	.word	0x0800ae04
 8005544:	20000004 	.word	0x20000004
 8005548:	20000008 	.word	0x20000008

0800554c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005550:	b094      	sub	sp, #80	; 0x50
 8005552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	647b      	str	r3, [r7, #68]	; 0x44
 8005558:	2300      	movs	r3, #0
 800555a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800555c:	2300      	movs	r3, #0
 800555e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005564:	4b79      	ldr	r3, [pc, #484]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b08      	cmp	r3, #8
 800556e:	d00d      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0x40>
 8005570:	2b08      	cmp	r3, #8
 8005572:	f200 80e1 	bhi.w	8005738 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x34>
 800557a:	2b04      	cmp	r3, #4
 800557c:	d003      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x3a>
 800557e:	e0db      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005580:	4b73      	ldr	r3, [pc, #460]	; (8005750 <HAL_RCC_GetSysClockFreq+0x204>)
 8005582:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005584:	e0db      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005586:	4b73      	ldr	r3, [pc, #460]	; (8005754 <HAL_RCC_GetSysClockFreq+0x208>)
 8005588:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800558a:	e0d8      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800558c:	4b6f      	ldr	r3, [pc, #444]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005594:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005596:	4b6d      	ldr	r3, [pc, #436]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	4b6a      	ldr	r3, [pc, #424]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	2200      	movs	r2, #0
 80055aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80055ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b4:	633b      	str	r3, [r7, #48]	; 0x30
 80055b6:	2300      	movs	r3, #0
 80055b8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80055be:	4622      	mov	r2, r4
 80055c0:	462b      	mov	r3, r5
 80055c2:	f04f 0000 	mov.w	r0, #0
 80055c6:	f04f 0100 	mov.w	r1, #0
 80055ca:	0159      	lsls	r1, r3, #5
 80055cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d0:	0150      	lsls	r0, r2, #5
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4621      	mov	r1, r4
 80055d8:	1a51      	subs	r1, r2, r1
 80055da:	6139      	str	r1, [r7, #16]
 80055dc:	4629      	mov	r1, r5
 80055de:	eb63 0301 	sbc.w	r3, r3, r1
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f0:	4659      	mov	r1, fp
 80055f2:	018b      	lsls	r3, r1, #6
 80055f4:	4651      	mov	r1, sl
 80055f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055fa:	4651      	mov	r1, sl
 80055fc:	018a      	lsls	r2, r1, #6
 80055fe:	4651      	mov	r1, sl
 8005600:	ebb2 0801 	subs.w	r8, r2, r1
 8005604:	4659      	mov	r1, fp
 8005606:	eb63 0901 	sbc.w	r9, r3, r1
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800561a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800561e:	4690      	mov	r8, r2
 8005620:	4699      	mov	r9, r3
 8005622:	4623      	mov	r3, r4
 8005624:	eb18 0303 	adds.w	r3, r8, r3
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	462b      	mov	r3, r5
 800562c:	eb49 0303 	adc.w	r3, r9, r3
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800563e:	4629      	mov	r1, r5
 8005640:	024b      	lsls	r3, r1, #9
 8005642:	4621      	mov	r1, r4
 8005644:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005648:	4621      	mov	r1, r4
 800564a:	024a      	lsls	r2, r1, #9
 800564c:	4610      	mov	r0, r2
 800564e:	4619      	mov	r1, r3
 8005650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005652:	2200      	movs	r2, #0
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
 8005656:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800565c:	f7fa fdb4 	bl	80001c8 <__aeabi_uldivmod>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4613      	mov	r3, r2
 8005666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005668:	e058      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800566a:	4b38      	ldr	r3, [pc, #224]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	099b      	lsrs	r3, r3, #6
 8005670:	2200      	movs	r2, #0
 8005672:	4618      	mov	r0, r3
 8005674:	4611      	mov	r1, r2
 8005676:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800567a:	623b      	str	r3, [r7, #32]
 800567c:	2300      	movs	r3, #0
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
 8005680:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	f04f 0000 	mov.w	r0, #0
 800568c:	f04f 0100 	mov.w	r1, #0
 8005690:	0159      	lsls	r1, r3, #5
 8005692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005696:	0150      	lsls	r0, r2, #5
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4641      	mov	r1, r8
 800569e:	ebb2 0a01 	subs.w	sl, r2, r1
 80056a2:	4649      	mov	r1, r9
 80056a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056bc:	ebb2 040a 	subs.w	r4, r2, sl
 80056c0:	eb63 050b 	sbc.w	r5, r3, fp
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	00eb      	lsls	r3, r5, #3
 80056ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056d2:	00e2      	lsls	r2, r4, #3
 80056d4:	4614      	mov	r4, r2
 80056d6:	461d      	mov	r5, r3
 80056d8:	4643      	mov	r3, r8
 80056da:	18e3      	adds	r3, r4, r3
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	464b      	mov	r3, r9
 80056e0:	eb45 0303 	adc.w	r3, r5, r3
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056f2:	4629      	mov	r1, r5
 80056f4:	028b      	lsls	r3, r1, #10
 80056f6:	4621      	mov	r1, r4
 80056f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056fc:	4621      	mov	r1, r4
 80056fe:	028a      	lsls	r2, r1, #10
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005706:	2200      	movs	r2, #0
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	61fa      	str	r2, [r7, #28]
 800570c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005710:	f7fa fd5a 	bl	80001c8 <__aeabi_uldivmod>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4613      	mov	r3, r2
 800571a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_GetSysClockFreq+0x200>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	3301      	adds	r3, #1
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800572c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800572e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005736:	e002      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <HAL_RCC_GetSysClockFreq+0x204>)
 800573a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800573c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800573e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005740:	4618      	mov	r0, r3
 8005742:	3750      	adds	r7, #80	; 0x50
 8005744:	46bd      	mov	sp, r7
 8005746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
 8005750:	00f42400 	.word	0x00f42400
 8005754:	007a1200 	.word	0x007a1200

08005758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800575c:	4b03      	ldr	r3, [pc, #12]	; (800576c <HAL_RCC_GetHCLKFreq+0x14>)
 800575e:	681b      	ldr	r3, [r3, #0]
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000004 	.word	0x20000004

08005770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005774:	f7ff fff0 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 8005778:	4602      	mov	r2, r0
 800577a:	4b05      	ldr	r3, [pc, #20]	; (8005790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	0a9b      	lsrs	r3, r3, #10
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	4903      	ldr	r1, [pc, #12]	; (8005794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40023800 	.word	0x40023800
 8005794:	0800ae14 	.word	0x0800ae14

08005798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800579c:	f7ff ffdc 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 80057a0:	4602      	mov	r2, r0
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	0b5b      	lsrs	r3, r3, #13
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	4903      	ldr	r1, [pc, #12]	; (80057bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ae:	5ccb      	ldrb	r3, [r1, r3]
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40023800 	.word	0x40023800
 80057bc:	0800ae14 	.word	0x0800ae14

080057c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e041      	b.n	8005856 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fb fd68 	bl	80012bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4619      	mov	r1, r3
 80057fe:	4610      	mov	r0, r2
 8005800:	f000 f8f0 	bl	80059e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800587a:	2302      	movs	r3, #2
 800587c:	e0ae      	b.n	80059dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b0c      	cmp	r3, #12
 800588a:	f200 809f 	bhi.w	80059cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058c9 	.word	0x080058c9
 8005898:	080059cd 	.word	0x080059cd
 800589c:	080059cd 	.word	0x080059cd
 80058a0:	080059cd 	.word	0x080059cd
 80058a4:	08005909 	.word	0x08005909
 80058a8:	080059cd 	.word	0x080059cd
 80058ac:	080059cd 	.word	0x080059cd
 80058b0:	080059cd 	.word	0x080059cd
 80058b4:	0800594b 	.word	0x0800594b
 80058b8:	080059cd 	.word	0x080059cd
 80058bc:	080059cd 	.word	0x080059cd
 80058c0:	080059cd 	.word	0x080059cd
 80058c4:	0800598b 	.word	0x0800598b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 f928 	bl	8005b24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0208 	orr.w	r2, r2, #8
 80058e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0204 	bic.w	r2, r2, #4
 80058f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6999      	ldr	r1, [r3, #24]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	619a      	str	r2, [r3, #24]
      break;
 8005906:	e064      	b.n	80059d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f978 	bl	8005c04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6999      	ldr	r1, [r3, #24]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	021a      	lsls	r2, r3, #8
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	619a      	str	r2, [r3, #24]
      break;
 8005948:	e043      	b.n	80059d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68b9      	ldr	r1, [r7, #8]
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f9cd 	bl	8005cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0208 	orr.w	r2, r2, #8
 8005964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69da      	ldr	r2, [r3, #28]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0204 	bic.w	r2, r2, #4
 8005974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69d9      	ldr	r1, [r3, #28]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	61da      	str	r2, [r3, #28]
      break;
 8005988:	e023      	b.n	80059d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fa21 	bl	8005dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69da      	ldr	r2, [r3, #28]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69da      	ldr	r2, [r3, #28]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69d9      	ldr	r1, [r3, #28]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	021a      	lsls	r2, r3, #8
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	61da      	str	r2, [r3, #28]
      break;
 80059ca:	e002      	b.n	80059d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	75fb      	strb	r3, [r7, #23]
      break;
 80059d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059da:	7dfb      	ldrb	r3, [r7, #23]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a40      	ldr	r2, [pc, #256]	; (8005af8 <TIM_Base_SetConfig+0x114>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a02:	d00f      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a3d      	ldr	r2, [pc, #244]	; (8005afc <TIM_Base_SetConfig+0x118>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3c      	ldr	r2, [pc, #240]	; (8005b00 <TIM_Base_SetConfig+0x11c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d007      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a3b      	ldr	r2, [pc, #236]	; (8005b04 <TIM_Base_SetConfig+0x120>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a3a      	ldr	r2, [pc, #232]	; (8005b08 <TIM_Base_SetConfig+0x124>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d108      	bne.n	8005a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2f      	ldr	r2, [pc, #188]	; (8005af8 <TIM_Base_SetConfig+0x114>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d02b      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a44:	d027      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2c      	ldr	r2, [pc, #176]	; (8005afc <TIM_Base_SetConfig+0x118>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d023      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2b      	ldr	r2, [pc, #172]	; (8005b00 <TIM_Base_SetConfig+0x11c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d01f      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a2a      	ldr	r2, [pc, #168]	; (8005b04 <TIM_Base_SetConfig+0x120>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01b      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a29      	ldr	r2, [pc, #164]	; (8005b08 <TIM_Base_SetConfig+0x124>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d017      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <TIM_Base_SetConfig+0x128>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d013      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a27      	ldr	r2, [pc, #156]	; (8005b10 <TIM_Base_SetConfig+0x12c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00f      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <TIM_Base_SetConfig+0x130>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00b      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a25      	ldr	r2, [pc, #148]	; (8005b18 <TIM_Base_SetConfig+0x134>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d007      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a24      	ldr	r2, [pc, #144]	; (8005b1c <TIM_Base_SetConfig+0x138>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d003      	beq.n	8005a96 <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a23      	ldr	r2, [pc, #140]	; (8005b20 <TIM_Base_SetConfig+0x13c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d108      	bne.n	8005aa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a0a      	ldr	r2, [pc, #40]	; (8005af8 <TIM_Base_SetConfig+0x114>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_Base_SetConfig+0xf8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a0c      	ldr	r2, [pc, #48]	; (8005b08 <TIM_Base_SetConfig+0x124>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d103      	bne.n	8005ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	615a      	str	r2, [r3, #20]
}
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40010000 	.word	0x40010000
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40000c00 	.word	0x40000c00
 8005b08:	40010400 	.word	0x40010400
 8005b0c:	40014000 	.word	0x40014000
 8005b10:	40014400 	.word	0x40014400
 8005b14:	40014800 	.word	0x40014800
 8005b18:	40001800 	.word	0x40001800
 8005b1c:	40001c00 	.word	0x40001c00
 8005b20:	40002000 	.word	0x40002000

08005b24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 0201 	bic.w	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f023 0302 	bic.w	r3, r3, #2
 8005b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a20      	ldr	r2, [pc, #128]	; (8005bfc <TIM_OC1_SetConfig+0xd8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <TIM_OC1_SetConfig+0x64>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <TIM_OC1_SetConfig+0xdc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d10c      	bne.n	8005ba2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0308 	bic.w	r3, r3, #8
 8005b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f023 0304 	bic.w	r3, r3, #4
 8005ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a15      	ldr	r2, [pc, #84]	; (8005bfc <TIM_OC1_SetConfig+0xd8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_OC1_SetConfig+0x8e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <TIM_OC1_SetConfig+0xdc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d111      	bne.n	8005bd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	621a      	str	r2, [r3, #32]
}
 8005bf0:	bf00      	nop
 8005bf2:	371c      	adds	r7, #28
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40010400 	.word	0x40010400

08005c04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f023 0210 	bic.w	r2, r3, #16
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0320 	bic.w	r3, r3, #32
 8005c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a22      	ldr	r2, [pc, #136]	; (8005ce8 <TIM_OC2_SetConfig+0xe4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_OC2_SetConfig+0x68>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a21      	ldr	r2, [pc, #132]	; (8005cec <TIM_OC2_SetConfig+0xe8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10d      	bne.n	8005c88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a17      	ldr	r2, [pc, #92]	; (8005ce8 <TIM_OC2_SetConfig+0xe4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_OC2_SetConfig+0x94>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a16      	ldr	r2, [pc, #88]	; (8005cec <TIM_OC2_SetConfig+0xe8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d113      	bne.n	8005cc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	bf00      	nop
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40010000 	.word	0x40010000
 8005cec:	40010400 	.word	0x40010400

08005cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0303 	bic.w	r3, r3, #3
 8005d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a21      	ldr	r2, [pc, #132]	; (8005dd0 <TIM_OC3_SetConfig+0xe0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <TIM_OC3_SetConfig+0x66>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a20      	ldr	r2, [pc, #128]	; (8005dd4 <TIM_OC3_SetConfig+0xe4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d10d      	bne.n	8005d72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a16      	ldr	r2, [pc, #88]	; (8005dd0 <TIM_OC3_SetConfig+0xe0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d003      	beq.n	8005d82 <TIM_OC3_SetConfig+0x92>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a15      	ldr	r2, [pc, #84]	; (8005dd4 <TIM_OC3_SetConfig+0xe4>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d113      	bne.n	8005daa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	621a      	str	r2, [r3, #32]
}
 8005dc4:	bf00      	nop
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40010400 	.word	0x40010400

08005dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	031b      	lsls	r3, r3, #12
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <TIM_OC4_SetConfig+0xa4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <TIM_OC4_SetConfig+0x68>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a11      	ldr	r2, [pc, #68]	; (8005e80 <TIM_OC4_SetConfig+0xa8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d109      	bne.n	8005e54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	019b      	lsls	r3, r3, #6
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	621a      	str	r2, [r3, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40010400 	.word	0x40010400

08005e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e05a      	b.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a21      	ldr	r2, [pc, #132]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d022      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee8:	d01d      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d018      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1b      	ldr	r2, [pc, #108]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1a      	ldr	r2, [pc, #104]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a18      	ldr	r2, [pc, #96]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a17      	ldr	r2, [pc, #92]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d10c      	bne.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40000400 	.word	0x40000400
 8005f68:	40000800 	.word	0x40000800
 8005f6c:	40000c00 	.word	0x40000c00
 8005f70:	40010400 	.word	0x40010400
 8005f74:	40014000 	.word	0x40014000
 8005f78:	40001800 	.word	0x40001800

08005f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e03f      	b.n	800600e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fb f9e6 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2224      	movs	r2, #36	; 0x24
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f829 	bl	8006018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695a      	ldr	r2, [r3, #20]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800601c:	b0c0      	sub	sp, #256	; 0x100
 800601e:	af00      	add	r7, sp, #0
 8006020:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	68d9      	ldr	r1, [r3, #12]
 8006036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	ea40 0301 	orr.w	r3, r0, r1
 8006040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	431a      	orrs	r2, r3
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	431a      	orrs	r2, r3
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006070:	f021 010c 	bic.w	r1, r1, #12
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800607e:	430b      	orrs	r3, r1
 8006080:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006092:	6999      	ldr	r1, [r3, #24]
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	ea40 0301 	orr.w	r3, r0, r1
 800609e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	4b8f      	ldr	r3, [pc, #572]	; (80062e4 <UART_SetConfig+0x2cc>)
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d005      	beq.n	80060b8 <UART_SetConfig+0xa0>
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b8d      	ldr	r3, [pc, #564]	; (80062e8 <UART_SetConfig+0x2d0>)
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d104      	bne.n	80060c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060b8:	f7ff fb6e 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 80060bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060c0:	e003      	b.n	80060ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060c2:	f7ff fb55 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 80060c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d4:	f040 810c 	bne.w	80062f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060dc:	2200      	movs	r2, #0
 80060de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060ea:	4622      	mov	r2, r4
 80060ec:	462b      	mov	r3, r5
 80060ee:	1891      	adds	r1, r2, r2
 80060f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80060f2:	415b      	adcs	r3, r3
 80060f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060fa:	4621      	mov	r1, r4
 80060fc:	eb12 0801 	adds.w	r8, r2, r1
 8006100:	4629      	mov	r1, r5
 8006102:	eb43 0901 	adc.w	r9, r3, r1
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800611a:	4690      	mov	r8, r2
 800611c:	4699      	mov	r9, r3
 800611e:	4623      	mov	r3, r4
 8006120:	eb18 0303 	adds.w	r3, r8, r3
 8006124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006128:	462b      	mov	r3, r5
 800612a:	eb49 0303 	adc.w	r3, r9, r3
 800612e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800613e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006142:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006146:	460b      	mov	r3, r1
 8006148:	18db      	adds	r3, r3, r3
 800614a:	653b      	str	r3, [r7, #80]	; 0x50
 800614c:	4613      	mov	r3, r2
 800614e:	eb42 0303 	adc.w	r3, r2, r3
 8006152:	657b      	str	r3, [r7, #84]	; 0x54
 8006154:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800615c:	f7fa f834 	bl	80001c8 <__aeabi_uldivmod>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4b61      	ldr	r3, [pc, #388]	; (80062ec <UART_SetConfig+0x2d4>)
 8006166:	fba3 2302 	umull	r2, r3, r3, r2
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	011c      	lsls	r4, r3, #4
 800616e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006172:	2200      	movs	r2, #0
 8006174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006178:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800617c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006180:	4642      	mov	r2, r8
 8006182:	464b      	mov	r3, r9
 8006184:	1891      	adds	r1, r2, r2
 8006186:	64b9      	str	r1, [r7, #72]	; 0x48
 8006188:	415b      	adcs	r3, r3
 800618a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800618c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006190:	4641      	mov	r1, r8
 8006192:	eb12 0a01 	adds.w	sl, r2, r1
 8006196:	4649      	mov	r1, r9
 8006198:	eb43 0b01 	adc.w	fp, r3, r1
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061b0:	4692      	mov	sl, r2
 80061b2:	469b      	mov	fp, r3
 80061b4:	4643      	mov	r3, r8
 80061b6:	eb1a 0303 	adds.w	r3, sl, r3
 80061ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061be:	464b      	mov	r3, r9
 80061c0:	eb4b 0303 	adc.w	r3, fp, r3
 80061c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061dc:	460b      	mov	r3, r1
 80061de:	18db      	adds	r3, r3, r3
 80061e0:	643b      	str	r3, [r7, #64]	; 0x40
 80061e2:	4613      	mov	r3, r2
 80061e4:	eb42 0303 	adc.w	r3, r2, r3
 80061e8:	647b      	str	r3, [r7, #68]	; 0x44
 80061ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061f2:	f7f9 ffe9 	bl	80001c8 <__aeabi_uldivmod>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4611      	mov	r1, r2
 80061fc:	4b3b      	ldr	r3, [pc, #236]	; (80062ec <UART_SetConfig+0x2d4>)
 80061fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	2264      	movs	r2, #100	; 0x64
 8006206:	fb02 f303 	mul.w	r3, r2, r3
 800620a:	1acb      	subs	r3, r1, r3
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006212:	4b36      	ldr	r3, [pc, #216]	; (80062ec <UART_SetConfig+0x2d4>)
 8006214:	fba3 2302 	umull	r2, r3, r3, r2
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006220:	441c      	add	r4, r3
 8006222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006226:	2200      	movs	r2, #0
 8006228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800622c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006230:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006234:	4642      	mov	r2, r8
 8006236:	464b      	mov	r3, r9
 8006238:	1891      	adds	r1, r2, r2
 800623a:	63b9      	str	r1, [r7, #56]	; 0x38
 800623c:	415b      	adcs	r3, r3
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006244:	4641      	mov	r1, r8
 8006246:	1851      	adds	r1, r2, r1
 8006248:	6339      	str	r1, [r7, #48]	; 0x30
 800624a:	4649      	mov	r1, r9
 800624c:	414b      	adcs	r3, r1
 800624e:	637b      	str	r3, [r7, #52]	; 0x34
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800625c:	4659      	mov	r1, fp
 800625e:	00cb      	lsls	r3, r1, #3
 8006260:	4651      	mov	r1, sl
 8006262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006266:	4651      	mov	r1, sl
 8006268:	00ca      	lsls	r2, r1, #3
 800626a:	4610      	mov	r0, r2
 800626c:	4619      	mov	r1, r3
 800626e:	4603      	mov	r3, r0
 8006270:	4642      	mov	r2, r8
 8006272:	189b      	adds	r3, r3, r2
 8006274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006278:	464b      	mov	r3, r9
 800627a:	460a      	mov	r2, r1
 800627c:	eb42 0303 	adc.w	r3, r2, r3
 8006280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006290:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006298:	460b      	mov	r3, r1
 800629a:	18db      	adds	r3, r3, r3
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
 800629e:	4613      	mov	r3, r2
 80062a0:	eb42 0303 	adc.w	r3, r2, r3
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062ae:	f7f9 ff8b 	bl	80001c8 <__aeabi_uldivmod>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4b0d      	ldr	r3, [pc, #52]	; (80062ec <UART_SetConfig+0x2d4>)
 80062b8:	fba3 1302 	umull	r1, r3, r3, r2
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	2164      	movs	r1, #100	; 0x64
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	3332      	adds	r3, #50	; 0x32
 80062ca:	4a08      	ldr	r2, [pc, #32]	; (80062ec <UART_SetConfig+0x2d4>)
 80062cc:	fba2 2303 	umull	r2, r3, r2, r3
 80062d0:	095b      	lsrs	r3, r3, #5
 80062d2:	f003 0207 	and.w	r2, r3, #7
 80062d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4422      	add	r2, r4
 80062de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062e0:	e105      	b.n	80064ee <UART_SetConfig+0x4d6>
 80062e2:	bf00      	nop
 80062e4:	40011000 	.word	0x40011000
 80062e8:	40011400 	.word	0x40011400
 80062ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006302:	4642      	mov	r2, r8
 8006304:	464b      	mov	r3, r9
 8006306:	1891      	adds	r1, r2, r2
 8006308:	6239      	str	r1, [r7, #32]
 800630a:	415b      	adcs	r3, r3
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
 800630e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006312:	4641      	mov	r1, r8
 8006314:	1854      	adds	r4, r2, r1
 8006316:	4649      	mov	r1, r9
 8006318:	eb43 0501 	adc.w	r5, r3, r1
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	f04f 0300 	mov.w	r3, #0
 8006324:	00eb      	lsls	r3, r5, #3
 8006326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800632a:	00e2      	lsls	r2, r4, #3
 800632c:	4614      	mov	r4, r2
 800632e:	461d      	mov	r5, r3
 8006330:	4643      	mov	r3, r8
 8006332:	18e3      	adds	r3, r4, r3
 8006334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006338:	464b      	mov	r3, r9
 800633a:	eb45 0303 	adc.w	r3, r5, r3
 800633e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800634e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800635e:	4629      	mov	r1, r5
 8006360:	008b      	lsls	r3, r1, #2
 8006362:	4621      	mov	r1, r4
 8006364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006368:	4621      	mov	r1, r4
 800636a:	008a      	lsls	r2, r1, #2
 800636c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006370:	f7f9 ff2a 	bl	80001c8 <__aeabi_uldivmod>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4b60      	ldr	r3, [pc, #384]	; (80064fc <UART_SetConfig+0x4e4>)
 800637a:	fba3 2302 	umull	r2, r3, r3, r2
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	011c      	lsls	r4, r3, #4
 8006382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006386:	2200      	movs	r2, #0
 8006388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800638c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006390:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006394:	4642      	mov	r2, r8
 8006396:	464b      	mov	r3, r9
 8006398:	1891      	adds	r1, r2, r2
 800639a:	61b9      	str	r1, [r7, #24]
 800639c:	415b      	adcs	r3, r3
 800639e:	61fb      	str	r3, [r7, #28]
 80063a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063a4:	4641      	mov	r1, r8
 80063a6:	1851      	adds	r1, r2, r1
 80063a8:	6139      	str	r1, [r7, #16]
 80063aa:	4649      	mov	r1, r9
 80063ac:	414b      	adcs	r3, r1
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063bc:	4659      	mov	r1, fp
 80063be:	00cb      	lsls	r3, r1, #3
 80063c0:	4651      	mov	r1, sl
 80063c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063c6:	4651      	mov	r1, sl
 80063c8:	00ca      	lsls	r2, r1, #3
 80063ca:	4610      	mov	r0, r2
 80063cc:	4619      	mov	r1, r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	4642      	mov	r2, r8
 80063d2:	189b      	adds	r3, r3, r2
 80063d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063d8:	464b      	mov	r3, r9
 80063da:	460a      	mov	r2, r1
 80063dc:	eb42 0303 	adc.w	r3, r2, r3
 80063e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80063ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063fc:	4649      	mov	r1, r9
 80063fe:	008b      	lsls	r3, r1, #2
 8006400:	4641      	mov	r1, r8
 8006402:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006406:	4641      	mov	r1, r8
 8006408:	008a      	lsls	r2, r1, #2
 800640a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800640e:	f7f9 fedb 	bl	80001c8 <__aeabi_uldivmod>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4b39      	ldr	r3, [pc, #228]	; (80064fc <UART_SetConfig+0x4e4>)
 8006418:	fba3 1302 	umull	r1, r3, r3, r2
 800641c:	095b      	lsrs	r3, r3, #5
 800641e:	2164      	movs	r1, #100	; 0x64
 8006420:	fb01 f303 	mul.w	r3, r1, r3
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	3332      	adds	r3, #50	; 0x32
 800642a:	4a34      	ldr	r2, [pc, #208]	; (80064fc <UART_SetConfig+0x4e4>)
 800642c:	fba2 2303 	umull	r2, r3, r2, r3
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006436:	441c      	add	r4, r3
 8006438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800643c:	2200      	movs	r2, #0
 800643e:	673b      	str	r3, [r7, #112]	; 0x70
 8006440:	677a      	str	r2, [r7, #116]	; 0x74
 8006442:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006446:	4642      	mov	r2, r8
 8006448:	464b      	mov	r3, r9
 800644a:	1891      	adds	r1, r2, r2
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	415b      	adcs	r3, r3
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006456:	4641      	mov	r1, r8
 8006458:	1851      	adds	r1, r2, r1
 800645a:	6039      	str	r1, [r7, #0]
 800645c:	4649      	mov	r1, r9
 800645e:	414b      	adcs	r3, r1
 8006460:	607b      	str	r3, [r7, #4]
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	f04f 0300 	mov.w	r3, #0
 800646a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800646e:	4659      	mov	r1, fp
 8006470:	00cb      	lsls	r3, r1, #3
 8006472:	4651      	mov	r1, sl
 8006474:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006478:	4651      	mov	r1, sl
 800647a:	00ca      	lsls	r2, r1, #3
 800647c:	4610      	mov	r0, r2
 800647e:	4619      	mov	r1, r3
 8006480:	4603      	mov	r3, r0
 8006482:	4642      	mov	r2, r8
 8006484:	189b      	adds	r3, r3, r2
 8006486:	66bb      	str	r3, [r7, #104]	; 0x68
 8006488:	464b      	mov	r3, r9
 800648a:	460a      	mov	r2, r1
 800648c:	eb42 0303 	adc.w	r3, r2, r3
 8006490:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	663b      	str	r3, [r7, #96]	; 0x60
 800649c:	667a      	str	r2, [r7, #100]	; 0x64
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064aa:	4649      	mov	r1, r9
 80064ac:	008b      	lsls	r3, r1, #2
 80064ae:	4641      	mov	r1, r8
 80064b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064b4:	4641      	mov	r1, r8
 80064b6:	008a      	lsls	r2, r1, #2
 80064b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064bc:	f7f9 fe84 	bl	80001c8 <__aeabi_uldivmod>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <UART_SetConfig+0x4e4>)
 80064c6:	fba3 1302 	umull	r1, r3, r3, r2
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2164      	movs	r1, #100	; 0x64
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	3332      	adds	r3, #50	; 0x32
 80064d8:	4a08      	ldr	r2, [pc, #32]	; (80064fc <UART_SetConfig+0x4e4>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	f003 020f 	and.w	r2, r3, #15
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4422      	add	r2, r4
 80064ec:	609a      	str	r2, [r3, #8]
}
 80064ee:	bf00      	nop
 80064f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064f4:	46bd      	mov	sp, r7
 80064f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064fa:	bf00      	nop
 80064fc:	51eb851f 	.word	0x51eb851f

08006500 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006500:	b084      	sub	sp, #16
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	f107 001c 	add.w	r0, r7, #28
 800650e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	2b01      	cmp	r3, #1
 8006516:	d122      	bne.n	800655e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800652c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006542:	2b01      	cmp	r3, #1
 8006544:	d105      	bne.n	8006552 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 fbee 	bl	8007d34 <USB_CoreReset>
 8006558:	4603      	mov	r3, r0
 800655a:	73fb      	strb	r3, [r7, #15]
 800655c:	e01a      	b.n	8006594 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fbe2 	bl	8007d34 <USB_CoreReset>
 8006570:	4603      	mov	r3, r0
 8006572:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	639a      	str	r2, [r3, #56]	; 0x38
 8006586:	e005      	b.n	8006594 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	2b01      	cmp	r3, #1
 8006598:	d10b      	bne.n	80065b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f043 0206 	orr.w	r2, r3, #6
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f043 0220 	orr.w	r2, r3, #32
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065be:	b004      	add	sp, #16
 80065c0:	4770      	bx	lr
	...

080065c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d165      	bne.n	80066a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4a41      	ldr	r2, [pc, #260]	; (80066e0 <USB_SetTurnaroundTime+0x11c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d906      	bls.n	80065ee <USB_SetTurnaroundTime+0x2a>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4a40      	ldr	r2, [pc, #256]	; (80066e4 <USB_SetTurnaroundTime+0x120>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d202      	bcs.n	80065ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80065e8:	230f      	movs	r3, #15
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	e062      	b.n	80066b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4a3c      	ldr	r2, [pc, #240]	; (80066e4 <USB_SetTurnaroundTime+0x120>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d306      	bcc.n	8006604 <USB_SetTurnaroundTime+0x40>
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	4a3b      	ldr	r2, [pc, #236]	; (80066e8 <USB_SetTurnaroundTime+0x124>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d202      	bcs.n	8006604 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80065fe:	230e      	movs	r3, #14
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	e057      	b.n	80066b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4a38      	ldr	r2, [pc, #224]	; (80066e8 <USB_SetTurnaroundTime+0x124>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d306      	bcc.n	800661a <USB_SetTurnaroundTime+0x56>
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4a37      	ldr	r2, [pc, #220]	; (80066ec <USB_SetTurnaroundTime+0x128>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d202      	bcs.n	800661a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006614:	230d      	movs	r3, #13
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	e04c      	b.n	80066b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4a33      	ldr	r2, [pc, #204]	; (80066ec <USB_SetTurnaroundTime+0x128>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d306      	bcc.n	8006630 <USB_SetTurnaroundTime+0x6c>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	4a32      	ldr	r2, [pc, #200]	; (80066f0 <USB_SetTurnaroundTime+0x12c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d802      	bhi.n	8006630 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800662a:	230c      	movs	r3, #12
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	e041      	b.n	80066b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4a2f      	ldr	r2, [pc, #188]	; (80066f0 <USB_SetTurnaroundTime+0x12c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d906      	bls.n	8006646 <USB_SetTurnaroundTime+0x82>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4a2e      	ldr	r2, [pc, #184]	; (80066f4 <USB_SetTurnaroundTime+0x130>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d802      	bhi.n	8006646 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006640:	230b      	movs	r3, #11
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e036      	b.n	80066b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4a2a      	ldr	r2, [pc, #168]	; (80066f4 <USB_SetTurnaroundTime+0x130>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d906      	bls.n	800665c <USB_SetTurnaroundTime+0x98>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	4a29      	ldr	r2, [pc, #164]	; (80066f8 <USB_SetTurnaroundTime+0x134>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d802      	bhi.n	800665c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006656:	230a      	movs	r3, #10
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	e02b      	b.n	80066b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4a26      	ldr	r2, [pc, #152]	; (80066f8 <USB_SetTurnaroundTime+0x134>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d906      	bls.n	8006672 <USB_SetTurnaroundTime+0xae>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	4a25      	ldr	r2, [pc, #148]	; (80066fc <USB_SetTurnaroundTime+0x138>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d202      	bcs.n	8006672 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800666c:	2309      	movs	r3, #9
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	e020      	b.n	80066b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4a21      	ldr	r2, [pc, #132]	; (80066fc <USB_SetTurnaroundTime+0x138>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d306      	bcc.n	8006688 <USB_SetTurnaroundTime+0xc4>
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4a20      	ldr	r2, [pc, #128]	; (8006700 <USB_SetTurnaroundTime+0x13c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d802      	bhi.n	8006688 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006682:	2308      	movs	r3, #8
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	e015      	b.n	80066b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <USB_SetTurnaroundTime+0x13c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d906      	bls.n	800669e <USB_SetTurnaroundTime+0xda>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4a1c      	ldr	r2, [pc, #112]	; (8006704 <USB_SetTurnaroundTime+0x140>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d202      	bcs.n	800669e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006698:	2307      	movs	r3, #7
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	e00a      	b.n	80066b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800669e:	2306      	movs	r3, #6
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e007      	b.n	80066b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80066aa:	2309      	movs	r3, #9
 80066ac:	617b      	str	r3, [r7, #20]
 80066ae:	e001      	b.n	80066b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80066b0:	2309      	movs	r3, #9
 80066b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	029b      	lsls	r3, r3, #10
 80066c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80066cc:	431a      	orrs	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	00d8acbf 	.word	0x00d8acbf
 80066e4:	00e4e1c0 	.word	0x00e4e1c0
 80066e8:	00f42400 	.word	0x00f42400
 80066ec:	01067380 	.word	0x01067380
 80066f0:	011a499f 	.word	0x011a499f
 80066f4:	01312cff 	.word	0x01312cff
 80066f8:	014ca43f 	.word	0x014ca43f
 80066fc:	016e3600 	.word	0x016e3600
 8006700:	01a6ab1f 	.word	0x01a6ab1f
 8006704:	01e84800 	.word	0x01e84800

08006708 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f043 0201 	orr.w	r2, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f023 0201 	bic.w	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d115      	bne.n	800679a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800677a:	2001      	movs	r0, #1
 800677c:	f7fa ffd2 	bl	8001724 <HAL_Delay>
      ms++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fa45 	bl	8007c16 <USB_GetMode>
 800678c:	4603      	mov	r3, r0
 800678e:	2b01      	cmp	r3, #1
 8006790:	d01e      	beq.n	80067d0 <USB_SetCurrentMode+0x84>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b31      	cmp	r3, #49	; 0x31
 8006796:	d9f0      	bls.n	800677a <USB_SetCurrentMode+0x2e>
 8006798:	e01a      	b.n	80067d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d115      	bne.n	80067cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067ac:	2001      	movs	r0, #1
 80067ae:	f7fa ffb9 	bl	8001724 <HAL_Delay>
      ms++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3301      	adds	r3, #1
 80067b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 fa2c 	bl	8007c16 <USB_GetMode>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <USB_SetCurrentMode+0x84>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b31      	cmp	r3, #49	; 0x31
 80067c8:	d9f0      	bls.n	80067ac <USB_SetCurrentMode+0x60>
 80067ca:	e001      	b.n	80067d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e005      	b.n	80067dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b32      	cmp	r3, #50	; 0x32
 80067d4:	d101      	bne.n	80067da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067e4:	b084      	sub	sp, #16
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b086      	sub	sp, #24
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067fe:	2300      	movs	r3, #0
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	e009      	b.n	8006818 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	3340      	adds	r3, #64	; 0x40
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	2200      	movs	r2, #0
 8006810:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3301      	adds	r3, #1
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	2b0e      	cmp	r3, #14
 800681c:	d9f2      	bls.n	8006804 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800681e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d11c      	bne.n	800685e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006832:	f043 0302 	orr.w	r3, r3, #2
 8006836:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	639a      	str	r2, [r3, #56]	; 0x38
 800685c:	e00b      	b.n	8006876 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800687c:	461a      	mov	r2, r3
 800687e:	2300      	movs	r3, #0
 8006880:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006888:	4619      	mov	r1, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006890:	461a      	mov	r2, r3
 8006892:	680b      	ldr	r3, [r1, #0]
 8006894:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	2b01      	cmp	r3, #1
 800689a:	d10c      	bne.n	80068b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068a2:	2100      	movs	r1, #0
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f965 	bl	8006b74 <USB_SetDevSpeed>
 80068aa:	e008      	b.n	80068be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068ac:	2101      	movs	r1, #1
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f960 	bl	8006b74 <USB_SetDevSpeed>
 80068b4:	e003      	b.n	80068be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068b6:	2103      	movs	r1, #3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f95b 	bl	8006b74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068be:	2110      	movs	r1, #16
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f8f3 	bl	8006aac <USB_FlushTxFifo>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f91f 	bl	8006b14 <USB_FlushRxFifo>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	461a      	mov	r2, r3
 80068e8:	2300      	movs	r3, #0
 80068ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	461a      	mov	r2, r3
 80068f4:	2300      	movs	r3, #0
 80068f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fe:	461a      	mov	r2, r3
 8006900:	2300      	movs	r3, #0
 8006902:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006904:	2300      	movs	r3, #0
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	e043      	b.n	8006992 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800691c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006920:	d118      	bne.n	8006954 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006934:	461a      	mov	r2, r3
 8006936:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	e013      	b.n	8006966 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694a:	461a      	mov	r2, r3
 800694c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	e008      	b.n	8006966 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006960:	461a      	mov	r2, r3
 8006962:	2300      	movs	r3, #0
 8006964:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006972:	461a      	mov	r2, r3
 8006974:	2300      	movs	r3, #0
 8006976:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006984:	461a      	mov	r2, r3
 8006986:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800698a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	3301      	adds	r3, #1
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	429a      	cmp	r2, r3
 8006998:	d3b7      	bcc.n	800690a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800699a:	2300      	movs	r3, #0
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	e043      	b.n	8006a28 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b6:	d118      	bne.n	80069ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ca:	461a      	mov	r2, r3
 80069cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	e013      	b.n	80069fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e0:	461a      	mov	r2, r3
 80069e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	e008      	b.n	80069fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f6:	461a      	mov	r2, r3
 80069f8:	2300      	movs	r3, #0
 80069fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a08:	461a      	mov	r2, r3
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	3301      	adds	r3, #1
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d3b7      	bcc.n	80069a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d105      	bne.n	8006a64 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f043 0210 	orr.w	r2, r3, #16
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699a      	ldr	r2, [r3, #24]
 8006a68:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <USB_DevInit+0x2c4>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f043 0208 	orr.w	r2, r3, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d107      	bne.n	8006a98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a90:	f043 0304 	orr.w	r3, r3, #4
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aa4:	b004      	add	sp, #16
 8006aa6:	4770      	bx	lr
 8006aa8:	803c3800 	.word	0x803c3800

08006aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a13      	ldr	r2, [pc, #76]	; (8006b10 <USB_FlushTxFifo+0x64>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d901      	bls.n	8006acc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e01b      	b.n	8006b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	daf2      	bge.n	8006aba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	019b      	lsls	r3, r3, #6
 8006adc:	f043 0220 	orr.w	r2, r3, #32
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a08      	ldr	r2, [pc, #32]	; (8006b10 <USB_FlushTxFifo+0x64>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d901      	bls.n	8006af6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e006      	b.n	8006b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d0f0      	beq.n	8006ae4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	00030d40 	.word	0x00030d40

08006b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3301      	adds	r3, #1
 8006b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4a11      	ldr	r2, [pc, #68]	; (8006b70 <USB_FlushRxFifo+0x5c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d901      	bls.n	8006b32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e018      	b.n	8006b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	daf2      	bge.n	8006b20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2210      	movs	r2, #16
 8006b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4a08      	ldr	r2, [pc, #32]	; (8006b70 <USB_FlushRxFifo+0x5c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d901      	bls.n	8006b56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e006      	b.n	8006b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	2b10      	cmp	r3, #16
 8006b60:	d0f0      	beq.n	8006b44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	00030d40 	.word	0x00030d40

08006b74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b94:	4313      	orrs	r3, r2
 8006b96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 0306 	and.w	r3, r3, #6
 8006bbe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]
 8006bca:	e00a      	b.n	8006be2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d002      	beq.n	8006bd8 <USB_GetDevSpeed+0x32>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b06      	cmp	r3, #6
 8006bd6:	d102      	bne.n	8006bde <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	75fb      	strb	r3, [r7, #23]
 8006bdc:	e001      	b.n	8006be2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006bde:	230f      	movs	r3, #15
 8006be0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d13a      	bne.n	8006c82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c12:	69da      	ldr	r2, [r3, #28]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	68f9      	ldr	r1, [r7, #12]
 8006c26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d155      	bne.n	8006cf0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	791b      	ldrb	r3, [r3, #4]
 8006c5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	059b      	lsls	r3, r3, #22
 8006c66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	e036      	b.n	8006cf0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c88:	69da      	ldr	r2, [r3, #28]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	2101      	movs	r1, #1
 8006c94:	fa01 f303 	lsl.w	r3, r1, r3
 8006c98:	041b      	lsls	r3, r3, #16
 8006c9a:	68f9      	ldr	r1, [r7, #12]
 8006c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d11a      	bne.n	8006cf0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	791b      	ldrb	r3, [r3, #4]
 8006cd4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	0151      	lsls	r1, r2, #5
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	785b      	ldrb	r3, [r3, #1]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d161      	bne.n	8006de0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d32:	d11f      	bne.n	8006d74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	f003 030f 	and.w	r3, r3, #15
 8006d84:	2101      	movs	r1, #1
 8006d86:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	43db      	mvns	r3, r3
 8006d8e:	68f9      	ldr	r1, [r7, #12]
 8006d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d94:	4013      	ands	r3, r2
 8006d96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9e:	69da      	ldr	r2, [r3, #28]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	2101      	movs	r1, #1
 8006daa:	fa01 f303 	lsl.w	r3, r1, r3
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	43db      	mvns	r3, r3
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006db8:	4013      	ands	r3, r2
 8006dba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	0159      	lsls	r1, r3, #5
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	440b      	add	r3, r1
 8006dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4b35      	ldr	r3, [pc, #212]	; (8006eb0 <USB_DeactivateEndpoint+0x1b0>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	600b      	str	r3, [r1, #0]
 8006dde:	e060      	b.n	8006ea2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006df6:	d11f      	bne.n	8006e38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	0151      	lsls	r1, r2, #5
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	2101      	movs	r1, #1
 8006e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	43db      	mvns	r3, r3
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e58:	4013      	ands	r3, r2
 8006e5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	f003 030f 	and.w	r3, r3, #15
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e72:	041b      	lsls	r3, r3, #16
 8006e74:	43db      	mvns	r3, r3
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	0159      	lsls	r1, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	440b      	add	r3, r1
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <USB_DeactivateEndpoint+0x1b4>)
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	ec337800 	.word	0xec337800
 8006eb4:	eff37800 	.word	0xeff37800

08006eb8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	; 0x28
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	785b      	ldrb	r3, [r3, #1]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	f040 815c 	bne.w	8007192 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d132      	bne.n	8006f48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	0151      	lsls	r1, r2, #5
 8006ef4:	69fa      	ldr	r2, [r7, #28]
 8006ef6:	440a      	add	r2, r1
 8006ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	0151      	lsls	r1, r2, #5
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	440a      	add	r2, r1
 8006f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f40:	0cdb      	lsrs	r3, r3, #19
 8006f42:	04db      	lsls	r3, r3, #19
 8006f44:	6113      	str	r3, [r2, #16]
 8006f46:	e074      	b.n	8007032 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f62:	0cdb      	lsrs	r3, r3, #19
 8006f64:	04db      	lsls	r3, r3, #19
 8006f66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	0151      	lsls	r1, r2, #5
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	440a      	add	r2, r1
 8006f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	6999      	ldr	r1, [r3, #24]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	440b      	add	r3, r1
 8006fa4:	1e59      	subs	r1, r3, #1
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006fb0:	4b9d      	ldr	r3, [pc, #628]	; (8007228 <USB_EPStartXfer+0x370>)
 8006fb2:	400b      	ands	r3, r1
 8006fb4:	69b9      	ldr	r1, [r7, #24]
 8006fb6:	0148      	lsls	r0, r1, #5
 8006fb8:	69f9      	ldr	r1, [r7, #28]
 8006fba:	4401      	add	r1, r0
 8006fbc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fda:	69b9      	ldr	r1, [r7, #24]
 8006fdc:	0148      	lsls	r0, r1, #5
 8006fde:	69f9      	ldr	r1, [r7, #28]
 8006fe0:	4401      	add	r1, r0
 8006fe2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	791b      	ldrb	r3, [r3, #4]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d11f      	bne.n	8007032 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007010:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	0151      	lsls	r1, r2, #5
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	440a      	add	r2, r1
 8007028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007030:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d14b      	bne.n	80070d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d009      	beq.n	8007054 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704c:	461a      	mov	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	791b      	ldrb	r3, [r3, #4]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d128      	bne.n	80070ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007068:	2b00      	cmp	r3, #0
 800706a:	d110      	bne.n	800708e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	440a      	add	r2, r1
 8007082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007086:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	e00f      	b.n	80070ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e133      	b.n	8007338 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	791b      	ldrb	r3, [r3, #4]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d015      	beq.n	8007124 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 811b 	beq.w	8007338 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	2101      	movs	r1, #1
 8007114:	fa01 f303 	lsl.w	r3, r1, r3
 8007118:	69f9      	ldr	r1, [r7, #28]
 800711a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800711e:	4313      	orrs	r3, r2
 8007120:	634b      	str	r3, [r1, #52]	; 0x34
 8007122:	e109      	b.n	8007338 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007130:	2b00      	cmp	r3, #0
 8007132:	d110      	bne.n	8007156 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	440a      	add	r2, r1
 800714a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800714e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	e00f      	b.n	8007176 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	0151      	lsls	r1, r2, #5
 8007168:	69fa      	ldr	r2, [r7, #28]
 800716a:	440a      	add	r2, r1
 800716c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007174:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6919      	ldr	r1, [r3, #16]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	781a      	ldrb	r2, [r3, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	b298      	uxth	r0, r3
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	4603      	mov	r3, r0
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fade 	bl	800774c <USB_WritePacket>
 8007190:	e0d2      	b.n	8007338 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	0151      	lsls	r1, r2, #5
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	440a      	add	r2, r1
 80071a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ac:	0cdb      	lsrs	r3, r3, #19
 80071ae:	04db      	lsls	r3, r3, #19
 80071b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d126      	bne.n	800722c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ea:	691a      	ldr	r2, [r3, #16]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071f4:	69b9      	ldr	r1, [r7, #24]
 80071f6:	0148      	lsls	r0, r1, #5
 80071f8:	69f9      	ldr	r1, [r7, #28]
 80071fa:	4401      	add	r1, r0
 80071fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007200:	4313      	orrs	r3, r2
 8007202:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	0151      	lsls	r1, r2, #5
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	440a      	add	r2, r1
 800721a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800721e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007222:	6113      	str	r3, [r2, #16]
 8007224:	e03a      	b.n	800729c <USB_EPStartXfer+0x3e4>
 8007226:	bf00      	nop
 8007228:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	699a      	ldr	r2, [r3, #24]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4413      	add	r3, r2
 8007236:	1e5a      	subs	r2, r3, #1
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007240:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	8afa      	ldrh	r2, [r7, #22]
 8007248:	fb03 f202 	mul.w	r2, r3, r2
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	8afb      	ldrh	r3, [r7, #22]
 8007260:	04d9      	lsls	r1, r3, #19
 8007262:	4b38      	ldr	r3, [pc, #224]	; (8007344 <USB_EPStartXfer+0x48c>)
 8007264:	400b      	ands	r3, r1
 8007266:	69b9      	ldr	r1, [r7, #24]
 8007268:	0148      	lsls	r0, r1, #5
 800726a:	69f9      	ldr	r1, [r7, #28]
 800726c:	4401      	add	r1, r0
 800726e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007272:	4313      	orrs	r3, r2
 8007274:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800728c:	69b9      	ldr	r1, [r7, #24]
 800728e:	0148      	lsls	r0, r1, #5
 8007290:	69f9      	ldr	r1, [r7, #28]
 8007292:	4401      	add	r1, r0
 8007294:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007298:	4313      	orrs	r3, r2
 800729a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d10d      	bne.n	80072be <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6919      	ldr	r1, [r3, #16]
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ba:	460a      	mov	r2, r1
 80072bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	791b      	ldrb	r3, [r3, #4]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d128      	bne.n	8007318 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d110      	bne.n	80072f8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	69fa      	ldr	r2, [r7, #28]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	e00f      	b.n	8007318 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	0151      	lsls	r1, r2, #5
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	440a      	add	r2, r1
 800730e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007316:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	440a      	add	r2, r1
 800732e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007332:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007336:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3720      	adds	r7, #32
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	1ff80000 	.word	0x1ff80000

08007348 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	4613      	mov	r3, r2
 8007354:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b01      	cmp	r3, #1
 8007366:	f040 80ce 	bne.w	8007506 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d132      	bne.n	80073d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007390:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007394:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	0151      	lsls	r1, r2, #5
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	440a      	add	r2, r1
 80073cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d0:	0cdb      	lsrs	r3, r3, #19
 80073d2:	04db      	lsls	r3, r3, #19
 80073d4:	6113      	str	r3, [r2, #16]
 80073d6:	e04e      	b.n	8007476 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	0151      	lsls	r1, r2, #5
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	440a      	add	r2, r1
 80073ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f2:	0cdb      	lsrs	r3, r3, #19
 80073f4:	04db      	lsls	r3, r3, #19
 80073f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	0151      	lsls	r1, r2, #5
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	440a      	add	r2, r1
 800740e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007412:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007416:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800741a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	699a      	ldr	r2, [r3, #24]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	429a      	cmp	r2, r3
 8007426:	d903      	bls.n	8007430 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	440a      	add	r2, r1
 8007446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800744e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745c:	691a      	ldr	r2, [r3, #16]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007466:	6939      	ldr	r1, [r7, #16]
 8007468:	0148      	lsls	r0, r1, #5
 800746a:	6979      	ldr	r1, [r7, #20]
 800746c:	4401      	add	r1, r0
 800746e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007472:	4313      	orrs	r3, r2
 8007474:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d11e      	bne.n	80074ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d009      	beq.n	8007498 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	461a      	mov	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	0151      	lsls	r1, r2, #5
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	440a      	add	r2, r1
 80074ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	e097      	b.n	80075ea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	0151      	lsls	r1, r2, #5
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	440a      	add	r2, r1
 80074d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 8083 	beq.w	80075ea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	2101      	movs	r1, #1
 80074f6:	fa01 f303 	lsl.w	r3, r1, r3
 80074fa:	6979      	ldr	r1, [r7, #20]
 80074fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007500:	4313      	orrs	r3, r2
 8007502:	634b      	str	r3, [r1, #52]	; 0x34
 8007504:	e071      	b.n	80075ea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	440a      	add	r2, r1
 800751c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007520:	0cdb      	lsrs	r3, r3, #19
 8007522:	04db      	lsls	r3, r3, #19
 8007524:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	0151      	lsls	r1, r2, #5
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	440a      	add	r2, r1
 800753c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007540:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007544:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007548:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	0151      	lsls	r1, r2, #5
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	440a      	add	r2, r1
 8007578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800757c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007580:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007598:	6939      	ldr	r1, [r7, #16]
 800759a:	0148      	lsls	r0, r1, #5
 800759c:	6979      	ldr	r1, [r7, #20]
 800759e:	4401      	add	r1, r0
 80075a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075a4:	4313      	orrs	r3, r2
 80075a6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d10d      	bne.n	80075ca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6919      	ldr	r1, [r3, #16]
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c6:	460a      	mov	r2, r1
 80075c8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	0151      	lsls	r1, r2, #5
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	440a      	add	r2, r1
 80075e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	785b      	ldrb	r3, [r3, #1]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d14a      	bne.n	80076ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800762a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800762e:	f040 8086 	bne.w	800773e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	7812      	ldrb	r2, [r2, #0]
 8007646:	0151      	lsls	r1, r2, #5
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	440a      	add	r2, r1
 800764c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007650:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007654:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	7812      	ldrb	r2, [r2, #0]
 800766a:	0151      	lsls	r1, r2, #5
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	440a      	add	r2, r1
 8007670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007678:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3301      	adds	r3, #1
 800767e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f242 7210 	movw	r2, #10000	; 0x2710
 8007686:	4293      	cmp	r3, r2
 8007688:	d902      	bls.n	8007690 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	75fb      	strb	r3, [r7, #23]
          break;
 800768e:	e056      	b.n	800773e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076a8:	d0e7      	beq.n	800767a <USB_EPStopXfer+0x82>
 80076aa:	e048      	b.n	800773e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076c4:	d13b      	bne.n	800773e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	7812      	ldrb	r2, [r2, #0]
 80076da:	0151      	lsls	r1, r2, #5
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	440a      	add	r2, r1
 80076e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	7812      	ldrb	r2, [r2, #0]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800770c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3301      	adds	r3, #1
 8007712:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f242 7210 	movw	r2, #10000	; 0x2710
 800771a:	4293      	cmp	r3, r2
 800771c:	d902      	bls.n	8007724 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	75fb      	strb	r3, [r7, #23]
          break;
 8007722:	e00c      	b.n	800773e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800773c:	d0e7      	beq.n	800770e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800773e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007740:	4618      	mov	r0, r3
 8007742:	371c      	adds	r7, #28
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800774c:	b480      	push	{r7}
 800774e:	b089      	sub	sp, #36	; 0x24
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4611      	mov	r1, r2
 8007758:	461a      	mov	r2, r3
 800775a:	460b      	mov	r3, r1
 800775c:	71fb      	strb	r3, [r7, #7]
 800775e:	4613      	mov	r3, r2
 8007760:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800776a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800776e:	2b00      	cmp	r3, #0
 8007770:	d123      	bne.n	80077ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007772:	88bb      	ldrh	r3, [r7, #4]
 8007774:	3303      	adds	r3, #3
 8007776:	089b      	lsrs	r3, r3, #2
 8007778:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800777a:	2300      	movs	r3, #0
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	e018      	b.n	80077b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	031a      	lsls	r2, r3, #12
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	4413      	add	r3, r2
 8007788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800778c:	461a      	mov	r2, r3
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	3301      	adds	r3, #1
 8007798:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	3301      	adds	r3, #1
 800779e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	3301      	adds	r3, #1
 80077a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	3301      	adds	r3, #1
 80077aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	3301      	adds	r3, #1
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d3e2      	bcc.n	8007780 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3724      	adds	r7, #36	; 0x24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b08b      	sub	sp, #44	; 0x2c
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	089b      	lsrs	r3, r3, #2
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80077e6:	88fb      	ldrh	r3, [r7, #6]
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80077ee:	2300      	movs	r3, #0
 80077f0:	623b      	str	r3, [r7, #32]
 80077f2:	e014      	b.n	800781e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	3301      	adds	r3, #1
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	3301      	adds	r3, #1
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	3301      	adds	r3, #1
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	3301      	adds	r3, #1
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	3301      	adds	r3, #1
 800781c:	623b      	str	r3, [r7, #32]
 800781e:	6a3a      	ldr	r2, [r7, #32]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	429a      	cmp	r2, r3
 8007824:	d3e6      	bcc.n	80077f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007826:	8bfb      	ldrh	r3, [r7, #30]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01e      	beq.n	800786a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007836:	461a      	mov	r2, r3
 8007838:	f107 0310 	add.w	r3, r7, #16
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	b2db      	uxtb	r3, r3
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	fa22 f303 	lsr.w	r3, r2, r3
 800784c:	b2da      	uxtb	r2, r3
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	701a      	strb	r2, [r3, #0]
      i++;
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	3301      	adds	r3, #1
 8007856:	623b      	str	r3, [r7, #32]
      pDest++;
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	3301      	adds	r3, #1
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800785e:	8bfb      	ldrh	r3, [r7, #30]
 8007860:	3b01      	subs	r3, #1
 8007862:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007864:	8bfb      	ldrh	r3, [r7, #30]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1ea      	bne.n	8007840 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800786c:	4618      	mov	r0, r3
 800786e:	372c      	adds	r7, #44	; 0x2c
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	785b      	ldrb	r3, [r3, #1]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d12c      	bne.n	80078ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	db12      	blt.n	80078cc <USB_EPSetStall+0x54>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00f      	beq.n	80078cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	e02b      	b.n	8007946 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	db12      	blt.n	8007926 <USB_EPSetStall+0xae>
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00f      	beq.n	8007926 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	440a      	add	r2, r1
 800791c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007920:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007924:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	0151      	lsls	r1, r2, #5
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	440a      	add	r2, r1
 800793c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007944:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d128      	bne.n	80079c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	0151      	lsls	r1, r2, #5
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	440a      	add	r2, r1
 8007986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800798a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800798e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	791b      	ldrb	r3, [r3, #4]
 8007994:	2b03      	cmp	r3, #3
 8007996:	d003      	beq.n	80079a0 <USB_EPClearStall+0x4c>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	791b      	ldrb	r3, [r3, #4]
 800799c:	2b02      	cmp	r3, #2
 800799e:	d138      	bne.n	8007a12 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	0151      	lsls	r1, r2, #5
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	440a      	add	r2, r1
 80079b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	e027      	b.n	8007a12 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	0151      	lsls	r1, r2, #5
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	440a      	add	r2, r1
 80079d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	791b      	ldrb	r3, [r3, #4]
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d003      	beq.n	80079f2 <USB_EPClearStall+0x9e>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	791b      	ldrb	r3, [r3, #4]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d10f      	bne.n	8007a12 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	0151      	lsls	r1, r2, #5
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	440a      	add	r2, r1
 8007a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a10:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a3e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a42:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	011b      	lsls	r3, r3, #4
 8007a50:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007a54:	68f9      	ldr	r1, [r7, #12]
 8007a56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a86:	f023 0303 	bic.w	r3, r3, #3
 8007a8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a9a:	f023 0302 	bic.w	r3, r3, #2
 8007a9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b085      	sub	sp, #20
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ac8:	f023 0303 	bic.w	r3, r3, #3
 8007acc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007adc:	f043 0302 	orr.w	r3, r3, #2
 8007ae0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	4013      	ands	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b08:	68fb      	ldr	r3, [r7, #12]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	4013      	ands	r3, r2
 8007b38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	0c1b      	lsrs	r3, r3, #16
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b085      	sub	sp, #20
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	b29b      	uxth	r3, r3
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b085      	sub	sp, #20
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b8e:	78fb      	ldrb	r3, [r7, #3]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	4013      	ands	r3, r2
 8007baa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bac:	68bb      	ldr	r3, [r7, #8]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b087      	sub	sp, #28
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bdc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007bde:	78fb      	ldrb	r3, [r7, #3]
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bea:	01db      	lsls	r3, r3, #7
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4013      	ands	r3, r2
 8007c06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c08:	68bb      	ldr	r3, [r7, #8]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	f003 0301 	and.w	r3, r3, #1
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b085      	sub	sp, #20
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c50:	f023 0307 	bic.w	r3, r3, #7
 8007c54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	460b      	mov	r3, r1
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	333c      	adds	r3, #60	; 0x3c
 8007c8e:	3304      	adds	r3, #4
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	4a26      	ldr	r2, [pc, #152]	; (8007d30 <USB_EP0_OutStart+0xb8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d90a      	bls.n	8007cb2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cac:	d101      	bne.n	8007cb2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	e037      	b.n	8007d22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb8:	461a      	mov	r2, r3
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ccc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce0:	f043 0318 	orr.w	r3, r3, #24
 8007ce4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cf4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007cf8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007cfa:	7afb      	ldrb	r3, [r7, #11]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d10f      	bne.n	8007d20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d06:	461a      	mov	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007d1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	4f54300a 	.word	0x4f54300a

08007d34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3301      	adds	r3, #1
 8007d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4a13      	ldr	r2, [pc, #76]	; (8007d98 <USB_CoreReset+0x64>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d901      	bls.n	8007d52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e01b      	b.n	8007d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	daf2      	bge.n	8007d40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f043 0201 	orr.w	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a09      	ldr	r2, [pc, #36]	; (8007d98 <USB_CoreReset+0x64>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d901      	bls.n	8007d7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e006      	b.n	8007d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d0f0      	beq.n	8007d6a <USB_CoreReset+0x36>

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	00030d40 	.word	0x00030d40

08007d9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007da8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007dac:	f002 feb0 	bl	800ab10 <USBD_static_malloc>
 8007db0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d109      	bne.n	8007dcc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	32b0      	adds	r2, #176	; 0xb0
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007dc8:	2302      	movs	r3, #2
 8007dca:	e0d4      	b.n	8007f76 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007dcc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f002 ff0e 	bl	800abf4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	32b0      	adds	r2, #176	; 0xb0
 8007de2:	68f9      	ldr	r1, [r7, #12]
 8007de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	32b0      	adds	r2, #176	; 0xb0
 8007df2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	7c1b      	ldrb	r3, [r3, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d138      	bne.n	8007e76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e04:	4b5e      	ldr	r3, [pc, #376]	; (8007f80 <USBD_CDC_Init+0x1e4>)
 8007e06:	7819      	ldrb	r1, [r3, #0]
 8007e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f002 fd5b 	bl	800a8ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e14:	4b5a      	ldr	r3, [pc, #360]	; (8007f80 <USBD_CDC_Init+0x1e4>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	f003 020f 	and.w	r2, r3, #15
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	440b      	add	r3, r1
 8007e28:	3324      	adds	r3, #36	; 0x24
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e2e:	4b55      	ldr	r3, [pc, #340]	; (8007f84 <USBD_CDC_Init+0x1e8>)
 8007e30:	7819      	ldrb	r1, [r3, #0]
 8007e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e36:	2202      	movs	r2, #2
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f002 fd46 	bl	800a8ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007e3e:	4b51      	ldr	r3, [pc, #324]	; (8007f84 <USBD_CDC_Init+0x1e8>)
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	f003 020f 	and.w	r2, r3, #15
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e56:	2201      	movs	r2, #1
 8007e58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007e5a:	4b4b      	ldr	r3, [pc, #300]	; (8007f88 <USBD_CDC_Init+0x1ec>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	f003 020f 	and.w	r2, r3, #15
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	3326      	adds	r3, #38	; 0x26
 8007e70:	2210      	movs	r2, #16
 8007e72:	801a      	strh	r2, [r3, #0]
 8007e74:	e035      	b.n	8007ee2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e76:	4b42      	ldr	r3, [pc, #264]	; (8007f80 <USBD_CDC_Init+0x1e4>)
 8007e78:	7819      	ldrb	r1, [r3, #0]
 8007e7a:	2340      	movs	r3, #64	; 0x40
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f002 fd23 	bl	800a8ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e84:	4b3e      	ldr	r3, [pc, #248]	; (8007f80 <USBD_CDC_Init+0x1e4>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	f003 020f 	and.w	r2, r3, #15
 8007e8c:	6879      	ldr	r1, [r7, #4]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	440b      	add	r3, r1
 8007e98:	3324      	adds	r3, #36	; 0x24
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e9e:	4b39      	ldr	r3, [pc, #228]	; (8007f84 <USBD_CDC_Init+0x1e8>)
 8007ea0:	7819      	ldrb	r1, [r3, #0]
 8007ea2:	2340      	movs	r3, #64	; 0x40
 8007ea4:	2202      	movs	r2, #2
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f002 fd0f 	bl	800a8ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007eac:	4b35      	ldr	r3, [pc, #212]	; (8007f84 <USBD_CDC_Init+0x1e8>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	f003 020f 	and.w	r2, r3, #15
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	440b      	add	r3, r1
 8007ec0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ec8:	4b2f      	ldr	r3, [pc, #188]	; (8007f88 <USBD_CDC_Init+0x1ec>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f003 020f 	and.w	r2, r3, #15
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	440b      	add	r3, r1
 8007edc:	3326      	adds	r3, #38	; 0x26
 8007ede:	2210      	movs	r2, #16
 8007ee0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ee2:	4b29      	ldr	r3, [pc, #164]	; (8007f88 <USBD_CDC_Init+0x1ec>)
 8007ee4:	7819      	ldrb	r1, [r3, #0]
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	2203      	movs	r2, #3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f002 fced 	bl	800a8ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007ef0:	4b25      	ldr	r3, [pc, #148]	; (8007f88 <USBD_CDC_Init+0x1ec>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	f003 020f 	and.w	r2, r3, #15
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	440b      	add	r3, r1
 8007f04:	3324      	adds	r3, #36	; 0x24
 8007f06:	2201      	movs	r2, #1
 8007f08:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	33b0      	adds	r3, #176	; 0xb0
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007f40:	2302      	movs	r3, #2
 8007f42:	e018      	b.n	8007f76 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	7c1b      	ldrb	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10a      	bne.n	8007f62 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f4c:	4b0d      	ldr	r3, [pc, #52]	; (8007f84 <USBD_CDC_Init+0x1e8>)
 8007f4e:	7819      	ldrb	r1, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f002 fda4 	bl	800aaa8 <USBD_LL_PrepareReceive>
 8007f60:	e008      	b.n	8007f74 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f62:	4b08      	ldr	r3, [pc, #32]	; (8007f84 <USBD_CDC_Init+0x1e8>)
 8007f64:	7819      	ldrb	r1, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f6c:	2340      	movs	r3, #64	; 0x40
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f002 fd9a 	bl	800aaa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000097 	.word	0x20000097
 8007f84:	20000098 	.word	0x20000098
 8007f88:	20000099 	.word	0x20000099

08007f8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007f98:	4b3a      	ldr	r3, [pc, #232]	; (8008084 <USBD_CDC_DeInit+0xf8>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f002 fcb9 	bl	800a916 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007fa4:	4b37      	ldr	r3, [pc, #220]	; (8008084 <USBD_CDC_DeInit+0xf8>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	f003 020f 	and.w	r2, r3, #15
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	440b      	add	r3, r1
 8007fb8:	3324      	adds	r3, #36	; 0x24
 8007fba:	2200      	movs	r2, #0
 8007fbc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007fbe:	4b32      	ldr	r3, [pc, #200]	; (8008088 <USBD_CDC_DeInit+0xfc>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f002 fca6 	bl	800a916 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007fca:	4b2f      	ldr	r3, [pc, #188]	; (8008088 <USBD_CDC_DeInit+0xfc>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	f003 020f 	and.w	r2, r3, #15
 8007fd2:	6879      	ldr	r1, [r7, #4]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007fe6:	4b29      	ldr	r3, [pc, #164]	; (800808c <USBD_CDC_DeInit+0x100>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f002 fc92 	bl	800a916 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007ff2:	4b26      	ldr	r3, [pc, #152]	; (800808c <USBD_CDC_DeInit+0x100>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	f003 020f 	and.w	r2, r3, #15
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	3324      	adds	r3, #36	; 0x24
 8008008:	2200      	movs	r2, #0
 800800a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800800c:	4b1f      	ldr	r3, [pc, #124]	; (800808c <USBD_CDC_DeInit+0x100>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	f003 020f 	and.w	r2, r3, #15
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	4613      	mov	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	440b      	add	r3, r1
 8008020:	3326      	adds	r3, #38	; 0x26
 8008022:	2200      	movs	r2, #0
 8008024:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	32b0      	adds	r2, #176	; 0xb0
 8008030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01f      	beq.n	8008078 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	33b0      	adds	r3, #176	; 0xb0
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	32b0      	adds	r2, #176	; 0xb0
 8008056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805a:	4618      	mov	r0, r3
 800805c:	f002 fd66 	bl	800ab2c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	32b0      	adds	r2, #176	; 0xb0
 800806a:	2100      	movs	r1, #0
 800806c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000097 	.word	0x20000097
 8008088:	20000098 	.word	0x20000098
 800808c:	20000099 	.word	0x20000099

08008090 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	32b0      	adds	r2, #176	; 0xb0
 80080a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80080bc:	2303      	movs	r3, #3
 80080be:	e0bf      	b.n	8008240 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d050      	beq.n	800816e <USBD_CDC_Setup+0xde>
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	f040 80af 	bne.w	8008230 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	88db      	ldrh	r3, [r3, #6]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d03a      	beq.n	8008150 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b25b      	sxtb	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	da1b      	bge.n	800811c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	33b0      	adds	r3, #176	; 0xb0
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80080fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	88d2      	ldrh	r2, [r2, #6]
 8008100:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	88db      	ldrh	r3, [r3, #6]
 8008106:	2b07      	cmp	r3, #7
 8008108:	bf28      	it	cs
 800810a:	2307      	movcs	r3, #7
 800810c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	89fa      	ldrh	r2, [r7, #14]
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 fd89 	bl	8009c2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800811a:	e090      	b.n	800823e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	785a      	ldrb	r2, [r3, #1]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	88db      	ldrh	r3, [r3, #6]
 800812a:	2b3f      	cmp	r3, #63	; 0x3f
 800812c:	d803      	bhi.n	8008136 <USBD_CDC_Setup+0xa6>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	88db      	ldrh	r3, [r3, #6]
 8008132:	b2da      	uxtb	r2, r3
 8008134:	e000      	b.n	8008138 <USBD_CDC_Setup+0xa8>
 8008136:	2240      	movs	r2, #64	; 0x40
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800813e:	6939      	ldr	r1, [r7, #16]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008146:	461a      	mov	r2, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f001 fd9b 	bl	8009c84 <USBD_CtlPrepareRx>
      break;
 800814e:	e076      	b.n	800823e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	33b0      	adds	r3, #176	; 0xb0
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	7850      	ldrb	r0, [r2, #1]
 8008166:	2200      	movs	r2, #0
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	4798      	blx	r3
      break;
 800816c:	e067      	b.n	800823e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	785b      	ldrb	r3, [r3, #1]
 8008172:	2b0b      	cmp	r3, #11
 8008174:	d851      	bhi.n	800821a <USBD_CDC_Setup+0x18a>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <USBD_CDC_Setup+0xec>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	080081ad 	.word	0x080081ad
 8008180:	08008229 	.word	0x08008229
 8008184:	0800821b 	.word	0x0800821b
 8008188:	0800821b 	.word	0x0800821b
 800818c:	0800821b 	.word	0x0800821b
 8008190:	0800821b 	.word	0x0800821b
 8008194:	0800821b 	.word	0x0800821b
 8008198:	0800821b 	.word	0x0800821b
 800819c:	0800821b 	.word	0x0800821b
 80081a0:	0800821b 	.word	0x0800821b
 80081a4:	080081d7 	.word	0x080081d7
 80081a8:	08008201 	.word	0x08008201
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d107      	bne.n	80081c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80081b8:	f107 030a 	add.w	r3, r7, #10
 80081bc:	2202      	movs	r2, #2
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 fd33 	bl	8009c2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081c6:	e032      	b.n	800822e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fcbd 	bl	8009b4a <USBD_CtlError>
            ret = USBD_FAIL;
 80081d0:	2303      	movs	r3, #3
 80081d2:	75fb      	strb	r3, [r7, #23]
          break;
 80081d4:	e02b      	b.n	800822e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d107      	bne.n	80081f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80081e2:	f107 030d 	add.w	r3, r7, #13
 80081e6:	2201      	movs	r2, #1
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 fd1e 	bl	8009c2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081f0:	e01d      	b.n	800822e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 fca8 	bl	8009b4a <USBD_CtlError>
            ret = USBD_FAIL;
 80081fa:	2303      	movs	r3, #3
 80081fc:	75fb      	strb	r3, [r7, #23]
          break;
 80081fe:	e016      	b.n	800822e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b03      	cmp	r3, #3
 800820a:	d00f      	beq.n	800822c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f001 fc9b 	bl	8009b4a <USBD_CtlError>
            ret = USBD_FAIL;
 8008214:	2303      	movs	r3, #3
 8008216:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008218:	e008      	b.n	800822c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 fc94 	bl	8009b4a <USBD_CtlError>
          ret = USBD_FAIL;
 8008222:	2303      	movs	r3, #3
 8008224:	75fb      	strb	r3, [r7, #23]
          break;
 8008226:	e002      	b.n	800822e <USBD_CDC_Setup+0x19e>
          break;
 8008228:	bf00      	nop
 800822a:	e008      	b.n	800823e <USBD_CDC_Setup+0x1ae>
          break;
 800822c:	bf00      	nop
      }
      break;
 800822e:	e006      	b.n	800823e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 fc89 	bl	8009b4a <USBD_CtlError>
      ret = USBD_FAIL;
 8008238:	2303      	movs	r3, #3
 800823a:	75fb      	strb	r3, [r7, #23]
      break;
 800823c:	bf00      	nop
  }

  return (uint8_t)ret;
 800823e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800825a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	32b0      	adds	r2, #176	; 0xb0
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800826e:	2303      	movs	r3, #3
 8008270:	e065      	b.n	800833e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	32b0      	adds	r2, #176	; 0xb0
 800827c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008280:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008282:	78fb      	ldrb	r3, [r7, #3]
 8008284:	f003 020f 	and.w	r2, r3, #15
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	440b      	add	r3, r1
 8008294:	3318      	adds	r3, #24
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d02f      	beq.n	80082fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800829c:	78fb      	ldrb	r3, [r7, #3]
 800829e:	f003 020f 	and.w	r2, r3, #15
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	3318      	adds	r3, #24
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	78fb      	ldrb	r3, [r7, #3]
 80082b4:	f003 010f 	and.w	r1, r3, #15
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	460b      	mov	r3, r1
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	440b      	add	r3, r1
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4403      	add	r3, r0
 80082c4:	3348      	adds	r3, #72	; 0x48
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80082cc:	fb01 f303 	mul.w	r3, r1, r3
 80082d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d112      	bne.n	80082fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80082d6:	78fb      	ldrb	r3, [r7, #3]
 80082d8:	f003 020f 	and.w	r2, r3, #15
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	3318      	adds	r3, #24
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082ee:	78f9      	ldrb	r1, [r7, #3]
 80082f0:	2300      	movs	r3, #0
 80082f2:	2200      	movs	r2, #0
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f002 fbb6 	bl	800aa66 <USBD_LL_Transmit>
 80082fa:	e01f      	b.n	800833c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	33b0      	adds	r3, #176	; 0xb0
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d010      	beq.n	800833c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	33b0      	adds	r3, #176	; 0xb0
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008338:	78fa      	ldrb	r2, [r7, #3]
 800833a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	32b0      	adds	r2, #176	; 0xb0
 800835c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008360:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	32b0      	adds	r2, #176	; 0xb0
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008374:	2303      	movs	r3, #3
 8008376:	e01a      	b.n	80083ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f002 fbb4 	bl	800aaea <USBD_LL_GetRxDataSize>
 8008382:	4602      	mov	r2, r0
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	33b0      	adds	r3, #176	; 0xb0
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80083a8:	4611      	mov	r1, r2
 80083aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	32b0      	adds	r2, #176	; 0xb0
 80083c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e025      	b.n	8008424 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	33b0      	adds	r3, #176	; 0xb0
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01a      	beq.n	8008422 <USBD_CDC_EP0_RxReady+0x6c>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80083f2:	2bff      	cmp	r3, #255	; 0xff
 80083f4:	d015      	beq.n	8008422 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	33b0      	adds	r3, #176	; 0xb0
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800840e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008416:	b292      	uxth	r2, r2
 8008418:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	22ff      	movs	r2, #255	; 0xff
 800841e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008434:	2182      	movs	r1, #130	; 0x82
 8008436:	4818      	ldr	r0, [pc, #96]	; (8008498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008438:	f000 fd4f 	bl	8008eda <USBD_GetEpDesc>
 800843c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800843e:	2101      	movs	r1, #1
 8008440:	4815      	ldr	r0, [pc, #84]	; (8008498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008442:	f000 fd4a 	bl	8008eda <USBD_GetEpDesc>
 8008446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008448:	2181      	movs	r1, #129	; 0x81
 800844a:	4813      	ldr	r0, [pc, #76]	; (8008498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800844c:	f000 fd45 	bl	8008eda <USBD_GetEpDesc>
 8008450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2210      	movs	r2, #16
 800845c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d006      	beq.n	8008472 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2200      	movs	r2, #0
 8008468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800846c:	711a      	strb	r2, [r3, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d006      	beq.n	8008486 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008480:	711a      	strb	r2, [r3, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2243      	movs	r2, #67	; 0x43
 800848a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800848c:	4b02      	ldr	r3, [pc, #8]	; (8008498 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20000054 	.word	0x20000054

0800849c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084a4:	2182      	movs	r1, #130	; 0x82
 80084a6:	4818      	ldr	r0, [pc, #96]	; (8008508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084a8:	f000 fd17 	bl	8008eda <USBD_GetEpDesc>
 80084ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084ae:	2101      	movs	r1, #1
 80084b0:	4815      	ldr	r0, [pc, #84]	; (8008508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084b2:	f000 fd12 	bl	8008eda <USBD_GetEpDesc>
 80084b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084b8:	2181      	movs	r1, #129	; 0x81
 80084ba:	4813      	ldr	r0, [pc, #76]	; (8008508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084bc:	f000 fd0d 	bl	8008eda <USBD_GetEpDesc>
 80084c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2210      	movs	r2, #16
 80084cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d006      	beq.n	80084e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	2200      	movs	r2, #0
 80084d8:	711a      	strb	r2, [r3, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f042 0202 	orr.w	r2, r2, #2
 80084e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d006      	beq.n	80084f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	711a      	strb	r2, [r3, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f042 0202 	orr.w	r2, r2, #2
 80084f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2243      	movs	r2, #67	; 0x43
 80084fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80084fc:	4b02      	ldr	r3, [pc, #8]	; (8008508 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20000054 	.word	0x20000054

0800850c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008514:	2182      	movs	r1, #130	; 0x82
 8008516:	4818      	ldr	r0, [pc, #96]	; (8008578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008518:	f000 fcdf 	bl	8008eda <USBD_GetEpDesc>
 800851c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800851e:	2101      	movs	r1, #1
 8008520:	4815      	ldr	r0, [pc, #84]	; (8008578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008522:	f000 fcda 	bl	8008eda <USBD_GetEpDesc>
 8008526:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008528:	2181      	movs	r1, #129	; 0x81
 800852a:	4813      	ldr	r0, [pc, #76]	; (8008578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800852c:	f000 fcd5 	bl	8008eda <USBD_GetEpDesc>
 8008530:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2210      	movs	r2, #16
 800853c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d006      	beq.n	8008552 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	2200      	movs	r2, #0
 8008548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800854c:	711a      	strb	r2, [r3, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d006      	beq.n	8008566 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008560:	711a      	strb	r2, [r3, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2243      	movs	r2, #67	; 0x43
 800856a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800856c:	4b02      	ldr	r3, [pc, #8]	; (8008578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20000054 	.word	0x20000054

0800857c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	220a      	movs	r2, #10
 8008588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800858a:	4b03      	ldr	r3, [pc, #12]	; (8008598 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800858c:	4618      	mov	r0, r3
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	20000010 	.word	0x20000010

0800859c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e009      	b.n	80085c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	33b0      	adds	r3, #176	; 0xb0
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	32b0      	adds	r2, #176	; 0xb0
 80085e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ea:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e008      	b.n	8008608 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	32b0      	adds	r2, #176	; 0xb0
 8008628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008634:	2303      	movs	r3, #3
 8008636:	e004      	b.n	8008642 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
	...

08008650 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	32b0      	adds	r2, #176	; 0xb0
 8008662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008666:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008668:	2301      	movs	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	32b0      	adds	r2, #176	; 0xb0
 8008676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800867e:	2303      	movs	r3, #3
 8008680:	e025      	b.n	80086ce <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008688:	2b00      	cmp	r3, #0
 800868a:	d11f      	bne.n	80086cc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	2201      	movs	r2, #1
 8008690:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008694:	4b10      	ldr	r3, [pc, #64]	; (80086d8 <USBD_CDC_TransmitPacket+0x88>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	f003 020f 	and.w	r2, r3, #15
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4403      	add	r3, r0
 80086ae:	3318      	adds	r3, #24
 80086b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80086b2:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <USBD_CDC_TransmitPacket+0x88>)
 80086b4:	7819      	ldrb	r1, [r3, #0]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f002 f9cf 	bl	800aa66 <USBD_LL_Transmit>

    ret = USBD_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	20000097 	.word	0x20000097

080086dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	32b0      	adds	r2, #176	; 0xb0
 80086ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	32b0      	adds	r2, #176	; 0xb0
 80086fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008706:	2303      	movs	r3, #3
 8008708:	e018      	b.n	800873c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7c1b      	ldrb	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10a      	bne.n	8008728 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008712:	4b0c      	ldr	r3, [pc, #48]	; (8008744 <USBD_CDC_ReceivePacket+0x68>)
 8008714:	7819      	ldrb	r1, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800871c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f002 f9c1 	bl	800aaa8 <USBD_LL_PrepareReceive>
 8008726:	e008      	b.n	800873a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008728:	4b06      	ldr	r3, [pc, #24]	; (8008744 <USBD_CDC_ReceivePacket+0x68>)
 800872a:	7819      	ldrb	r1, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008732:	2340      	movs	r3, #64	; 0x40
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f002 f9b7 	bl	800aaa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20000098 	.word	0x20000098

08008748 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	4613      	mov	r3, r2
 8008754:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	e01f      	b.n	80087a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	79fa      	ldrb	r2, [r7, #7]
 8008792:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f002 f831 	bl	800a7fc <USBD_LL_Init>
 800879a:	4603      	mov	r3, r0
 800879c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	e025      	b.n	800880c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	32ae      	adds	r2, #174	; 0xae
 80087d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00f      	beq.n	80087fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	32ae      	adds	r2, #174	; 0xae
 80087e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	f107 020e 	add.w	r2, r7, #14
 80087f0:	4610      	mov	r0, r2
 80087f2:	4798      	blx	r3
 80087f4:	4602      	mov	r2, r0
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f002 f839 	bl	800a894 <USBD_LL_Start>
 8008822:	4603      	mov	r3, r0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008834:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008858:	2b00      	cmp	r3, #0
 800885a:	d009      	beq.n	8008870 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	78fa      	ldrb	r2, [r7, #3]
 8008866:	4611      	mov	r1, r2
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	4798      	blx	r3
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	78fa      	ldrb	r2, [r7, #3]
 8008894:	4611      	mov	r1, r2
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	4798      	blx	r3
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80088a0:	2303      	movs	r3, #3
 80088a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 f908 	bl	8009ad6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80088d4:	461a      	mov	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d01a      	beq.n	8008920 <USBD_LL_SetupStage+0x72>
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d822      	bhi.n	8008934 <USBD_LL_SetupStage+0x86>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <USBD_LL_SetupStage+0x4a>
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d00a      	beq.n	800890c <USBD_LL_SetupStage+0x5e>
 80088f6:	e01d      	b.n	8008934 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fb5f 	bl	8008fc4 <USBD_StdDevReq>
 8008906:	4603      	mov	r3, r0
 8008908:	73fb      	strb	r3, [r7, #15]
      break;
 800890a:	e020      	b.n	800894e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fbc7 	bl	80090a8 <USBD_StdItfReq>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]
      break;
 800891e:	e016      	b.n	800894e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fc29 	bl	8009180 <USBD_StdEPReq>
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]
      break;
 8008932:	e00c      	b.n	800894e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800893a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800893e:	b2db      	uxtb	r3, r3
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f002 f806 	bl	800a954 <USBD_LL_StallEP>
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]
      break;
 800894c:	bf00      	nop
  }

  return ret;
 800894e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	460b      	mov	r3, r1
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800896a:	7afb      	ldrb	r3, [r7, #11]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d16e      	bne.n	8008a4e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008976:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800897e:	2b03      	cmp	r3, #3
 8008980:	f040 8098 	bne.w	8008ab4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	689a      	ldr	r2, [r3, #8]
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	429a      	cmp	r2, r3
 800898e:	d913      	bls.n	80089b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	1ad2      	subs	r2, r2, r3
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	4293      	cmp	r3, r2
 80089a8:	bf28      	it	cs
 80089aa:	4613      	movcs	r3, r2
 80089ac:	461a      	mov	r2, r3
 80089ae:	6879      	ldr	r1, [r7, #4]
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f001 f984 	bl	8009cbe <USBD_CtlContinueRx>
 80089b6:	e07d      	b.n	8008ab4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089be:	f003 031f 	and.w	r3, r3, #31
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d014      	beq.n	80089f0 <USBD_LL_DataOutStage+0x98>
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d81d      	bhi.n	8008a06 <USBD_LL_DataOutStage+0xae>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <USBD_LL_DataOutStage+0x7c>
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d003      	beq.n	80089da <USBD_LL_DataOutStage+0x82>
 80089d2:	e018      	b.n	8008a06 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	75bb      	strb	r3, [r7, #22]
            break;
 80089d8:	e018      	b.n	8008a0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	4619      	mov	r1, r3
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fa5e 	bl	8008ea6 <USBD_CoreFindIF>
 80089ea:	4603      	mov	r3, r0
 80089ec:	75bb      	strb	r3, [r7, #22]
            break;
 80089ee:	e00d      	b.n	8008a0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	4619      	mov	r1, r3
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 fa60 	bl	8008ec0 <USBD_CoreFindEP>
 8008a00:	4603      	mov	r3, r0
 8008a02:	75bb      	strb	r3, [r7, #22]
            break;
 8008a04:	e002      	b.n	8008a0c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	75bb      	strb	r3, [r7, #22]
            break;
 8008a0a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a0c:	7dbb      	ldrb	r3, [r7, #22]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d119      	bne.n	8008a46 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d113      	bne.n	8008a46 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a1e:	7dba      	ldrb	r2, [r7, #22]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	32ae      	adds	r2, #174	; 0xae
 8008a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00b      	beq.n	8008a46 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008a2e:	7dba      	ldrb	r2, [r7, #22]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a36:	7dba      	ldrb	r2, [r7, #22]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	32ae      	adds	r2, #174	; 0xae
 8008a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f001 f94a 	bl	8009ce0 <USBD_CtlSendStatus>
 8008a4c:	e032      	b.n	8008ab4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008a4e:	7afb      	ldrb	r3, [r7, #11]
 8008a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	4619      	mov	r1, r3
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 fa31 	bl	8008ec0 <USBD_CoreFindEP>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a62:	7dbb      	ldrb	r3, [r7, #22]
 8008a64:	2bff      	cmp	r3, #255	; 0xff
 8008a66:	d025      	beq.n	8008ab4 <USBD_LL_DataOutStage+0x15c>
 8008a68:	7dbb      	ldrb	r3, [r7, #22]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d122      	bne.n	8008ab4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d117      	bne.n	8008aaa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008a7a:	7dba      	ldrb	r2, [r7, #22]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	32ae      	adds	r2, #174	; 0xae
 8008a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00f      	beq.n	8008aaa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008a8a:	7dba      	ldrb	r2, [r7, #22]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008a92:	7dba      	ldrb	r2, [r7, #22]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	32ae      	adds	r2, #174	; 0xae
 8008a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	7afa      	ldrb	r2, [r7, #11]
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	4798      	blx	r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
 8008ab2:	e000      	b.n	8008ab6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	607a      	str	r2, [r7, #4]
 8008aca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d16f      	bne.n	8008bb2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3314      	adds	r3, #20
 8008ad6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d15a      	bne.n	8008b98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	689a      	ldr	r2, [r3, #8]
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d914      	bls.n	8008b18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	461a      	mov	r2, r3
 8008b02:	6879      	ldr	r1, [r7, #4]
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f001 f8ac 	bl	8009c62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2100      	movs	r1, #0
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f001 ffc9 	bl	800aaa8 <USBD_LL_PrepareReceive>
 8008b16:	e03f      	b.n	8008b98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d11c      	bne.n	8008b5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d316      	bcc.n	8008b5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d20f      	bcs.n	8008b5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2100      	movs	r1, #0
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f001 f88d 	bl	8009c62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b50:	2300      	movs	r3, #0
 8008b52:	2200      	movs	r2, #0
 8008b54:	2100      	movs	r1, #0
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f001 ffa6 	bl	800aaa8 <USBD_LL_PrepareReceive>
 8008b5c:	e01c      	b.n	8008b98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d10f      	bne.n	8008b8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d009      	beq.n	8008b8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b8a:	2180      	movs	r1, #128	; 0x80
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f001 fee1 	bl	800a954 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f001 f8b7 	bl	8009d06 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d03a      	beq.n	8008c18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f7ff fe42 	bl	800882c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008bb0:	e032      	b.n	8008c18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008bb2:	7afb      	ldrb	r3, [r7, #11]
 8008bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	4619      	mov	r1, r3
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 f97f 	bl	8008ec0 <USBD_CoreFindEP>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	2bff      	cmp	r3, #255	; 0xff
 8008bca:	d025      	beq.n	8008c18 <USBD_LL_DataInStage+0x15a>
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d122      	bne.n	8008c18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d11c      	bne.n	8008c18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008bde:	7dfa      	ldrb	r2, [r7, #23]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	32ae      	adds	r2, #174	; 0xae
 8008be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d014      	beq.n	8008c18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008bee:	7dfa      	ldrb	r2, [r7, #23]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008bf6:	7dfa      	ldrb	r2, [r7, #23]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	32ae      	adds	r2, #174	; 0xae
 8008bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	7afa      	ldrb	r2, [r7, #11]
 8008c04:	4611      	mov	r1, r2
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	4798      	blx	r3
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c0e:	7dbb      	ldrb	r3, [r7, #22]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008c14:	7dbb      	ldrb	r3, [r7, #22]
 8008c16:	e000      	b.n	8008c1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3718      	adds	r7, #24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b084      	sub	sp, #16
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d014      	beq.n	8008c88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00e      	beq.n	8008c88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	6852      	ldr	r2, [r2, #4]
 8008c76:	b2d2      	uxtb	r2, r2
 8008c78:	4611      	mov	r1, r2
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	4798      	blx	r3
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008c84:	2303      	movs	r3, #3
 8008c86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c88:	2340      	movs	r3, #64	; 0x40
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 fe1b 	bl	800a8ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2240      	movs	r2, #64	; 0x40
 8008ca0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ca4:	2340      	movs	r3, #64	; 0x40
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2180      	movs	r1, #128	; 0x80
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 fe0d 	bl	800a8ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2240      	movs	r2, #64	; 0x40
 8008cba:	621a      	str	r2, [r3, #32]

  return ret;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	78fa      	ldrb	r2, [r7, #3]
 8008cd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b083      	sub	sp, #12
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2204      	movs	r2, #4
 8008d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b083      	sub	sp, #12
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d106      	bne.n	8008d34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	d110      	bne.n	8008d78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b082      	sub	sp, #8
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	32ae      	adds	r2, #174	; 0xae
 8008d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e01c      	b.n	8008dde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d115      	bne.n	8008ddc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	32ae      	adds	r2, #174	; 0xae
 8008dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dbe:	6a1b      	ldr	r3, [r3, #32]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00b      	beq.n	8008ddc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	32ae      	adds	r2, #174	; 0xae
 8008dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	78fa      	ldrb	r2, [r7, #3]
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	460b      	mov	r3, r1
 8008df0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	32ae      	adds	r2, #174	; 0xae
 8008dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e01c      	b.n	8008e42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d115      	bne.n	8008e40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	32ae      	adds	r2, #174	; 0xae
 8008e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	32ae      	adds	r2, #174	; 0xae
 8008e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	78fa      	ldrb	r2, [r7, #3]
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00e      	beq.n	8008e9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	6852      	ldr	r2, [r2, #4]
 8008e8a:	b2d2      	uxtb	r2, r2
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	4798      	blx	r3
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008eb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ecc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b086      	sub	sp, #24
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	885b      	ldrh	r3, [r3, #2]
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d920      	bls.n	8008f44 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f0a:	e013      	b.n	8008f34 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f0c:	f107 030a 	add.w	r3, r7, #10
 8008f10:	4619      	mov	r1, r3
 8008f12:	6978      	ldr	r0, [r7, #20]
 8008f14:	f000 f81b 	bl	8008f4e <USBD_GetNextDesc>
 8008f18:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	785b      	ldrb	r3, [r3, #1]
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d108      	bne.n	8008f34 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	789b      	ldrb	r3, [r3, #2]
 8008f2a:	78fa      	ldrb	r2, [r7, #3]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d008      	beq.n	8008f42 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008f30:	2300      	movs	r3, #0
 8008f32:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	885b      	ldrh	r3, [r3, #2]
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	897b      	ldrh	r3, [r7, #10]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d8e5      	bhi.n	8008f0c <USBD_GetEpDesc+0x32>
 8008f40:	e000      	b.n	8008f44 <USBD_GetEpDesc+0x6a>
          break;
 8008f42:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008f44:	693b      	ldr	r3, [r7, #16]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b085      	sub	sp, #20
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	881a      	ldrh	r2, [r3, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	4413      	add	r3, r2
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4413      	add	r3, r2
 8008f78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008fa6:	8a3b      	ldrh	r3, [r7, #16]
 8008fa8:	021b      	lsls	r3, r3, #8
 8008faa:	b21a      	sxth	r2, r3
 8008fac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	b21b      	sxth	r3, r3
 8008fb4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008fb6:	89fb      	ldrh	r3, [r7, #14]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	371c      	adds	r7, #28
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fda:	2b40      	cmp	r3, #64	; 0x40
 8008fdc:	d005      	beq.n	8008fea <USBD_StdDevReq+0x26>
 8008fde:	2b40      	cmp	r3, #64	; 0x40
 8008fe0:	d857      	bhi.n	8009092 <USBD_StdDevReq+0xce>
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00f      	beq.n	8009006 <USBD_StdDevReq+0x42>
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	d153      	bne.n	8009092 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	32ae      	adds	r2, #174	; 0xae
 8008ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4798      	blx	r3
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]
      break;
 8009004:	e04a      	b.n	800909c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	785b      	ldrb	r3, [r3, #1]
 800900a:	2b09      	cmp	r3, #9
 800900c:	d83b      	bhi.n	8009086 <USBD_StdDevReq+0xc2>
 800900e:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <USBD_StdDevReq+0x50>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	08009069 	.word	0x08009069
 8009018:	0800907d 	.word	0x0800907d
 800901c:	08009087 	.word	0x08009087
 8009020:	08009073 	.word	0x08009073
 8009024:	08009087 	.word	0x08009087
 8009028:	08009047 	.word	0x08009047
 800902c:	0800903d 	.word	0x0800903d
 8009030:	08009087 	.word	0x08009087
 8009034:	0800905f 	.word	0x0800905f
 8009038:	08009051 	.word	0x08009051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fa3c 	bl	80094bc <USBD_GetDescriptor>
          break;
 8009044:	e024      	b.n	8009090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fba1 	bl	8009790 <USBD_SetAddress>
          break;
 800904e:	e01f      	b.n	8009090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fbe0 	bl	8009818 <USBD_SetConfig>
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]
          break;
 800905c:	e018      	b.n	8009090 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fc83 	bl	800996c <USBD_GetConfig>
          break;
 8009066:	e013      	b.n	8009090 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fcb4 	bl	80099d8 <USBD_GetStatus>
          break;
 8009070:	e00e      	b.n	8009090 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fce3 	bl	8009a40 <USBD_SetFeature>
          break;
 800907a:	e009      	b.n	8009090 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fd07 	bl	8009a92 <USBD_ClrFeature>
          break;
 8009084:	e004      	b.n	8009090 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fd5e 	bl	8009b4a <USBD_CtlError>
          break;
 800908e:	bf00      	nop
      }
      break;
 8009090:	e004      	b.n	800909c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fd58 	bl	8009b4a <USBD_CtlError>
      break;
 800909a:	bf00      	nop
  }

  return ret;
 800909c:	7bfb      	ldrb	r3, [r7, #15]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop

080090a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090be:	2b40      	cmp	r3, #64	; 0x40
 80090c0:	d005      	beq.n	80090ce <USBD_StdItfReq+0x26>
 80090c2:	2b40      	cmp	r3, #64	; 0x40
 80090c4:	d852      	bhi.n	800916c <USBD_StdItfReq+0xc4>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <USBD_StdItfReq+0x26>
 80090ca:	2b20      	cmp	r3, #32
 80090cc:	d14e      	bne.n	800916c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	3b01      	subs	r3, #1
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d840      	bhi.n	800915e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	889b      	ldrh	r3, [r3, #4]
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d836      	bhi.n	8009154 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	889b      	ldrh	r3, [r3, #4]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff fed9 	bl	8008ea6 <USBD_CoreFindIF>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	2bff      	cmp	r3, #255	; 0xff
 80090fc:	d01d      	beq.n	800913a <USBD_StdItfReq+0x92>
 80090fe:	7bbb      	ldrb	r3, [r7, #14]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d11a      	bne.n	800913a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009104:	7bba      	ldrb	r2, [r7, #14]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	32ae      	adds	r2, #174	; 0xae
 800910a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00f      	beq.n	8009134 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009114:	7bba      	ldrb	r2, [r7, #14]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800911c:	7bba      	ldrb	r2, [r7, #14]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	32ae      	adds	r2, #174	; 0xae
 8009122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	4798      	blx	r3
 800912e:	4603      	mov	r3, r0
 8009130:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009132:	e004      	b.n	800913e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009134:	2303      	movs	r3, #3
 8009136:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009138:	e001      	b.n	800913e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800913a:	2303      	movs	r3, #3
 800913c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	88db      	ldrh	r3, [r3, #6]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d110      	bne.n	8009168 <USBD_StdItfReq+0xc0>
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10d      	bne.n	8009168 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fdc7 	bl	8009ce0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009152:	e009      	b.n	8009168 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fcf7 	bl	8009b4a <USBD_CtlError>
          break;
 800915c:	e004      	b.n	8009168 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fcf2 	bl	8009b4a <USBD_CtlError>
          break;
 8009166:	e000      	b.n	800916a <USBD_StdItfReq+0xc2>
          break;
 8009168:	bf00      	nop
      }
      break;
 800916a:	e004      	b.n	8009176 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fceb 	bl	8009b4a <USBD_CtlError>
      break;
 8009174:	bf00      	nop
  }

  return ret;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	889b      	ldrh	r3, [r3, #4]
 8009192:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800919c:	2b40      	cmp	r3, #64	; 0x40
 800919e:	d007      	beq.n	80091b0 <USBD_StdEPReq+0x30>
 80091a0:	2b40      	cmp	r3, #64	; 0x40
 80091a2:	f200 817f 	bhi.w	80094a4 <USBD_StdEPReq+0x324>
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d02a      	beq.n	8009200 <USBD_StdEPReq+0x80>
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	f040 817a 	bne.w	80094a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff fe83 	bl	8008ec0 <USBD_CoreFindEP>
 80091ba:	4603      	mov	r3, r0
 80091bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091be:	7b7b      	ldrb	r3, [r7, #13]
 80091c0:	2bff      	cmp	r3, #255	; 0xff
 80091c2:	f000 8174 	beq.w	80094ae <USBD_StdEPReq+0x32e>
 80091c6:	7b7b      	ldrb	r3, [r7, #13]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f040 8170 	bne.w	80094ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80091ce:	7b7a      	ldrb	r2, [r7, #13]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80091d6:	7b7a      	ldrb	r2, [r7, #13]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	32ae      	adds	r2, #174	; 0xae
 80091dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 8163 	beq.w	80094ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80091e8:	7b7a      	ldrb	r2, [r7, #13]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	32ae      	adds	r2, #174	; 0xae
 80091ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	4798      	blx	r3
 80091fa:	4603      	mov	r3, r0
 80091fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80091fe:	e156      	b.n	80094ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	785b      	ldrb	r3, [r3, #1]
 8009204:	2b03      	cmp	r3, #3
 8009206:	d008      	beq.n	800921a <USBD_StdEPReq+0x9a>
 8009208:	2b03      	cmp	r3, #3
 800920a:	f300 8145 	bgt.w	8009498 <USBD_StdEPReq+0x318>
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 809b 	beq.w	800934a <USBD_StdEPReq+0x1ca>
 8009214:	2b01      	cmp	r3, #1
 8009216:	d03c      	beq.n	8009292 <USBD_StdEPReq+0x112>
 8009218:	e13e      	b.n	8009498 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b02      	cmp	r3, #2
 8009224:	d002      	beq.n	800922c <USBD_StdEPReq+0xac>
 8009226:	2b03      	cmp	r3, #3
 8009228:	d016      	beq.n	8009258 <USBD_StdEPReq+0xd8>
 800922a:	e02c      	b.n	8009286 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00d      	beq.n	800924e <USBD_StdEPReq+0xce>
 8009232:	7bbb      	ldrb	r3, [r7, #14]
 8009234:	2b80      	cmp	r3, #128	; 0x80
 8009236:	d00a      	beq.n	800924e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 fb89 	bl	800a954 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009242:	2180      	movs	r1, #128	; 0x80
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 fb85 	bl	800a954 <USBD_LL_StallEP>
 800924a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800924c:	e020      	b.n	8009290 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fc7a 	bl	8009b4a <USBD_CtlError>
              break;
 8009256:	e01b      	b.n	8009290 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	885b      	ldrh	r3, [r3, #2]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10e      	bne.n	800927e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <USBD_StdEPReq+0xfe>
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	2b80      	cmp	r3, #128	; 0x80
 800926a:	d008      	beq.n	800927e <USBD_StdEPReq+0xfe>
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	88db      	ldrh	r3, [r3, #6]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d104      	bne.n	800927e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009274:	7bbb      	ldrb	r3, [r7, #14]
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f001 fb6b 	bl	800a954 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fd2e 	bl	8009ce0 <USBD_CtlSendStatus>

              break;
 8009284:	e004      	b.n	8009290 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fc5e 	bl	8009b4a <USBD_CtlError>
              break;
 800928e:	bf00      	nop
          }
          break;
 8009290:	e107      	b.n	80094a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b02      	cmp	r3, #2
 800929c:	d002      	beq.n	80092a4 <USBD_StdEPReq+0x124>
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d016      	beq.n	80092d0 <USBD_StdEPReq+0x150>
 80092a2:	e04b      	b.n	800933c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00d      	beq.n	80092c6 <USBD_StdEPReq+0x146>
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	2b80      	cmp	r3, #128	; 0x80
 80092ae:	d00a      	beq.n	80092c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 fb4d 	bl	800a954 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092ba:	2180      	movs	r1, #128	; 0x80
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 fb49 	bl	800a954 <USBD_LL_StallEP>
 80092c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092c4:	e040      	b.n	8009348 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fc3e 	bl	8009b4a <USBD_CtlError>
              break;
 80092ce:	e03b      	b.n	8009348 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	885b      	ldrh	r3, [r3, #2]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d136      	bne.n	8009346 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d004      	beq.n	80092ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 fb53 	bl	800a992 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fcf7 	bl	8009ce0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7ff fde2 	bl	8008ec0 <USBD_CoreFindEP>
 80092fc:	4603      	mov	r3, r0
 80092fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009300:	7b7b      	ldrb	r3, [r7, #13]
 8009302:	2bff      	cmp	r3, #255	; 0xff
 8009304:	d01f      	beq.n	8009346 <USBD_StdEPReq+0x1c6>
 8009306:	7b7b      	ldrb	r3, [r7, #13]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d11c      	bne.n	8009346 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800930c:	7b7a      	ldrb	r2, [r7, #13]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009314:	7b7a      	ldrb	r2, [r7, #13]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	32ae      	adds	r2, #174	; 0xae
 800931a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d010      	beq.n	8009346 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009324:	7b7a      	ldrb	r2, [r7, #13]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	32ae      	adds	r2, #174	; 0xae
 800932a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	4798      	blx	r3
 8009336:	4603      	mov	r3, r0
 8009338:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800933a:	e004      	b.n	8009346 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fc03 	bl	8009b4a <USBD_CtlError>
              break;
 8009344:	e000      	b.n	8009348 <USBD_StdEPReq+0x1c8>
              break;
 8009346:	bf00      	nop
          }
          break;
 8009348:	e0ab      	b.n	80094a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d002      	beq.n	800935c <USBD_StdEPReq+0x1dc>
 8009356:	2b03      	cmp	r3, #3
 8009358:	d032      	beq.n	80093c0 <USBD_StdEPReq+0x240>
 800935a:	e097      	b.n	800948c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800935c:	7bbb      	ldrb	r3, [r7, #14]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d007      	beq.n	8009372 <USBD_StdEPReq+0x1f2>
 8009362:	7bbb      	ldrb	r3, [r7, #14]
 8009364:	2b80      	cmp	r3, #128	; 0x80
 8009366:	d004      	beq.n	8009372 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fbed 	bl	8009b4a <USBD_CtlError>
                break;
 8009370:	e091      	b.n	8009496 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009376:	2b00      	cmp	r3, #0
 8009378:	da0b      	bge.n	8009392 <USBD_StdEPReq+0x212>
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	3310      	adds	r3, #16
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	4413      	add	r3, r2
 800938e:	3304      	adds	r3, #4
 8009390:	e00b      	b.n	80093aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009392:	7bbb      	ldrb	r3, [r7, #14]
 8009394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	4413      	add	r3, r2
 80093a8:	3304      	adds	r3, #4
 80093aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2202      	movs	r2, #2
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fc37 	bl	8009c2c <USBD_CtlSendData>
              break;
 80093be:	e06a      	b.n	8009496 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80093c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	da11      	bge.n	80093ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	f003 020f 	and.w	r2, r3, #15
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	3324      	adds	r3, #36	; 0x24
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d117      	bne.n	8009412 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fbb0 	bl	8009b4a <USBD_CtlError>
                  break;
 80093ea:	e054      	b.n	8009496 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
 80093ee:	f003 020f 	and.w	r2, r3, #15
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	4613      	mov	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	440b      	add	r3, r1
 80093fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d104      	bne.n	8009412 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fb9d 	bl	8009b4a <USBD_CtlError>
                  break;
 8009410:	e041      	b.n	8009496 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009416:	2b00      	cmp	r3, #0
 8009418:	da0b      	bge.n	8009432 <USBD_StdEPReq+0x2b2>
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009420:	4613      	mov	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	3310      	adds	r3, #16
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	4413      	add	r3, r2
 800942e:	3304      	adds	r3, #4
 8009430:	e00b      	b.n	800944a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	3304      	adds	r3, #4
 800944a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <USBD_StdEPReq+0x2d8>
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	2b80      	cmp	r3, #128	; 0x80
 8009456:	d103      	bne.n	8009460 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	e00e      	b.n	800947e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f001 fab3 	bl	800a9d0 <USBD_LL_IsStallEP>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2201      	movs	r2, #1
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	e002      	b.n	800947e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2200      	movs	r2, #0
 800947c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2202      	movs	r2, #2
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fbd1 	bl	8009c2c <USBD_CtlSendData>
              break;
 800948a:	e004      	b.n	8009496 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fb5b 	bl	8009b4a <USBD_CtlError>
              break;
 8009494:	bf00      	nop
          }
          break;
 8009496:	e004      	b.n	80094a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fb55 	bl	8009b4a <USBD_CtlError>
          break;
 80094a0:	bf00      	nop
      }
      break;
 80094a2:	e005      	b.n	80094b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fb4f 	bl	8009b4a <USBD_CtlError>
      break;
 80094ac:	e000      	b.n	80094b0 <USBD_StdEPReq+0x330>
      break;
 80094ae:	bf00      	nop
  }

  return ret;
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094ce:	2300      	movs	r3, #0
 80094d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	885b      	ldrh	r3, [r3, #2]
 80094d6:	0a1b      	lsrs	r3, r3, #8
 80094d8:	b29b      	uxth	r3, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	2b06      	cmp	r3, #6
 80094de:	f200 8128 	bhi.w	8009732 <USBD_GetDescriptor+0x276>
 80094e2:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <USBD_GetDescriptor+0x2c>)
 80094e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e8:	08009505 	.word	0x08009505
 80094ec:	0800951d 	.word	0x0800951d
 80094f0:	0800955d 	.word	0x0800955d
 80094f4:	08009733 	.word	0x08009733
 80094f8:	08009733 	.word	0x08009733
 80094fc:	080096d3 	.word	0x080096d3
 8009500:	080096ff 	.word	0x080096ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	7c12      	ldrb	r2, [r2, #16]
 8009510:	f107 0108 	add.w	r1, r7, #8
 8009514:	4610      	mov	r0, r2
 8009516:	4798      	blx	r3
 8009518:	60f8      	str	r0, [r7, #12]
      break;
 800951a:	e112      	b.n	8009742 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	7c1b      	ldrb	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10d      	bne.n	8009540 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952c:	f107 0208 	add.w	r2, r7, #8
 8009530:	4610      	mov	r0, r2
 8009532:	4798      	blx	r3
 8009534:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3301      	adds	r3, #1
 800953a:	2202      	movs	r2, #2
 800953c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800953e:	e100      	b.n	8009742 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	f107 0208 	add.w	r2, r7, #8
 800954c:	4610      	mov	r0, r2
 800954e:	4798      	blx	r3
 8009550:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	3301      	adds	r3, #1
 8009556:	2202      	movs	r2, #2
 8009558:	701a      	strb	r2, [r3, #0]
      break;
 800955a:	e0f2      	b.n	8009742 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	885b      	ldrh	r3, [r3, #2]
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b05      	cmp	r3, #5
 8009564:	f200 80ac 	bhi.w	80096c0 <USBD_GetDescriptor+0x204>
 8009568:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <USBD_GetDescriptor+0xb4>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	08009589 	.word	0x08009589
 8009574:	080095bd 	.word	0x080095bd
 8009578:	080095f1 	.word	0x080095f1
 800957c:	08009625 	.word	0x08009625
 8009580:	08009659 	.word	0x08009659
 8009584:	0800968d 	.word	0x0800968d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00b      	beq.n	80095ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	7c12      	ldrb	r2, [r2, #16]
 80095a0:	f107 0108 	add.w	r1, r7, #8
 80095a4:	4610      	mov	r0, r2
 80095a6:	4798      	blx	r3
 80095a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095aa:	e091      	b.n	80096d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 facb 	bl	8009b4a <USBD_CtlError>
            err++;
 80095b4:	7afb      	ldrb	r3, [r7, #11]
 80095b6:	3301      	adds	r3, #1
 80095b8:	72fb      	strb	r3, [r7, #11]
          break;
 80095ba:	e089      	b.n	80096d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00b      	beq.n	80095e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	7c12      	ldrb	r2, [r2, #16]
 80095d4:	f107 0108 	add.w	r1, r7, #8
 80095d8:	4610      	mov	r0, r2
 80095da:	4798      	blx	r3
 80095dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095de:	e077      	b.n	80096d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fab1 	bl	8009b4a <USBD_CtlError>
            err++;
 80095e8:	7afb      	ldrb	r3, [r7, #11]
 80095ea:	3301      	adds	r3, #1
 80095ec:	72fb      	strb	r3, [r7, #11]
          break;
 80095ee:	e06f      	b.n	80096d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00b      	beq.n	8009614 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	7c12      	ldrb	r2, [r2, #16]
 8009608:	f107 0108 	add.w	r1, r7, #8
 800960c:	4610      	mov	r0, r2
 800960e:	4798      	blx	r3
 8009610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009612:	e05d      	b.n	80096d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fa97 	bl	8009b4a <USBD_CtlError>
            err++;
 800961c:	7afb      	ldrb	r3, [r7, #11]
 800961e:	3301      	adds	r3, #1
 8009620:	72fb      	strb	r3, [r7, #11]
          break;
 8009622:	e055      	b.n	80096d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	f107 0108 	add.w	r1, r7, #8
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
 8009644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009646:	e043      	b.n	80096d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fa7d 	bl	8009b4a <USBD_CtlError>
            err++;
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	3301      	adds	r3, #1
 8009654:	72fb      	strb	r3, [r7, #11]
          break;
 8009656:	e03b      	b.n	80096d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	7c12      	ldrb	r2, [r2, #16]
 8009670:	f107 0108 	add.w	r1, r7, #8
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
 8009678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800967a:	e029      	b.n	80096d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fa63 	bl	8009b4a <USBD_CtlError>
            err++;
 8009684:	7afb      	ldrb	r3, [r7, #11]
 8009686:	3301      	adds	r3, #1
 8009688:	72fb      	strb	r3, [r7, #11]
          break;
 800968a:	e021      	b.n	80096d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	7c12      	ldrb	r2, [r2, #16]
 80096a4:	f107 0108 	add.w	r1, r7, #8
 80096a8:	4610      	mov	r0, r2
 80096aa:	4798      	blx	r3
 80096ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ae:	e00f      	b.n	80096d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fa49 	bl	8009b4a <USBD_CtlError>
            err++;
 80096b8:	7afb      	ldrb	r3, [r7, #11]
 80096ba:	3301      	adds	r3, #1
 80096bc:	72fb      	strb	r3, [r7, #11]
          break;
 80096be:	e007      	b.n	80096d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fa41 	bl	8009b4a <USBD_CtlError>
          err++;
 80096c8:	7afb      	ldrb	r3, [r7, #11]
 80096ca:	3301      	adds	r3, #1
 80096cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80096ce:	bf00      	nop
      }
      break;
 80096d0:	e037      	b.n	8009742 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	7c1b      	ldrb	r3, [r3, #16]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d109      	bne.n	80096ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e2:	f107 0208 	add.w	r2, r7, #8
 80096e6:	4610      	mov	r0, r2
 80096e8:	4798      	blx	r3
 80096ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096ec:	e029      	b.n	8009742 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fa2a 	bl	8009b4a <USBD_CtlError>
        err++;
 80096f6:	7afb      	ldrb	r3, [r7, #11]
 80096f8:	3301      	adds	r3, #1
 80096fa:	72fb      	strb	r3, [r7, #11]
      break;
 80096fc:	e021      	b.n	8009742 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	7c1b      	ldrb	r3, [r3, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10d      	bne.n	8009722 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800970c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970e:	f107 0208 	add.w	r2, r7, #8
 8009712:	4610      	mov	r0, r2
 8009714:	4798      	blx	r3
 8009716:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3301      	adds	r3, #1
 800971c:	2207      	movs	r2, #7
 800971e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009720:	e00f      	b.n	8009742 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fa10 	bl	8009b4a <USBD_CtlError>
        err++;
 800972a:	7afb      	ldrb	r3, [r7, #11]
 800972c:	3301      	adds	r3, #1
 800972e:	72fb      	strb	r3, [r7, #11]
      break;
 8009730:	e007      	b.n	8009742 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fa08 	bl	8009b4a <USBD_CtlError>
      err++;
 800973a:	7afb      	ldrb	r3, [r7, #11]
 800973c:	3301      	adds	r3, #1
 800973e:	72fb      	strb	r3, [r7, #11]
      break;
 8009740:	bf00      	nop
  }

  if (err != 0U)
 8009742:	7afb      	ldrb	r3, [r7, #11]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d11e      	bne.n	8009786 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	88db      	ldrh	r3, [r3, #6]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d016      	beq.n	800977e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009750:	893b      	ldrh	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00e      	beq.n	8009774 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	88da      	ldrh	r2, [r3, #6]
 800975a:	893b      	ldrh	r3, [r7, #8]
 800975c:	4293      	cmp	r3, r2
 800975e:	bf28      	it	cs
 8009760:	4613      	movcs	r3, r2
 8009762:	b29b      	uxth	r3, r3
 8009764:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009766:	893b      	ldrh	r3, [r7, #8]
 8009768:	461a      	mov	r2, r3
 800976a:	68f9      	ldr	r1, [r7, #12]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fa5d 	bl	8009c2c <USBD_CtlSendData>
 8009772:	e009      	b.n	8009788 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f9e7 	bl	8009b4a <USBD_CtlError>
 800977c:	e004      	b.n	8009788 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 faae 	bl	8009ce0 <USBD_CtlSendStatus>
 8009784:	e000      	b.n	8009788 <USBD_GetDescriptor+0x2cc>
    return;
 8009786:	bf00      	nop
  }
}
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop

08009790 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	889b      	ldrh	r3, [r3, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d131      	bne.n	8009806 <USBD_SetAddress+0x76>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	88db      	ldrh	r3, [r3, #6]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d12d      	bne.n	8009806 <USBD_SetAddress+0x76>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	885b      	ldrh	r3, [r3, #2]
 80097ae:	2b7f      	cmp	r3, #127	; 0x7f
 80097b0:	d829      	bhi.n	8009806 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	885b      	ldrh	r3, [r3, #2]
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d104      	bne.n	80097d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f9bc 	bl	8009b4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d2:	e01d      	b.n	8009810 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	7bfa      	ldrb	r2, [r7, #15]
 80097d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f001 f921 	bl	800aa28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa7a 	bl	8009ce0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d004      	beq.n	80097fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2202      	movs	r2, #2
 80097f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097fa:	e009      	b.n	8009810 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009804:	e004      	b.n	8009810 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f99e 	bl	8009b4a <USBD_CtlError>
  }
}
 800980e:	bf00      	nop
 8009810:	bf00      	nop
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	885b      	ldrh	r3, [r3, #2]
 800982a:	b2da      	uxtb	r2, r3
 800982c:	4b4e      	ldr	r3, [pc, #312]	; (8009968 <USBD_SetConfig+0x150>)
 800982e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009830:	4b4d      	ldr	r3, [pc, #308]	; (8009968 <USBD_SetConfig+0x150>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d905      	bls.n	8009844 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f985 	bl	8009b4a <USBD_CtlError>
    return USBD_FAIL;
 8009840:	2303      	movs	r3, #3
 8009842:	e08c      	b.n	800995e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b02      	cmp	r3, #2
 800984e:	d002      	beq.n	8009856 <USBD_SetConfig+0x3e>
 8009850:	2b03      	cmp	r3, #3
 8009852:	d029      	beq.n	80098a8 <USBD_SetConfig+0x90>
 8009854:	e075      	b.n	8009942 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009856:	4b44      	ldr	r3, [pc, #272]	; (8009968 <USBD_SetConfig+0x150>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d020      	beq.n	80098a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800985e:	4b42      	ldr	r3, [pc, #264]	; (8009968 <USBD_SetConfig+0x150>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009868:	4b3f      	ldr	r3, [pc, #252]	; (8009968 <USBD_SetConfig+0x150>)
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7fe ffe7 	bl	8008842 <USBD_SetClassConfig>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d008      	beq.n	8009890 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f962 	bl	8009b4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2202      	movs	r2, #2
 800988a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800988e:	e065      	b.n	800995c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fa25 	bl	8009ce0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2203      	movs	r2, #3
 800989a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800989e:	e05d      	b.n	800995c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fa1d 	bl	8009ce0 <USBD_CtlSendStatus>
      break;
 80098a6:	e059      	b.n	800995c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80098a8:	4b2f      	ldr	r3, [pc, #188]	; (8009968 <USBD_SetConfig+0x150>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d112      	bne.n	80098d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80098b8:	4b2b      	ldr	r3, [pc, #172]	; (8009968 <USBD_SetConfig+0x150>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	461a      	mov	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098c2:	4b29      	ldr	r3, [pc, #164]	; (8009968 <USBD_SetConfig+0x150>)
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7fe ffd6 	bl	800887a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fa06 	bl	8009ce0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098d4:	e042      	b.n	800995c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80098d6:	4b24      	ldr	r3, [pc, #144]	; (8009968 <USBD_SetConfig+0x150>)
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d02a      	beq.n	800993a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7fe ffc4 	bl	800887a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80098f2:	4b1d      	ldr	r3, [pc, #116]	; (8009968 <USBD_SetConfig+0x150>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098fc:	4b1a      	ldr	r3, [pc, #104]	; (8009968 <USBD_SetConfig+0x150>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f7fe ff9d 	bl	8008842 <USBD_SetClassConfig>
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00f      	beq.n	8009932 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f918 	bl	8009b4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	b2db      	uxtb	r3, r3
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7fe ffa9 	bl	800887a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009930:	e014      	b.n	800995c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f9d4 	bl	8009ce0 <USBD_CtlSendStatus>
      break;
 8009938:	e010      	b.n	800995c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f9d0 	bl	8009ce0 <USBD_CtlSendStatus>
      break;
 8009940:	e00c      	b.n	800995c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f900 	bl	8009b4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800994a:	4b07      	ldr	r3, [pc, #28]	; (8009968 <USBD_SetConfig+0x150>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7fe ff92 	bl	800887a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009956:	2303      	movs	r3, #3
 8009958:	73fb      	strb	r3, [r7, #15]
      break;
 800995a:	bf00      	nop
  }

  return ret;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000440 	.word	0x20000440

0800996c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	88db      	ldrh	r3, [r3, #6]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d004      	beq.n	8009988 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f8e2 	bl	8009b4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009986:	e023      	b.n	80099d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b02      	cmp	r3, #2
 8009992:	dc02      	bgt.n	800999a <USBD_GetConfig+0x2e>
 8009994:	2b00      	cmp	r3, #0
 8009996:	dc03      	bgt.n	80099a0 <USBD_GetConfig+0x34>
 8009998:	e015      	b.n	80099c6 <USBD_GetConfig+0x5a>
 800999a:	2b03      	cmp	r3, #3
 800999c:	d00b      	beq.n	80099b6 <USBD_GetConfig+0x4a>
 800999e:	e012      	b.n	80099c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3308      	adds	r3, #8
 80099aa:	2201      	movs	r2, #1
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f93c 	bl	8009c2c <USBD_CtlSendData>
        break;
 80099b4:	e00c      	b.n	80099d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	3304      	adds	r3, #4
 80099ba:	2201      	movs	r2, #1
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f934 	bl	8009c2c <USBD_CtlSendData>
        break;
 80099c4:	e004      	b.n	80099d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f8be 	bl	8009b4a <USBD_CtlError>
        break;
 80099ce:	bf00      	nop
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	3b01      	subs	r3, #1
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d81e      	bhi.n	8009a2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	88db      	ldrh	r3, [r3, #6]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d004      	beq.n	8009a02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f8a5 	bl	8009b4a <USBD_CtlError>
        break;
 8009a00:	e01a      	b.n	8009a38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d005      	beq.n	8009a1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	f043 0202 	orr.w	r2, r3, #2
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	330c      	adds	r3, #12
 8009a22:	2202      	movs	r2, #2
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f900 	bl	8009c2c <USBD_CtlSendData>
      break;
 8009a2c:	e004      	b.n	8009a38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f88a 	bl	8009b4a <USBD_CtlError>
      break;
 8009a36:	bf00      	nop
  }
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	885b      	ldrh	r3, [r3, #2]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d107      	bne.n	8009a62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f940 	bl	8009ce0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009a60:	e013      	b.n	8009a8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	885b      	ldrh	r3, [r3, #2]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d10b      	bne.n	8009a82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	889b      	ldrh	r3, [r3, #4]
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f930 	bl	8009ce0 <USBD_CtlSendStatus>
}
 8009a80:	e003      	b.n	8009a8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f860 	bl	8009b4a <USBD_CtlError>
}
 8009a8a:	bf00      	nop
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d80b      	bhi.n	8009ac2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	885b      	ldrh	r3, [r3, #2]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d10c      	bne.n	8009acc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f910 	bl	8009ce0 <USBD_CtlSendStatus>
      }
      break;
 8009ac0:	e004      	b.n	8009acc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f840 	bl	8009b4a <USBD_CtlError>
      break;
 8009aca:	e000      	b.n	8009ace <USBD_ClrFeature+0x3c>
      break;
 8009acc:	bf00      	nop
  }
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	781a      	ldrb	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3301      	adds	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	781a      	ldrb	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3301      	adds	r3, #1
 8009afe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f7ff fa41 	bl	8008f88 <SWAPBYTE>
 8009b06:	4603      	mov	r3, r0
 8009b08:	461a      	mov	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3301      	adds	r3, #1
 8009b12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3301      	adds	r3, #1
 8009b18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f7ff fa34 	bl	8008f88 <SWAPBYTE>
 8009b20:	4603      	mov	r3, r0
 8009b22:	461a      	mov	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3301      	adds	r3, #1
 8009b32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f7ff fa27 	bl	8008f88 <SWAPBYTE>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	80da      	strh	r2, [r3, #6]
}
 8009b42:	bf00      	nop
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b54:	2180      	movs	r1, #128	; 0x80
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fefc 	bl	800a954 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fef8 	bl	800a954 <USBD_LL_StallEP>
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d036      	beq.n	8009bf0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009b86:	6938      	ldr	r0, [r7, #16]
 8009b88:	f000 f836 	bl	8009bf8 <USBD_GetLen>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	3301      	adds	r3, #1
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	7812      	ldrb	r2, [r2, #0]
 8009ba4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	2203      	movs	r2, #3
 8009bb4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009bbc:	e013      	b.n	8009be6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	7812      	ldrb	r2, [r2, #0]
 8009bc8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	613b      	str	r3, [r7, #16]
    idx++;
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	4413      	add	r3, r2
 8009bdc:	2200      	movs	r2, #0
 8009bde:	701a      	strb	r2, [r3, #0]
    idx++;
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	3301      	adds	r3, #1
 8009be4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e7      	bne.n	8009bbe <USBD_GetString+0x52>
 8009bee:	e000      	b.n	8009bf2 <USBD_GetString+0x86>
    return;
 8009bf0:	bf00      	nop
  }
}
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c00:	2300      	movs	r3, #0
 8009c02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c08:	e005      	b.n	8009c16 <USBD_GetLen+0x1e>
  {
    len++;
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	3301      	adds	r3, #1
 8009c14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1f5      	bne.n	8009c0a <USBD_GetLen+0x12>
  }

  return len;
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	2100      	movs	r1, #0
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 ff07 	bl	800aa66 <USBD_LL_Transmit>

  return USBD_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	60f8      	str	r0, [r7, #12]
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	2100      	movs	r1, #0
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 fef6 	bl	800aa66 <USBD_LL_Transmit>

  return USBD_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2203      	movs	r2, #3
 8009c94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	2100      	movs	r1, #0
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f000 fefa 	bl	800aaa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	60b9      	str	r1, [r7, #8]
 8009cc8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	2100      	movs	r1, #0
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 fee9 	bl	800aaa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2204      	movs	r2, #4
 8009cec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 feb5 	bl	800aa66 <USBD_LL_Transmit>

  return USBD_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b082      	sub	sp, #8
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2205      	movs	r2, #5
 8009d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d16:	2300      	movs	r3, #0
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fec3 	bl	800aaa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d30:	2200      	movs	r2, #0
 8009d32:	4912      	ldr	r1, [pc, #72]	; (8009d7c <MX_USB_DEVICE_Init+0x50>)
 8009d34:	4812      	ldr	r0, [pc, #72]	; (8009d80 <MX_USB_DEVICE_Init+0x54>)
 8009d36:	f7fe fd07 	bl	8008748 <USBD_Init>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d40:	f7f7 f8d2 	bl	8000ee8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d44:	490f      	ldr	r1, [pc, #60]	; (8009d84 <MX_USB_DEVICE_Init+0x58>)
 8009d46:	480e      	ldr	r0, [pc, #56]	; (8009d80 <MX_USB_DEVICE_Init+0x54>)
 8009d48:	f7fe fd2e 	bl	80087a8 <USBD_RegisterClass>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d52:	f7f7 f8c9 	bl	8000ee8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d56:	490c      	ldr	r1, [pc, #48]	; (8009d88 <MX_USB_DEVICE_Init+0x5c>)
 8009d58:	4809      	ldr	r0, [pc, #36]	; (8009d80 <MX_USB_DEVICE_Init+0x54>)
 8009d5a:	f7fe fc1f 	bl	800859c <USBD_CDC_RegisterInterface>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d64:	f7f7 f8c0 	bl	8000ee8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d68:	4805      	ldr	r0, [pc, #20]	; (8009d80 <MX_USB_DEVICE_Init+0x54>)
 8009d6a:	f7fe fd53 	bl	8008814 <USBD_Start>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d74:	f7f7 f8b8 	bl	8000ee8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d78:	bf00      	nop
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	200000b0 	.word	0x200000b0
 8009d80:	20000444 	.word	0x20000444
 8009d84:	2000001c 	.word	0x2000001c
 8009d88:	2000009c 	.word	0x2000009c

08009d8c <hex2int>:
/**
 * hex2int
 * take a hex string and convert it to a 32bit number (max 8 hex digits)
 */
//uint32_t hex2int(char *hex) {
uint8_t hex2int(char *hex){
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
    //uint32_t val = 0;
	uint8_t val = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	73fb      	strb	r3, [r7, #15]
    //while (*hex) {
	for(uint8_t i = 0; i < 2; i++)
 8009d98:	2300      	movs	r3, #0
 8009d9a:	73bb      	strb	r3, [r7, #14]
 8009d9c:	e02f      	b.n	8009dfe <hex2int+0x72>
	{
        // get current character then increment
        uint8_t byte = *hex++;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	1c5a      	adds	r2, r3, #1
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	737b      	strb	r3, [r7, #13]
        // transform hex character to the 4bit equivalent number, using the ascii table indexes
        if (byte >= '0' && byte <= '9') byte = byte - '0';
 8009da8:	7b7b      	ldrb	r3, [r7, #13]
 8009daa:	2b2f      	cmp	r3, #47	; 0x2f
 8009dac:	d906      	bls.n	8009dbc <hex2int+0x30>
 8009dae:	7b7b      	ldrb	r3, [r7, #13]
 8009db0:	2b39      	cmp	r3, #57	; 0x39
 8009db2:	d803      	bhi.n	8009dbc <hex2int+0x30>
 8009db4:	7b7b      	ldrb	r3, [r7, #13]
 8009db6:	3b30      	subs	r3, #48	; 0x30
 8009db8:	737b      	strb	r3, [r7, #13]
 8009dba:	e012      	b.n	8009de2 <hex2int+0x56>
        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
 8009dbc:	7b7b      	ldrb	r3, [r7, #13]
 8009dbe:	2b60      	cmp	r3, #96	; 0x60
 8009dc0:	d906      	bls.n	8009dd0 <hex2int+0x44>
 8009dc2:	7b7b      	ldrb	r3, [r7, #13]
 8009dc4:	2b66      	cmp	r3, #102	; 0x66
 8009dc6:	d803      	bhi.n	8009dd0 <hex2int+0x44>
 8009dc8:	7b7b      	ldrb	r3, [r7, #13]
 8009dca:	3b57      	subs	r3, #87	; 0x57
 8009dcc:	737b      	strb	r3, [r7, #13]
 8009dce:	e008      	b.n	8009de2 <hex2int+0x56>
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
 8009dd0:	7b7b      	ldrb	r3, [r7, #13]
 8009dd2:	2b40      	cmp	r3, #64	; 0x40
 8009dd4:	d905      	bls.n	8009de2 <hex2int+0x56>
 8009dd6:	7b7b      	ldrb	r3, [r7, #13]
 8009dd8:	2b46      	cmp	r3, #70	; 0x46
 8009dda:	d802      	bhi.n	8009de2 <hex2int+0x56>
 8009ddc:	7b7b      	ldrb	r3, [r7, #13]
 8009dde:	3b37      	subs	r3, #55	; 0x37
 8009de0:	737b      	strb	r3, [r7, #13]
        // shift 4 to make space for new digit, and add the 4 bits of the new digit
        val = (val << 4) | (byte & 0xF);
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	011b      	lsls	r3, r3, #4
 8009de6:	b25a      	sxtb	r2, r3
 8009de8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009dec:	f003 030f 	and.w	r3, r3, #15
 8009df0:	b25b      	sxtb	r3, r3
 8009df2:	4313      	orrs	r3, r2
 8009df4:	b25b      	sxtb	r3, r3
 8009df6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < 2; i++)
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	73bb      	strb	r3, [r7, #14]
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d9cc      	bls.n	8009d9e <hex2int+0x12>
    }
    return val;
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
	...

08009e14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e18:	2200      	movs	r2, #0
 8009e1a:	4905      	ldr	r1, [pc, #20]	; (8009e30 <CDC_Init_FS+0x1c>)
 8009e1c:	4805      	ldr	r0, [pc, #20]	; (8009e34 <CDC_Init_FS+0x20>)
 8009e1e:	f7fe fbd7 	bl	80085d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e22:	4905      	ldr	r1, [pc, #20]	; (8009e38 <CDC_Init_FS+0x24>)
 8009e24:	4803      	ldr	r0, [pc, #12]	; (8009e34 <CDC_Init_FS+0x20>)
 8009e26:	f7fe fbf5 	bl	8008614 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	20001330 	.word	0x20001330
 8009e34:	20000444 	.word	0x20000444
 8009e38:	20000b30 	.word	0x20000b30

08009e3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	6039      	str	r1, [r7, #0]
 8009e56:	71fb      	strb	r3, [r7, #7]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e5c:	79fb      	ldrb	r3, [r7, #7]
 8009e5e:	2b23      	cmp	r3, #35	; 0x23
 8009e60:	d84a      	bhi.n	8009ef8 <CDC_Control_FS+0xac>
 8009e62:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <CDC_Control_FS+0x1c>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009ef9 	.word	0x08009ef9
 8009e6c:	08009ef9 	.word	0x08009ef9
 8009e70:	08009ef9 	.word	0x08009ef9
 8009e74:	08009ef9 	.word	0x08009ef9
 8009e78:	08009ef9 	.word	0x08009ef9
 8009e7c:	08009ef9 	.word	0x08009ef9
 8009e80:	08009ef9 	.word	0x08009ef9
 8009e84:	08009ef9 	.word	0x08009ef9
 8009e88:	08009ef9 	.word	0x08009ef9
 8009e8c:	08009ef9 	.word	0x08009ef9
 8009e90:	08009ef9 	.word	0x08009ef9
 8009e94:	08009ef9 	.word	0x08009ef9
 8009e98:	08009ef9 	.word	0x08009ef9
 8009e9c:	08009ef9 	.word	0x08009ef9
 8009ea0:	08009ef9 	.word	0x08009ef9
 8009ea4:	08009ef9 	.word	0x08009ef9
 8009ea8:	08009ef9 	.word	0x08009ef9
 8009eac:	08009ef9 	.word	0x08009ef9
 8009eb0:	08009ef9 	.word	0x08009ef9
 8009eb4:	08009ef9 	.word	0x08009ef9
 8009eb8:	08009ef9 	.word	0x08009ef9
 8009ebc:	08009ef9 	.word	0x08009ef9
 8009ec0:	08009ef9 	.word	0x08009ef9
 8009ec4:	08009ef9 	.word	0x08009ef9
 8009ec8:	08009ef9 	.word	0x08009ef9
 8009ecc:	08009ef9 	.word	0x08009ef9
 8009ed0:	08009ef9 	.word	0x08009ef9
 8009ed4:	08009ef9 	.word	0x08009ef9
 8009ed8:	08009ef9 	.word	0x08009ef9
 8009edc:	08009ef9 	.word	0x08009ef9
 8009ee0:	08009ef9 	.word	0x08009ef9
 8009ee4:	08009ef9 	.word	0x08009ef9
 8009ee8:	08009ef9 	.word	0x08009ef9
 8009eec:	08009ef9 	.word	0x08009ef9
 8009ef0:	08009ef9 	.word	0x08009ef9
 8009ef4:	08009ef9 	.word	0x08009ef9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ef8:	bf00      	nop
  }

  return (USBD_OK);
 8009efa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	48bb      	ldr	r0, [pc, #748]	; (800a204 <CDC_Receive_FS+0x2fc>)
 8009f16:	f7fe fb7d 	bl	8008614 <USBD_CDC_SetRxBuffer>
  if(Buf[0] == '$' && Buf[14] == '#' && *Len == 15)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	2b24      	cmp	r3, #36	; 0x24
 8009f20:	f040 81a0 	bne.w	800a264 <CDC_Receive_FS+0x35c>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	330e      	adds	r3, #14
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	2b23      	cmp	r3, #35	; 0x23
 8009f2c:	f040 819a 	bne.w	800a264 <CDC_Receive_FS+0x35c>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b0f      	cmp	r3, #15
 8009f36:	f040 8195 	bne.w	800a264 <CDC_Receive_FS+0x35c>
  {
	  switch(Buf[1])
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	3b31      	subs	r3, #49	; 0x31
 8009f42:	2b1f      	cmp	r3, #31
 8009f44:	f200 81b0 	bhi.w	800a2a8 <CDC_Receive_FS+0x3a0>
 8009f48:	a201      	add	r2, pc, #4	; (adr r2, 8009f50 <CDC_Receive_FS+0x48>)
 8009f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4e:	bf00      	nop
 8009f50:	0800a259 	.word	0x0800a259
 8009f54:	0800a14f 	.word	0x0800a14f
 8009f58:	0800a157 	.word	0x0800a157
 8009f5c:	0800a1cb 	.word	0x0800a1cb
 8009f60:	0800a1f3 	.word	0x0800a1f3
 8009f64:	0800a1fb 	.word	0x0800a1fb
 8009f68:	0800a225 	.word	0x0800a225
 8009f6c:	0800a23f 	.word	0x0800a23f
 8009f70:	0800a2a9 	.word	0x0800a2a9
 8009f74:	0800a2a9 	.word	0x0800a2a9
 8009f78:	0800a2a9 	.word	0x0800a2a9
 8009f7c:	0800a2a9 	.word	0x0800a2a9
 8009f80:	0800a2a9 	.word	0x0800a2a9
 8009f84:	0800a2a9 	.word	0x0800a2a9
 8009f88:	0800a2a9 	.word	0x0800a2a9
 8009f8c:	0800a2a9 	.word	0x0800a2a9
 8009f90:	08009fff 	.word	0x08009fff
 8009f94:	0800a007 	.word	0x0800a007
 8009f98:	08009ff7 	.word	0x08009ff7
 8009f9c:	0800a00f 	.word	0x0800a00f
 8009fa0:	0800a2a9 	.word	0x0800a2a9
 8009fa4:	0800a017 	.word	0x0800a017
 8009fa8:	0800a2a9 	.word	0x0800a2a9
 8009fac:	0800a2a9 	.word	0x0800a2a9
 8009fb0:	0800a2a9 	.word	0x0800a2a9
 8009fb4:	0800a2a9 	.word	0x0800a2a9
 8009fb8:	0800a2a9 	.word	0x0800a2a9
 8009fbc:	0800a2a9 	.word	0x0800a2a9
 8009fc0:	0800a2a9 	.word	0x0800a2a9
 8009fc4:	0800a2a9 	.word	0x0800a2a9
 8009fc8:	0800a2a9 	.word	0x0800a2a9
 8009fcc:	08009fd1 	.word	0x08009fd1
	  {
	  case 'P'://Power ON/OFF
	  	  if(Buf[2] == '0') SMV_Step = POWER_OFF;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3302      	adds	r3, #2
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	2b30      	cmp	r3, #48	; 0x30
 8009fd8:	d103      	bne.n	8009fe2 <CDC_Receive_FS+0xda>
 8009fda:	4b8b      	ldr	r3, [pc, #556]	; (800a208 <CDC_Receive_FS+0x300>)
 8009fdc:	2202      	movs	r2, #2
 8009fde:	701a      	strb	r2, [r3, #0]
	  	  else if(Buf[2] == '1') SMV_Step = POWER_ON;

	  break;
 8009fe0:	e13c      	b.n	800a25c <CDC_Receive_FS+0x354>
	  	  else if(Buf[2] == '1') SMV_Step = POWER_ON;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3302      	adds	r3, #2
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	2b31      	cmp	r3, #49	; 0x31
 8009fea:	f040 8137 	bne.w	800a25c <CDC_Receive_FS+0x354>
 8009fee:	4b86      	ldr	r3, [pc, #536]	; (800a208 <CDC_Receive_FS+0x300>)
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	701a      	strb	r2, [r3, #0]
	  break;
 8009ff4:	e132      	b.n	800a25c <CDC_Receive_FS+0x354>
	  case 'C': //Measure Current
		  SMV_Step = CHECK_CURRENT;
 8009ff6:	4b84      	ldr	r3, [pc, #528]	; (800a208 <CDC_Receive_FS+0x300>)
 8009ff8:	2203      	movs	r2, #3
 8009ffa:	701a      	strb	r2, [r3, #0]
		  break;
 8009ffc:	e131      	b.n	800a262 <CDC_Receive_FS+0x35a>
	  case 'A': //measuring 5 voltage at PA0 (ADC1_IN0)
		  SMV_Step = CHECK_5V;
 8009ffe:	4b82      	ldr	r3, [pc, #520]	; (800a208 <CDC_Receive_FS+0x300>)
 800a000:	2204      	movs	r2, #4
 800a002:	701a      	strb	r2, [r3, #0]
		  break;
 800a004:	e12d      	b.n	800a262 <CDC_Receive_FS+0x35a>
	  case 'B': //measuring 4v2 voltage at PA1 (ADC1_IN1)
		  SMV_Step = CHECK_4V2;
 800a006:	4b80      	ldr	r3, [pc, #512]	; (800a208 <CDC_Receive_FS+0x300>)
 800a008:	2205      	movs	r2, #5
 800a00a:	701a      	strb	r2, [r3, #0]
		  break;
 800a00c:	e129      	b.n	800a262 <CDC_Receive_FS+0x35a>
	  case 'D': //measuring 3v3 voltage at PA2 (ADC1_IN2)
		  SMV_Step = CHECK_3V3;
 800a00e:	4b7e      	ldr	r3, [pc, #504]	; (800a208 <CDC_Receive_FS+0x300>)
 800a010:	2206      	movs	r2, #6
 800a012:	701a      	strb	r2, [r3, #0]
		  break;
 800a014:	e125      	b.n	800a262 <CDC_Receive_FS+0x35a>
	  case 'F':///Flash
		  switch(Buf[2])
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3302      	adds	r3, #2
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	3b41      	subs	r3, #65	; 0x41
 800a01e:	2b11      	cmp	r3, #17
 800a020:	f200 811e 	bhi.w	800a260 <CDC_Receive_FS+0x358>
 800a024:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <CDC_Receive_FS+0x124>)
 800a026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02a:	bf00      	nop
 800a02c:	0800a095 	.word	0x0800a095
 800a030:	0800a085 	.word	0x0800a085
 800a034:	0800a075 	.word	0x0800a075
 800a038:	0800a261 	.word	0x0800a261
 800a03c:	0800a10d 	.word	0x0800a10d
 800a040:	0800a09d 	.word	0x0800a09d
 800a044:	0800a261 	.word	0x0800a261
 800a048:	0800a261 	.word	0x0800a261
 800a04c:	0800a261 	.word	0x0800a261
 800a050:	0800a261 	.word	0x0800a261
 800a054:	0800a261 	.word	0x0800a261
 800a058:	0800a261 	.word	0x0800a261
 800a05c:	0800a261 	.word	0x0800a261
 800a060:	0800a261 	.word	0x0800a261
 800a064:	0800a261 	.word	0x0800a261
 800a068:	0800a08d 	.word	0x0800a08d
 800a06c:	0800a261 	.word	0x0800a261
 800a070:	0800a07d 	.word	0x0800a07d
		  {
		  case 'C':
			  SMV_Step = CONNECT_ESP;
 800a074:	4b64      	ldr	r3, [pc, #400]	; (800a208 <CDC_Receive_FS+0x300>)
 800a076:	2207      	movs	r2, #7
 800a078:	701a      	strb	r2, [r3, #0]
			  break;
 800a07a:	e067      	b.n	800a14c <CDC_Receive_FS+0x244>
		  case 'R':
			  SMV_Step = RESET_ESP;
 800a07c:	4b62      	ldr	r3, [pc, #392]	; (800a208 <CDC_Receive_FS+0x300>)
 800a07e:	220c      	movs	r2, #12
 800a080:	701a      	strb	r2, [r3, #0]
			  break;
 800a082:	e063      	b.n	800a14c <CDC_Receive_FS+0x244>
		  case 'B'://Start flash bootloader binary
			  SMV_Step = START_FLASH_BOOTLOADER;
 800a084:	4b60      	ldr	r3, [pc, #384]	; (800a208 <CDC_Receive_FS+0x300>)
 800a086:	2208      	movs	r2, #8
 800a088:	701a      	strb	r2, [r3, #0]
			  break;
 800a08a:	e05f      	b.n	800a14c <CDC_Receive_FS+0x244>
		  case 'P'://Start flash partition binary
			  SMV_Step = START_FLASH_PARTITION;
 800a08c:	4b5e      	ldr	r3, [pc, #376]	; (800a208 <CDC_Receive_FS+0x300>)
 800a08e:	2209      	movs	r2, #9
 800a090:	701a      	strb	r2, [r3, #0]
			  break;
 800a092:	e05b      	b.n	800a14c <CDC_Receive_FS+0x244>
		  case 'A'://Start flash application binary
			  SMV_Step = START_FLASH_APP;
 800a094:	4b5c      	ldr	r3, [pc, #368]	; (800a208 <CDC_Receive_FS+0x300>)
 800a096:	220a      	movs	r2, #10
 800a098:	701a      	strb	r2, [r3, #0]
			  break;
 800a09a:	e057      	b.n	800a14c <CDC_Receive_FS+0x244>
		  case 'F'://Started Received Binary and write
			  current_len = 0;
 800a09c:	4b5b      	ldr	r3, [pc, #364]	; (800a20c <CDC_Receive_FS+0x304>)
 800a09e:	2200      	movs	r2, #0
 800a0a0:	801a      	strh	r2, [r3, #0]
			  written_len = 0;
 800a0a2:	4b5b      	ldr	r3, [pc, #364]	; (800a210 <CDC_Receive_FS+0x308>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]
			  binary_len = 0;
 800a0a8:	4b5a      	ldr	r3, [pc, #360]	; (800a214 <CDC_Receive_FS+0x30c>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]
			  for(uint8_t i = 3; i <= 13; i++)
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	73fb      	strb	r3, [r7, #15]
 800a0b2:	e01c      	b.n	800a0ee <CDC_Receive_FS+0x1e6>
			  {
				  if(Buf[i] == ' ') break;
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b20      	cmp	r3, #32
 800a0be:	d01a      	beq.n	800a0f6 <CDC_Receive_FS+0x1ee>
				  binary_len *= 10;
 800a0c0:	4b54      	ldr	r3, [pc, #336]	; (800a214 <CDC_Receive_FS+0x30c>)
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	005b      	lsls	r3, r3, #1
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	4b51      	ldr	r3, [pc, #324]	; (800a214 <CDC_Receive_FS+0x30c>)
 800a0d0:	601a      	str	r2, [r3, #0]
				  binary_len += Buf[i] - 48;
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	4b4d      	ldr	r3, [pc, #308]	; (800a214 <CDC_Receive_FS+0x30c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	3b30      	subs	r3, #48	; 0x30
 800a0e4:	4a4b      	ldr	r2, [pc, #300]	; (800a214 <CDC_Receive_FS+0x30c>)
 800a0e6:	6013      	str	r3, [r2, #0]
			  for(uint8_t i = 3; i <= 13; i++)
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	73fb      	strb	r3, [r7, #15]
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	2b0d      	cmp	r3, #13
 800a0f2:	d9df      	bls.n	800a0b4 <CDC_Receive_FS+0x1ac>
 800a0f4:	e000      	b.n	800a0f8 <CDC_Receive_FS+0x1f0>
				  if(Buf[i] == ' ') break;
 800a0f6:	bf00      	nop
			  }
			  CDC_Transmit_FS(Buf, Len);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f8ea 	bl	800a2d8 <CDC_Transmit_FS>
			  SMV_Step = RECEIVE_BIN;
 800a104:	4b40      	ldr	r3, [pc, #256]	; (800a208 <CDC_Receive_FS+0x300>)
 800a106:	220b      	movs	r2, #11
 800a108:	701a      	strb	r2, [r3, #0]
			  break;
 800a10a:	e01f      	b.n	800a14c <CDC_Receive_FS+0x244>
		  case 'E':
			  free(uBuf);
 800a10c:	4842      	ldr	r0, [pc, #264]	; (800a218 <CDC_Receive_FS+0x310>)
 800a10e:	f000 fd69 	bl	800abe4 <free>
			  if(Buf[3]==' '&&Buf[4]==' '&&Buf[5]==' '&&Buf[6]==' '&&Buf[7]==' ')
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	3303      	adds	r3, #3
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b20      	cmp	r3, #32
 800a11a:	d116      	bne.n	800a14a <CDC_Receive_FS+0x242>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	3304      	adds	r3, #4
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b20      	cmp	r3, #32
 800a124:	d111      	bne.n	800a14a <CDC_Receive_FS+0x242>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3305      	adds	r3, #5
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b20      	cmp	r3, #32
 800a12e:	d10c      	bne.n	800a14a <CDC_Receive_FS+0x242>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3306      	adds	r3, #6
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	2b20      	cmp	r3, #32
 800a138:	d107      	bne.n	800a14a <CDC_Receive_FS+0x242>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3307      	adds	r3, #7
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b20      	cmp	r3, #32
 800a142:	d102      	bne.n	800a14a <CDC_Receive_FS+0x242>
			  SMV_Step = IDLE;
 800a144:	4b30      	ldr	r3, [pc, #192]	; (800a208 <CDC_Receive_FS+0x300>)
 800a146:	2200      	movs	r2, #0
 800a148:	701a      	strb	r2, [r3, #0]
			  break;
 800a14a:	bf00      	nop
		  }
		  break;
 800a14c:	e088      	b.n	800a260 <CDC_Receive_FS+0x358>
	  case '1':
		  //
		  break;
	  case '2'://Check Battery capacity, Temperature
		  SMV_Step = GET_BATTERY_CAPACITY;
 800a14e:	4b2e      	ldr	r3, [pc, #184]	; (800a208 <CDC_Receive_FS+0x300>)
 800a150:	2210      	movs	r2, #16
 800a152:	701a      	strb	r2, [r3, #0]
		  break;
 800a154:	e085      	b.n	800a262 <CDC_Receive_FS+0x35a>
	  case '3'://Check AIDI:
		  AIDI_Param.DO_Freq[0] = hex2int(&Buf[2]);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	3302      	adds	r3, #2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7ff fe16 	bl	8009d8c <hex2int>
 800a160:	4603      	mov	r3, r0
 800a162:	461a      	mov	r2, r3
 800a164:	4b2d      	ldr	r3, [pc, #180]	; (800a21c <CDC_Receive_FS+0x314>)
 800a166:	701a      	strb	r2, [r3, #0]
		  AIDI_Param.DO_Freq[1] = hex2int(&Buf[4]);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	3304      	adds	r3, #4
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7ff fe0d 	bl	8009d8c <hex2int>
 800a172:	4603      	mov	r3, r0
 800a174:	461a      	mov	r2, r3
 800a176:	4b29      	ldr	r3, [pc, #164]	; (800a21c <CDC_Receive_FS+0x314>)
 800a178:	705a      	strb	r2, [r3, #1]
		  AIDI_Param.DO_Freq[2] = hex2int(&Buf[6]);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3306      	adds	r3, #6
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff fe04 	bl	8009d8c <hex2int>
 800a184:	4603      	mov	r3, r0
 800a186:	461a      	mov	r2, r3
 800a188:	4b24      	ldr	r3, [pc, #144]	; (800a21c <CDC_Receive_FS+0x314>)
 800a18a:	709a      	strb	r2, [r3, #2]
		  AIDI_Param.DO_Freq[3] = hex2int(&Buf[8]);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3308      	adds	r3, #8
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff fdfb 	bl	8009d8c <hex2int>
 800a196:	4603      	mov	r3, r0
 800a198:	461a      	mov	r2, r3
 800a19a:	4b20      	ldr	r3, [pc, #128]	; (800a21c <CDC_Receive_FS+0x314>)
 800a19c:	70da      	strb	r2, [r3, #3]
		  AIDI_Param.AO_Level = hex2int(&Buf[10]);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	330a      	adds	r3, #10
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fdf2 	bl	8009d8c <hex2int>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	4b1b      	ldr	r3, [pc, #108]	; (800a21c <CDC_Receive_FS+0x314>)
 800a1ae:	711a      	strb	r2, [r3, #4]
		  AIDI_Param.Timeout = hex2int(&Buf[12]);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	330c      	adds	r3, #12
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fde9 	bl	8009d8c <hex2int>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	461a      	mov	r2, r3
 800a1be:	4b17      	ldr	r3, [pc, #92]	; (800a21c <CDC_Receive_FS+0x314>)
 800a1c0:	715a      	strb	r2, [r3, #5]
		  SMV_Step = CHECK_AIDI;
 800a1c2:	4b11      	ldr	r3, [pc, #68]	; (800a208 <CDC_Receive_FS+0x300>)
 800a1c4:	2211      	movs	r2, #17
 800a1c6:	701a      	strb	r2, [r3, #0]
		  break;
 800a1c8:	e04b      	b.n	800a262 <CDC_Receive_FS+0x35a>
	  case '4':
		  SIM_Power.ONOFF = Buf[2]-48;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	3302      	adds	r3, #2
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	3b30      	subs	r3, #48	; 0x30
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	4b12      	ldr	r3, [pc, #72]	; (800a220 <CDC_Receive_FS+0x318>)
 800a1d6:	701a      	strb	r2, [r3, #0]
		  SIM_Power.Timeout = hex2int(&Buf[3]);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	3303      	adds	r3, #3
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff fdd5 	bl	8009d8c <hex2int>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	4b0e      	ldr	r3, [pc, #56]	; (800a220 <CDC_Receive_FS+0x318>)
 800a1e8:	705a      	strb	r2, [r3, #1]
		  SMV_Step = CHECK_1V8;
 800a1ea:	4b07      	ldr	r3, [pc, #28]	; (800a208 <CDC_Receive_FS+0x300>)
 800a1ec:	2212      	movs	r2, #18
 800a1ee:	701a      	strb	r2, [r3, #0]
		  break;
 800a1f0:	e037      	b.n	800a262 <CDC_Receive_FS+0x35a>
	  case '5':
		  SMV_Step = CHECK_SIM_STATUS;
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <CDC_Receive_FS+0x300>)
 800a1f4:	2213      	movs	r2, #19
 800a1f6:	701a      	strb	r2, [r3, #0]
		  break;
 800a1f8:	e033      	b.n	800a262 <CDC_Receive_FS+0x35a>
	  case '6':
		  SMV_Step = CHECK_SIM_SIGNAL;
 800a1fa:	4b03      	ldr	r3, [pc, #12]	; (800a208 <CDC_Receive_FS+0x300>)
 800a1fc:	2214      	movs	r2, #20
 800a1fe:	701a      	strb	r2, [r3, #0]
		  break;
 800a200:	e02f      	b.n	800a262 <CDC_Receive_FS+0x35a>
 800a202:	bf00      	nop
 800a204:	20000444 	.word	0x20000444
 800a208:	20000722 	.word	0x20000722
 800a20c:	20000b2a 	.word	0x20000b2a
 800a210:	20000b2c 	.word	0x20000b2c
 800a214:	20000724 	.word	0x20000724
 800a218:	20000728 	.word	0x20000728
 800a21c:	20001b30 	.word	0x20001b30
 800a220:	20001b38 	.word	0x20001b38
	  case '7':
		  CheckSimETH_Timeout = hex2int(&Buf[2]);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3302      	adds	r3, #2
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff fdaf 	bl	8009d8c <hex2int>
 800a22e:	4603      	mov	r3, r0
 800a230:	461a      	mov	r2, r3
 800a232:	4b21      	ldr	r3, [pc, #132]	; (800a2b8 <CDC_Receive_FS+0x3b0>)
 800a234:	701a      	strb	r2, [r3, #0]
	  	  SMV_Step = CHECK_SIM_ETH;
 800a236:	4b21      	ldr	r3, [pc, #132]	; (800a2bc <CDC_Receive_FS+0x3b4>)
 800a238:	2215      	movs	r2, #21
 800a23a:	701a      	strb	r2, [r3, #0]
	  	  break;
 800a23c:	e011      	b.n	800a262 <CDC_Receive_FS+0x35a>
	  case '8':
		  CheckETH_Timeout = hex2int(&Buf[2]);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	3302      	adds	r3, #2
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fda2 	bl	8009d8c <hex2int>
 800a248:	4603      	mov	r3, r0
 800a24a:	461a      	mov	r2, r3
 800a24c:	4b1c      	ldr	r3, [pc, #112]	; (800a2c0 <CDC_Receive_FS+0x3b8>)
 800a24e:	701a      	strb	r2, [r3, #0]
		  SMV_Step = CHECK_ETH;
 800a250:	4b1a      	ldr	r3, [pc, #104]	; (800a2bc <CDC_Receive_FS+0x3b4>)
 800a252:	2216      	movs	r2, #22
 800a254:	701a      	strb	r2, [r3, #0]
		  break;
 800a256:	e004      	b.n	800a262 <CDC_Receive_FS+0x35a>
		  break;
 800a258:	bf00      	nop
 800a25a:	e025      	b.n	800a2a8 <CDC_Receive_FS+0x3a0>
	  break;
 800a25c:	bf00      	nop
 800a25e:	e023      	b.n	800a2a8 <CDC_Receive_FS+0x3a0>
		  break;
 800a260:	bf00      	nop
	  switch(Buf[1])
 800a262:	e021      	b.n	800a2a8 <CDC_Receive_FS+0x3a0>
	  }
  }
  else if(SMV_Step == RECEIVE_BIN)
 800a264:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <CDC_Receive_FS+0x3b4>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	2b0b      	cmp	r3, #11
 800a26a:	d11d      	bne.n	800a2a8 <CDC_Receive_FS+0x3a0>
  {
//	  if(HAL_UART_Transmit(&huart2, Buf, *Len, 1000)==HAL_OK)
//		  fESPFlashProcess = 1;
//Here per block we have 64bytes:
	  if(current_len + *Len <= 1024)
 800a26c:	4b15      	ldr	r3, [pc, #84]	; (800a2c4 <CDC_Receive_FS+0x3bc>)
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	461a      	mov	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4413      	add	r3, r2
 800a278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a27c:	d811      	bhi.n	800a2a2 <CDC_Receive_FS+0x39a>
	  {
		  strcat(uBuf, Buf);
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	4811      	ldr	r0, [pc, #68]	; (800a2c8 <CDC_Receive_FS+0x3c0>)
 800a282:	f000 fd0b 	bl	800ac9c <strcat>
		  CDC_Transmit_FS((uint8_t*) "$PG           #\n\r", 17);
 800a286:	2111      	movs	r1, #17
 800a288:	4810      	ldr	r0, [pc, #64]	; (800a2cc <CDC_Receive_FS+0x3c4>)
 800a28a:	f000 f825 	bl	800a2d8 <CDC_Transmit_FS>
		  current_len += *Len;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	b29a      	uxth	r2, r3
 800a294:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <CDC_Receive_FS+0x3bc>)
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	4413      	add	r3, r2
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <CDC_Receive_FS+0x3bc>)
 800a29e:	801a      	strh	r2, [r3, #0]
 800a2a0:	e002      	b.n	800a2a8 <CDC_Receive_FS+0x3a0>

	  }else fESPFlashProcess = 1;
 800a2a2:	4b0b      	ldr	r3, [pc, #44]	; (800a2d0 <CDC_Receive_FS+0x3c8>)
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	701a      	strb	r2, [r3, #0]
//		  //*uBuf++;
//	  }
//	  time_+=1;
//	  fESPFlashProcess = 1;
  }
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2a8:	480a      	ldr	r0, [pc, #40]	; (800a2d4 <CDC_Receive_FS+0x3cc>)
 800a2aa:	f7fe fa17 	bl	80086dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2ae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	20000b28 	.word	0x20000b28
 800a2bc:	20000722 	.word	0x20000722
 800a2c0:	20000b29 	.word	0x20000b29
 800a2c4:	20000b2a 	.word	0x20000b2a
 800a2c8:	20000728 	.word	0x20000728
 800a2cc:	0800ada8 	.word	0x0800ada8
 800a2d0:	20000720 	.word	0x20000720
 800a2d4:	20000444 	.word	0x20000444

0800a2d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a2e8:	4b0d      	ldr	r3, [pc, #52]	; (800a320 <CDC_Transmit_FS+0x48>)
 800a2ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e00b      	b.n	800a316 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a2fe:	887b      	ldrh	r3, [r7, #2]
 800a300:	461a      	mov	r2, r3
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	4806      	ldr	r0, [pc, #24]	; (800a320 <CDC_Transmit_FS+0x48>)
 800a306:	f7fe f963 	bl	80085d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a30a:	4805      	ldr	r0, [pc, #20]	; (800a320 <CDC_Transmit_FS+0x48>)
 800a30c:	f7fe f9a0 	bl	8008650 <USBD_CDC_TransmitPacket>
 800a310:	4603      	mov	r3, r0
 800a312:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 7 */
  return result;
 800a314:	7bfb      	ldrb	r3, [r7, #15]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000444 	.word	0x20000444

0800a324 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a324:	b480      	push	{r7}
 800a326:	b087      	sub	sp, #28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	4613      	mov	r3, r2
 800a330:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  fTransmitCpt = 1;
 800a336:	4b05      	ldr	r3, [pc, #20]	; (800a34c <CDC_TransmitCplt_FS+0x28>)
 800a338:	2201      	movs	r2, #1
 800a33a:	701a      	strb	r2, [r3, #0]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a33c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a340:	4618      	mov	r0, r3
 800a342:	371c      	adds	r7, #28
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	20000721 	.word	0x20000721

0800a350 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	6039      	str	r1, [r7, #0]
 800a35a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2212      	movs	r2, #18
 800a360:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a362:	4b03      	ldr	r3, [pc, #12]	; (800a370 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	200000cc 	.word	0x200000cc

0800a374 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	6039      	str	r1, [r7, #0]
 800a37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2204      	movs	r2, #4
 800a384:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a386:	4b03      	ldr	r3, [pc, #12]	; (800a394 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	200000e0 	.word	0x200000e0

0800a398 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	6039      	str	r1, [r7, #0]
 800a3a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3a4:	79fb      	ldrb	r3, [r7, #7]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d105      	bne.n	800a3b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	4907      	ldr	r1, [pc, #28]	; (800a3cc <USBD_FS_ProductStrDescriptor+0x34>)
 800a3ae:	4808      	ldr	r0, [pc, #32]	; (800a3d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3b0:	f7ff fbdc 	bl	8009b6c <USBD_GetString>
 800a3b4:	e004      	b.n	800a3c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	4904      	ldr	r1, [pc, #16]	; (800a3cc <USBD_FS_ProductStrDescriptor+0x34>)
 800a3ba:	4805      	ldr	r0, [pc, #20]	; (800a3d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3bc:	f7ff fbd6 	bl	8009b6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3c0:	4b02      	ldr	r3, [pc, #8]	; (800a3cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20001b3c 	.word	0x20001b3c
 800a3d0:	0800adbc 	.word	0x0800adbc

0800a3d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	6039      	str	r1, [r7, #0]
 800a3de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	4904      	ldr	r1, [pc, #16]	; (800a3f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a3e4:	4804      	ldr	r0, [pc, #16]	; (800a3f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a3e6:	f7ff fbc1 	bl	8009b6c <USBD_GetString>
  return USBD_StrDesc;
 800a3ea:	4b02      	ldr	r3, [pc, #8]	; (800a3f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	20001b3c 	.word	0x20001b3c
 800a3f8:	0800add4 	.word	0x0800add4

0800a3fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	221a      	movs	r2, #26
 800a40c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a40e:	f000 f843 	bl	800a498 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a412:	4b02      	ldr	r3, [pc, #8]	; (800a41c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a414:	4618      	mov	r0, r3
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	200000e4 	.word	0x200000e4

0800a420 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	6039      	str	r1, [r7, #0]
 800a42a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a42c:	79fb      	ldrb	r3, [r7, #7]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d105      	bne.n	800a43e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	4907      	ldr	r1, [pc, #28]	; (800a454 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a436:	4808      	ldr	r0, [pc, #32]	; (800a458 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a438:	f7ff fb98 	bl	8009b6c <USBD_GetString>
 800a43c:	e004      	b.n	800a448 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	4904      	ldr	r1, [pc, #16]	; (800a454 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a442:	4805      	ldr	r0, [pc, #20]	; (800a458 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a444:	f7ff fb92 	bl	8009b6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a448:	4b02      	ldr	r3, [pc, #8]	; (800a454 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	20001b3c 	.word	0x20001b3c
 800a458:	0800ade8 	.word	0x0800ade8

0800a45c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	4603      	mov	r3, r0
 800a464:	6039      	str	r1, [r7, #0]
 800a466:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a468:	79fb      	ldrb	r3, [r7, #7]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d105      	bne.n	800a47a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	4907      	ldr	r1, [pc, #28]	; (800a490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a472:	4808      	ldr	r0, [pc, #32]	; (800a494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a474:	f7ff fb7a 	bl	8009b6c <USBD_GetString>
 800a478:	e004      	b.n	800a484 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	4904      	ldr	r1, [pc, #16]	; (800a490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a47e:	4805      	ldr	r0, [pc, #20]	; (800a494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a480:	f7ff fb74 	bl	8009b6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a484:	4b02      	ldr	r3, [pc, #8]	; (800a490 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20001b3c 	.word	0x20001b3c
 800a494:	0800adf4 	.word	0x0800adf4

0800a498 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a49e:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <Get_SerialNum+0x44>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4a4:	4b0e      	ldr	r3, [pc, #56]	; (800a4e0 <Get_SerialNum+0x48>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4aa:	4b0e      	ldr	r3, [pc, #56]	; (800a4e4 <Get_SerialNum+0x4c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d009      	beq.n	800a4d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4be:	2208      	movs	r2, #8
 800a4c0:	4909      	ldr	r1, [pc, #36]	; (800a4e8 <Get_SerialNum+0x50>)
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f000 f814 	bl	800a4f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4c8:	2204      	movs	r2, #4
 800a4ca:	4908      	ldr	r1, [pc, #32]	; (800a4ec <Get_SerialNum+0x54>)
 800a4cc:	68b8      	ldr	r0, [r7, #8]
 800a4ce:	f000 f80f 	bl	800a4f0 <IntToUnicode>
  }
}
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	1fff7a10 	.word	0x1fff7a10
 800a4e0:	1fff7a14 	.word	0x1fff7a14
 800a4e4:	1fff7a18 	.word	0x1fff7a18
 800a4e8:	200000e6 	.word	0x200000e6
 800a4ec:	200000f6 	.word	0x200000f6

0800a4f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a502:	2300      	movs	r3, #0
 800a504:	75fb      	strb	r3, [r7, #23]
 800a506:	e027      	b.n	800a558 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	0f1b      	lsrs	r3, r3, #28
 800a50c:	2b09      	cmp	r3, #9
 800a50e:	d80b      	bhi.n	800a528 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	0f1b      	lsrs	r3, r3, #28
 800a514:	b2da      	uxtb	r2, r3
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	4619      	mov	r1, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	440b      	add	r3, r1
 800a520:	3230      	adds	r2, #48	; 0x30
 800a522:	b2d2      	uxtb	r2, r2
 800a524:	701a      	strb	r2, [r3, #0]
 800a526:	e00a      	b.n	800a53e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	0f1b      	lsrs	r3, r3, #28
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
 800a530:	005b      	lsls	r3, r3, #1
 800a532:	4619      	mov	r1, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	440b      	add	r3, r1
 800a538:	3237      	adds	r2, #55	; 0x37
 800a53a:	b2d2      	uxtb	r2, r2
 800a53c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	011b      	lsls	r3, r3, #4
 800a542:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a544:	7dfb      	ldrb	r3, [r7, #23]
 800a546:	005b      	lsls	r3, r3, #1
 800a548:	3301      	adds	r3, #1
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	4413      	add	r3, r2
 800a54e:	2200      	movs	r2, #0
 800a550:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a552:	7dfb      	ldrb	r3, [r7, #23]
 800a554:	3301      	adds	r3, #1
 800a556:	75fb      	strb	r3, [r7, #23]
 800a558:	7dfa      	ldrb	r2, [r7, #23]
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d3d3      	bcc.n	800a508 <IntToUnicode+0x18>
  }
}
 800a560:	bf00      	nop
 800a562:	bf00      	nop
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr
	...

0800a570 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08a      	sub	sp, #40	; 0x28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a578:	f107 0314 	add.w	r3, r7, #20
 800a57c:	2200      	movs	r2, #0
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	605a      	str	r2, [r3, #4]
 800a582:	609a      	str	r2, [r3, #8]
 800a584:	60da      	str	r2, [r3, #12]
 800a586:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a590:	d13a      	bne.n	800a608 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a592:	2300      	movs	r3, #0
 800a594:	613b      	str	r3, [r7, #16]
 800a596:	4b1e      	ldr	r3, [pc, #120]	; (800a610 <HAL_PCD_MspInit+0xa0>)
 800a598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59a:	4a1d      	ldr	r2, [pc, #116]	; (800a610 <HAL_PCD_MspInit+0xa0>)
 800a59c:	f043 0301 	orr.w	r3, r3, #1
 800a5a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a5a2:	4b1b      	ldr	r3, [pc, #108]	; (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	613b      	str	r3, [r7, #16]
 800a5ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a5ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a5b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5c0:	230a      	movs	r3, #10
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5c4:	f107 0314 	add.w	r3, r7, #20
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4812      	ldr	r0, [pc, #72]	; (800a614 <HAL_PCD_MspInit+0xa4>)
 800a5cc:	f7f8 fbd2 	bl	8002d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d4:	4a0e      	ldr	r2, [pc, #56]	; (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5da:	6353      	str	r3, [r2, #52]	; 0x34
 800a5dc:	2300      	movs	r3, #0
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	4b0b      	ldr	r3, [pc, #44]	; (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5e4:	4a0a      	ldr	r2, [pc, #40]	; (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5ea:	6453      	str	r3, [r2, #68]	; 0x44
 800a5ec:	4b08      	ldr	r3, [pc, #32]	; (800a610 <HAL_PCD_MspInit+0xa0>)
 800a5ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	2043      	movs	r0, #67	; 0x43
 800a5fe:	f7f8 fb12 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a602:	2043      	movs	r0, #67	; 0x43
 800a604:	f7f8 fb2b 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a608:	bf00      	nop
 800a60a:	3728      	adds	r7, #40	; 0x28
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	40023800 	.word	0x40023800
 800a614:	40020000 	.word	0x40020000

0800a618 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7fe f93d 	bl	80088ae <USBD_LL_SetupStage>
}
 800a634:	bf00      	nop
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a64e:	78fa      	ldrb	r2, [r7, #3]
 800a650:	6879      	ldr	r1, [r7, #4]
 800a652:	4613      	mov	r3, r2
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	4413      	add	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	440b      	add	r3, r1
 800a65c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	78fb      	ldrb	r3, [r7, #3]
 800a664:	4619      	mov	r1, r3
 800a666:	f7fe f977 	bl	8008958 <USBD_LL_DataOutStage>
}
 800a66a:	bf00      	nop
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	460b      	mov	r3, r1
 800a67c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a684:	78fa      	ldrb	r2, [r7, #3]
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	4613      	mov	r3, r2
 800a68a:	00db      	lsls	r3, r3, #3
 800a68c:	4413      	add	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	440b      	add	r3, r1
 800a692:	334c      	adds	r3, #76	; 0x4c
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	78fb      	ldrb	r3, [r7, #3]
 800a698:	4619      	mov	r1, r3
 800a69a:	f7fe fa10 	bl	8008abe <USBD_LL_DataInStage>
}
 800a69e:	bf00      	nop
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fe fb44 	bl	8008d42 <USBD_LL_SOF>
}
 800a6ba:	bf00      	nop
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d102      	bne.n	800a6dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
 800a6da:	e008      	b.n	800a6ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d102      	bne.n	800a6ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	73fb      	strb	r3, [r7, #15]
 800a6e8:	e001      	b.n	800a6ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a6ea:	f7f6 fbfd 	bl	8000ee8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6f4:	7bfa      	ldrb	r2, [r7, #15]
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fe fae4 	bl	8008cc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a704:	4618      	mov	r0, r3
 800a706:	f7fe fa8c 	bl	8008c22 <USBD_LL_Reset>
}
 800a70a:	bf00      	nop
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe fadf 	bl	8008ce6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	6812      	ldr	r2, [r2, #0]
 800a736:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a73a:	f043 0301 	orr.w	r3, r3, #1
 800a73e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a1b      	ldr	r3, [r3, #32]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d005      	beq.n	800a754 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a748:	4b04      	ldr	r3, [pc, #16]	; (800a75c <HAL_PCD_SuspendCallback+0x48>)
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	4a03      	ldr	r2, [pc, #12]	; (800a75c <HAL_PCD_SuspendCallback+0x48>)
 800a74e:	f043 0306 	orr.w	r3, r3, #6
 800a752:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a754:	bf00      	nop
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	e000ed00 	.word	0xe000ed00

0800a760 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe facf 	bl	8008d12 <USBD_LL_Resume>
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a78e:	78fa      	ldrb	r2, [r7, #3]
 800a790:	4611      	mov	r1, r2
 800a792:	4618      	mov	r0, r3
 800a794:	f7fe fb27 	bl	8008de6 <USBD_LL_IsoOUTIncomplete>
}
 800a798:	bf00      	nop
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7b2:	78fa      	ldrb	r2, [r7, #3]
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fe fae3 	bl	8008d82 <USBD_LL_IsoINIncomplete>
}
 800a7bc:	bf00      	nop
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fe fb39 	bl	8008e4a <USBD_LL_DevConnected>
}
 800a7d8:	bf00      	nop
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fe fb36 	bl	8008e60 <USBD_LL_DevDisconnected>
}
 800a7f4:	bf00      	nop
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d13c      	bne.n	800a886 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a80c:	4a20      	ldr	r2, [pc, #128]	; (800a890 <USBD_LL_Init+0x94>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a1e      	ldr	r2, [pc, #120]	; (800a890 <USBD_LL_Init+0x94>)
 800a818:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a81c:	4b1c      	ldr	r3, [pc, #112]	; (800a890 <USBD_LL_Init+0x94>)
 800a81e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a822:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a824:	4b1a      	ldr	r3, [pc, #104]	; (800a890 <USBD_LL_Init+0x94>)
 800a826:	2204      	movs	r2, #4
 800a828:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a82a:	4b19      	ldr	r3, [pc, #100]	; (800a890 <USBD_LL_Init+0x94>)
 800a82c:	2202      	movs	r2, #2
 800a82e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a830:	4b17      	ldr	r3, [pc, #92]	; (800a890 <USBD_LL_Init+0x94>)
 800a832:	2200      	movs	r2, #0
 800a834:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a836:	4b16      	ldr	r3, [pc, #88]	; (800a890 <USBD_LL_Init+0x94>)
 800a838:	2202      	movs	r2, #2
 800a83a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a83c:	4b14      	ldr	r3, [pc, #80]	; (800a890 <USBD_LL_Init+0x94>)
 800a83e:	2200      	movs	r2, #0
 800a840:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a842:	4b13      	ldr	r3, [pc, #76]	; (800a890 <USBD_LL_Init+0x94>)
 800a844:	2200      	movs	r2, #0
 800a846:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a848:	4b11      	ldr	r3, [pc, #68]	; (800a890 <USBD_LL_Init+0x94>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a84e:	4b10      	ldr	r3, [pc, #64]	; (800a890 <USBD_LL_Init+0x94>)
 800a850:	2200      	movs	r2, #0
 800a852:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a854:	4b0e      	ldr	r3, [pc, #56]	; (800a890 <USBD_LL_Init+0x94>)
 800a856:	2200      	movs	r2, #0
 800a858:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a85a:	480d      	ldr	r0, [pc, #52]	; (800a890 <USBD_LL_Init+0x94>)
 800a85c:	f7f9 f89b 	bl	8003996 <HAL_PCD_Init>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a866:	f7f6 fb3f 	bl	8000ee8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a86a:	2180      	movs	r1, #128	; 0x80
 800a86c:	4808      	ldr	r0, [pc, #32]	; (800a890 <USBD_LL_Init+0x94>)
 800a86e:	f7fa faf2 	bl	8004e56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a872:	2240      	movs	r2, #64	; 0x40
 800a874:	2100      	movs	r1, #0
 800a876:	4806      	ldr	r0, [pc, #24]	; (800a890 <USBD_LL_Init+0x94>)
 800a878:	f7fa faa6 	bl	8004dc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a87c:	2280      	movs	r2, #128	; 0x80
 800a87e:	2101      	movs	r1, #1
 800a880:	4803      	ldr	r0, [pc, #12]	; (800a890 <USBD_LL_Init+0x94>)
 800a882:	f7fa faa1 	bl	8004dc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	20001d3c 	.word	0x20001d3c

0800a894 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7f9 f990 	bl	8003bd0 <HAL_PCD_Start>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 f942 	bl	800ab40 <USBD_Get_USB_Status>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	4608      	mov	r0, r1
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	4603      	mov	r3, r0
 800a8da:	70fb      	strb	r3, [r7, #3]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	70bb      	strb	r3, [r7, #2]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a8f2:	78bb      	ldrb	r3, [r7, #2]
 800a8f4:	883a      	ldrh	r2, [r7, #0]
 800a8f6:	78f9      	ldrb	r1, [r7, #3]
 800a8f8:	f7f9 fe61 	bl	80045be <HAL_PCD_EP_Open>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 f91c 	bl	800ab40 <USBD_Get_USB_Status>
 800a908:	4603      	mov	r3, r0
 800a90a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b084      	sub	sp, #16
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	460b      	mov	r3, r1
 800a920:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a930:	78fa      	ldrb	r2, [r7, #3]
 800a932:	4611      	mov	r1, r2
 800a934:	4618      	mov	r0, r3
 800a936:	f7f9 feaa 	bl	800468e <HAL_PCD_EP_Close>
 800a93a:	4603      	mov	r3, r0
 800a93c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
 800a940:	4618      	mov	r0, r3
 800a942:	f000 f8fd 	bl	800ab40 <USBD_Get_USB_Status>
 800a946:	4603      	mov	r3, r0
 800a948:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	460b      	mov	r3, r1
 800a95e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a96e:	78fa      	ldrb	r2, [r7, #3]
 800a970:	4611      	mov	r1, r2
 800a972:	4618      	mov	r0, r3
 800a974:	f7f9 ff82 	bl	800487c <HAL_PCD_EP_SetStall>
 800a978:	4603      	mov	r3, r0
 800a97a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 f8de 	bl	800ab40 <USBD_Get_USB_Status>
 800a984:	4603      	mov	r3, r0
 800a986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a988:	7bbb      	ldrb	r3, [r7, #14]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	460b      	mov	r3, r1
 800a99c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9ac:	78fa      	ldrb	r2, [r7, #3]
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7f9 ffc7 	bl	8004944 <HAL_PCD_EP_ClrStall>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 f8bf 	bl	800ab40 <USBD_Get_USB_Status>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	da0b      	bge.n	800aa04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a9ec:	78fb      	ldrb	r3, [r7, #3]
 800a9ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9f2:	68f9      	ldr	r1, [r7, #12]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	00db      	lsls	r3, r3, #3
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	440b      	add	r3, r1
 800a9fe:	333e      	adds	r3, #62	; 0x3e
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	e00b      	b.n	800aa1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa0a:	68f9      	ldr	r1, [r7, #12]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	440b      	add	r3, r1
 800aa16:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800aa1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa42:	78fa      	ldrb	r2, [r7, #3]
 800aa44:	4611      	mov	r1, r2
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7f9 fd94 	bl	8004574 <HAL_PCD_SetAddress>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 f874 	bl	800ab40 <USBD_Get_USB_Status>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	607a      	str	r2, [r7, #4]
 800aa70:	603b      	str	r3, [r7, #0]
 800aa72:	460b      	mov	r3, r1
 800aa74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aa84:	7af9      	ldrb	r1, [r7, #11]
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	f7f9 fead 	bl	80047e8 <HAL_PCD_EP_Transmit>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 f853 	bl	800ab40 <USBD_Get_USB_Status>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa9e:	7dbb      	ldrb	r3, [r7, #22]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3718      	adds	r7, #24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	607a      	str	r2, [r7, #4]
 800aab2:	603b      	str	r3, [r7, #0]
 800aab4:	460b      	mov	r3, r1
 800aab6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aac6:	7af9      	ldrb	r1, [r7, #11]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	f7f9 fe29 	bl	8004722 <HAL_PCD_EP_Receive>
 800aad0:	4603      	mov	r3, r0
 800aad2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 f832 	bl	800ab40 <USBD_Get_USB_Status>
 800aadc:	4603      	mov	r3, r0
 800aade:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aae0:	7dbb      	ldrb	r3, [r7, #22]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3718      	adds	r7, #24
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b082      	sub	sp, #8
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aafc:	78fa      	ldrb	r2, [r7, #3]
 800aafe:	4611      	mov	r1, r2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7f9 fe59 	bl	80047b8 <HAL_PCD_EP_GetRxCount>
 800ab06:	4603      	mov	r3, r0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab18:	4b03      	ldr	r3, [pc, #12]	; (800ab28 <USBD_static_malloc+0x18>)
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	20002248 	.word	0x20002248

0800ab2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]

}
 800ab34:	bf00      	nop
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	4603      	mov	r3, r0
 800ab48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab4e:	79fb      	ldrb	r3, [r7, #7]
 800ab50:	2b03      	cmp	r3, #3
 800ab52:	d817      	bhi.n	800ab84 <USBD_Get_USB_Status+0x44>
 800ab54:	a201      	add	r2, pc, #4	; (adr r2, 800ab5c <USBD_Get_USB_Status+0x1c>)
 800ab56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5a:	bf00      	nop
 800ab5c:	0800ab6d 	.word	0x0800ab6d
 800ab60:	0800ab73 	.word	0x0800ab73
 800ab64:	0800ab79 	.word	0x0800ab79
 800ab68:	0800ab7f 	.word	0x0800ab7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab70:	e00b      	b.n	800ab8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab72:	2303      	movs	r3, #3
 800ab74:	73fb      	strb	r3, [r7, #15]
    break;
 800ab76:	e008      	b.n	800ab8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab7c:	e005      	b.n	800ab8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	73fb      	strb	r3, [r7, #15]
    break;
 800ab82:	e002      	b.n	800ab8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab84:	2303      	movs	r3, #3
 800ab86:	73fb      	strb	r3, [r7, #15]
    break;
 800ab88:	bf00      	nop
  }
  return usb_status;
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <__libc_init_array>:
 800ab98:	b570      	push	{r4, r5, r6, lr}
 800ab9a:	4d0d      	ldr	r5, [pc, #52]	; (800abd0 <__libc_init_array+0x38>)
 800ab9c:	4c0d      	ldr	r4, [pc, #52]	; (800abd4 <__libc_init_array+0x3c>)
 800ab9e:	1b64      	subs	r4, r4, r5
 800aba0:	10a4      	asrs	r4, r4, #2
 800aba2:	2600      	movs	r6, #0
 800aba4:	42a6      	cmp	r6, r4
 800aba6:	d109      	bne.n	800abbc <__libc_init_array+0x24>
 800aba8:	4d0b      	ldr	r5, [pc, #44]	; (800abd8 <__libc_init_array+0x40>)
 800abaa:	4c0c      	ldr	r4, [pc, #48]	; (800abdc <__libc_init_array+0x44>)
 800abac:	f000 f892 	bl	800acd4 <_init>
 800abb0:	1b64      	subs	r4, r4, r5
 800abb2:	10a4      	asrs	r4, r4, #2
 800abb4:	2600      	movs	r6, #0
 800abb6:	42a6      	cmp	r6, r4
 800abb8:	d105      	bne.n	800abc6 <__libc_init_array+0x2e>
 800abba:	bd70      	pop	{r4, r5, r6, pc}
 800abbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800abc0:	4798      	blx	r3
 800abc2:	3601      	adds	r6, #1
 800abc4:	e7ee      	b.n	800aba4 <__libc_init_array+0xc>
 800abc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abca:	4798      	blx	r3
 800abcc:	3601      	adds	r6, #1
 800abce:	e7f2      	b.n	800abb6 <__libc_init_array+0x1e>
 800abd0:	0800ae84 	.word	0x0800ae84
 800abd4:	0800ae84 	.word	0x0800ae84
 800abd8:	0800ae84 	.word	0x0800ae84
 800abdc:	0800ae88 	.word	0x0800ae88

0800abe0 <__retarget_lock_acquire_recursive>:
 800abe0:	4770      	bx	lr

0800abe2 <__retarget_lock_release_recursive>:
 800abe2:	4770      	bx	lr

0800abe4 <free>:
 800abe4:	4b02      	ldr	r3, [pc, #8]	; (800abf0 <free+0xc>)
 800abe6:	4601      	mov	r1, r0
 800abe8:	6818      	ldr	r0, [r3, #0]
 800abea:	f000 b80b 	b.w	800ac04 <_free_r>
 800abee:	bf00      	nop
 800abf0:	20000100 	.word	0x20000100

0800abf4 <memset>:
 800abf4:	4402      	add	r2, r0
 800abf6:	4603      	mov	r3, r0
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d100      	bne.n	800abfe <memset+0xa>
 800abfc:	4770      	bx	lr
 800abfe:	f803 1b01 	strb.w	r1, [r3], #1
 800ac02:	e7f9      	b.n	800abf8 <memset+0x4>

0800ac04 <_free_r>:
 800ac04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac06:	2900      	cmp	r1, #0
 800ac08:	d044      	beq.n	800ac94 <_free_r+0x90>
 800ac0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac0e:	9001      	str	r0, [sp, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f1a1 0404 	sub.w	r4, r1, #4
 800ac16:	bfb8      	it	lt
 800ac18:	18e4      	addlt	r4, r4, r3
 800ac1a:	f000 f84f 	bl	800acbc <__malloc_lock>
 800ac1e:	4a1e      	ldr	r2, [pc, #120]	; (800ac98 <_free_r+0x94>)
 800ac20:	9801      	ldr	r0, [sp, #4]
 800ac22:	6813      	ldr	r3, [r2, #0]
 800ac24:	b933      	cbnz	r3, 800ac34 <_free_r+0x30>
 800ac26:	6063      	str	r3, [r4, #4]
 800ac28:	6014      	str	r4, [r2, #0]
 800ac2a:	b003      	add	sp, #12
 800ac2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac30:	f000 b84a 	b.w	800acc8 <__malloc_unlock>
 800ac34:	42a3      	cmp	r3, r4
 800ac36:	d908      	bls.n	800ac4a <_free_r+0x46>
 800ac38:	6825      	ldr	r5, [r4, #0]
 800ac3a:	1961      	adds	r1, r4, r5
 800ac3c:	428b      	cmp	r3, r1
 800ac3e:	bf01      	itttt	eq
 800ac40:	6819      	ldreq	r1, [r3, #0]
 800ac42:	685b      	ldreq	r3, [r3, #4]
 800ac44:	1949      	addeq	r1, r1, r5
 800ac46:	6021      	streq	r1, [r4, #0]
 800ac48:	e7ed      	b.n	800ac26 <_free_r+0x22>
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	b10b      	cbz	r3, 800ac54 <_free_r+0x50>
 800ac50:	42a3      	cmp	r3, r4
 800ac52:	d9fa      	bls.n	800ac4a <_free_r+0x46>
 800ac54:	6811      	ldr	r1, [r2, #0]
 800ac56:	1855      	adds	r5, r2, r1
 800ac58:	42a5      	cmp	r5, r4
 800ac5a:	d10b      	bne.n	800ac74 <_free_r+0x70>
 800ac5c:	6824      	ldr	r4, [r4, #0]
 800ac5e:	4421      	add	r1, r4
 800ac60:	1854      	adds	r4, r2, r1
 800ac62:	42a3      	cmp	r3, r4
 800ac64:	6011      	str	r1, [r2, #0]
 800ac66:	d1e0      	bne.n	800ac2a <_free_r+0x26>
 800ac68:	681c      	ldr	r4, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	6053      	str	r3, [r2, #4]
 800ac6e:	4421      	add	r1, r4
 800ac70:	6011      	str	r1, [r2, #0]
 800ac72:	e7da      	b.n	800ac2a <_free_r+0x26>
 800ac74:	d902      	bls.n	800ac7c <_free_r+0x78>
 800ac76:	230c      	movs	r3, #12
 800ac78:	6003      	str	r3, [r0, #0]
 800ac7a:	e7d6      	b.n	800ac2a <_free_r+0x26>
 800ac7c:	6825      	ldr	r5, [r4, #0]
 800ac7e:	1961      	adds	r1, r4, r5
 800ac80:	428b      	cmp	r3, r1
 800ac82:	bf04      	itt	eq
 800ac84:	6819      	ldreq	r1, [r3, #0]
 800ac86:	685b      	ldreq	r3, [r3, #4]
 800ac88:	6063      	str	r3, [r4, #4]
 800ac8a:	bf04      	itt	eq
 800ac8c:	1949      	addeq	r1, r1, r5
 800ac8e:	6021      	streq	r1, [r4, #0]
 800ac90:	6054      	str	r4, [r2, #4]
 800ac92:	e7ca      	b.n	800ac2a <_free_r+0x26>
 800ac94:	b003      	add	sp, #12
 800ac96:	bd30      	pop	{r4, r5, pc}
 800ac98:	2000246c 	.word	0x2000246c

0800ac9c <strcat>:
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	4602      	mov	r2, r0
 800aca0:	7814      	ldrb	r4, [r2, #0]
 800aca2:	4613      	mov	r3, r2
 800aca4:	3201      	adds	r2, #1
 800aca6:	2c00      	cmp	r4, #0
 800aca8:	d1fa      	bne.n	800aca0 <strcat+0x4>
 800acaa:	3b01      	subs	r3, #1
 800acac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acb4:	2a00      	cmp	r2, #0
 800acb6:	d1f9      	bne.n	800acac <strcat+0x10>
 800acb8:	bd10      	pop	{r4, pc}
	...

0800acbc <__malloc_lock>:
 800acbc:	4801      	ldr	r0, [pc, #4]	; (800acc4 <__malloc_lock+0x8>)
 800acbe:	f7ff bf8f 	b.w	800abe0 <__retarget_lock_acquire_recursive>
 800acc2:	bf00      	nop
 800acc4:	20002468 	.word	0x20002468

0800acc8 <__malloc_unlock>:
 800acc8:	4801      	ldr	r0, [pc, #4]	; (800acd0 <__malloc_unlock+0x8>)
 800acca:	f7ff bf8a 	b.w	800abe2 <__retarget_lock_release_recursive>
 800acce:	bf00      	nop
 800acd0:	20002468 	.word	0x20002468

0800acd4 <_init>:
 800acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd6:	bf00      	nop
 800acd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acda:	bc08      	pop	{r3}
 800acdc:	469e      	mov	lr, r3
 800acde:	4770      	bx	lr

0800ace0 <_fini>:
 800ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace2:	bf00      	nop
 800ace4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace6:	bc08      	pop	{r3}
 800ace8:	469e      	mov	lr, r3
 800acea:	4770      	bx	lr
